{"1": ["Expertiza provide the function for user to request an account, but the function is not perfect. It will enable Expertiza to handle the pending request for super-admin and add institution for user. 1. Currently, a new user can only choose institution from the dropdown. The new user should be able to add a new institution. 2. A place where a new user to write a brief introduction is needed in this page. 1. After super-admin or admin approves the request, make sure the record does not disappear on the page. And there should be an email send to email address offered by requester. 1. Modify the test of request new user method. 2. Add a new option for the drop-down bar of institution in the new user request page. 3. Add a new textarea in the new user request page, to input a new institution and introduction. 4. Add validation for new institution new institutions and introductions. 6. Add a new button on the layout. 8. Enable the system will send an email after the request is processed. So we need to add a new column for request_user table. The new table will be shown below. <image>. <image> <image> 1. Name: Instructor or Teaching Assistant request a new account 2. Actor: Instructor or Teaching Assistant 3. Other Participants: None 4. Precondition: None 5. Primary Sequence: 1. Click on ‚ÄúRequest account‚Äù. 3. Fill in a user name. 6. Select an institution. 8. Click on ‚ÄúRequest‚Äù. 2. Fill in the institution name. 1. Name: Admin or Super admin view list of new account requests 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza. 3. View the list of new account requests. 1. Alternative Flow: None 1. Name: Admin or Super admin accept a new account request 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza. 3. Select a request. 1. Alternative Flow: None 1. Name: Admin or Super admin reject a new account request 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza 2. Click on the link ‚Äú/users/list_pending_requested‚Äù. 3. Select a request. 1. Alternative Flow: None 1. Name: Admin or Super admin send an email to applicant 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza 2. Click on the link ‚Äú/users/list_pending_requested‚Äù. 3. Select a request. 4. Click on the email address. 1. Alternative Flow: None. <code> <code> <code> <code> <code>. <code> <code> <code> <code>. Below are the mock-up screens that explain ‚Äúnew account acreation‚Äù functionality in Expertiza. 1. 1.New user should click ‚Äúrequest account‚Äù for requesting a new account, then redirect to the ‚Äúrequest new ‚Äù page. <image> 1. 2.After redirect to ‚Äúrequest new ‚Äù page, new users should enter their information, includes role, name, e-mail and institution. We can enter our new institution in this textbox. The email address is clickable. <image> 1. 5.If we click the email address, the email editor will pop out. <image>. In the first part, we test the request account feature. Finally, we test if the new user can signin with new account and password. 1.Now in the new user request page, the user can add a new institution by choose 'Other' and input their own institution. <image> 2.The new institution is able to saved into institutions table as a new record. <image> 5.The administrator can access the '/users/list_pending_requested' url via ‚ÄúAdministration > Show‚Ä¶>new requests‚Äù menu <image> The admin can access the '/users/list_pending_requested' url via ‚ÄúAdministration > Manage>new requests‚Äù menu <image> 6.‚ÄúEmail Address‚Äù column in /users/list_pending_requested page clickable. <image> <image> 7.After super-admin or admin approves the request, the record does not disappear on the page. <image> 8.There is be an email send to email address offered by requester.And for super_admin and user. <image> <image>.", ["Very good job of describing the changes made to the code.", "It would have been helpful to have a more detailed description of what was done.", "Also, It would have helped to have more of a description of the changes that were made.", "The description of how the code is changed is not very clear.", "There is no explanation of the code changes."], [0.0, 1.0, 1.0, 1.0, 1.0]], "2": ["It also makes it easy for the instructor to add a new topic to an assignment/project, create a new project and add students to it. This helps in improving the existing work and also provides a new way to learn. In Expertiza, user and instructor accounts are currently created by existing super administrators, instructors or TAs. For new users to access the system and experiment the features offered by Expertiza, a ‚Äúdemo-like‚Äù feature needs to implemented. The following are the set of requirements that needs to be catered with this feature: 1. Allow people to request instructor accounts over the web. This feature should also have security features such as Captchas to help avoid account creation by bots. 2. When a user account is created over the web, the super-admin should get e-mail regarding the same and also the user should be notified upon approval/denial (if denied, then reason should be specified). 3. Currently, Expertiza consists of a lot of entities that can be made publicly visible to all other users in the system. 4. A user who creates an account over the web should be pointed to an instruction page and/or video on how to create an assignment and register students for it, etc. Once a user wants to register and try the features of Expertiza, upon opening the website, one can register by filling up the form and click the register button. Once the user requests for an account creation, the super admin receives a mail informing about the request with the name of the requested user. The super admin shall then, look for the details of the user in the Review Requested Users tab and can either approve/decline the request. Once the super admin approves the user request, the user gets a mail notifying that they now have the permission to access the features of Expertiza. A temporary password in clear text is also sent in the mail for login. If the request is rejected, then the reason should be mentioned in the reason column of the form. But there is no mail sent to the user regarding that. Needs permission from super admin‚Äù that can be seen on the login page if an unregistered user tries to access the features of Expertiza. Once the user requests for an account, upon clicking the request sign up , he/she is automatically redirected to the instructions page with the video tutorials explaining various features of Expertiza and on how to access them. In _login.html.erb a new button called Request Sign Up was added for the new users to register. The register page will look as above. On clicking Request , a user will be redirected to a page like below: <image> User will have to fill up all the required details and request a signup. When a super administrator logins to his account he can go to Manage/users/review requested users menu as shown below. We have put the review requested users in the menu, rather than a separate tab, making it more flexible to integrate some more features under the users option later. <image> Super Admin can either approve/reject a user. The view for this page would be as shown below. This is an entirely new page wherein, the super admin can also mention the reason for a rejection of a request and view the entire list of requested users. <image> In addition to the above files a new file in instructions, named home.html.erb is created which will have all the videos explaining how Expertiza works. This is to the new user to request for an account in Expertiza and also mail all the super admins about the new user request. Upon the request, this method uses the user parameters (fields entered in the request sign-up form) and a status of 'Under review' is assigned by default. On verifying the captcha, the super admin(s) gets a mail regarding the request with the user name and the requested user is redirected to the instructions page. This is for the super admin to either approve or reject the user request and send a mail to the requested user if his/her account is created. The mail also contains a password for the user to login. We have created a new table called requested_users with table description that is similar to users . The status column, which isn't present in the users tables indicates the approval/rejection of the request of the user. Though the description of this table is similar to the users table, we thought it was better to go with a new one, keeping in view of the following advantages: 1. The users table had lot more entries which weren't needed for the requested user scenario and also vice-versa. The entries like status and reason of the requested_users table weren't necessary once the user request has been approved. 2. The users table was accessed at many places in Expertiza, so any change in that would have to be reflected at all places. It was comparatively easier to manage with a new table rather than using the existing one. The description of the table is as follows: <image>.", ["This is a very good description of the changes that were made.", "This would have been better to have included more screenshots of the code changes.", "Also, This would have made This easier to see what was changed.", "The design doc is very readable, but The design doc doesn't explain why the changes were made in the way that they were."], [1.0, 1.0, 1.0, 1.0]], "3": ["Students submit their work and review other‚Äôs work and provide feedback. Wiki link: <link> Github link: <link>. 1. The current Expertiza UI for reviewing uses a simple html text area for each criterion, which starting to look dull for the users. 2. Moreover, the current form still uses plain old HTML form that sent the text entered in several text areas to the controller only after the user clicks the submit button. Moreover, we found that the review text contains misspelled words and incorrect use of English grammar that makes the review hard to understand. Updates in requirements as of 11 November, 2017 4.Replace the text area with a rich text editor that allows user to customize the fonts, bold, insert link to images / videos (possibly generate a thumbnails of the links). Approach: We have replaced text area in the review form with <link> rich text editor. There are many rich text editors available like <link> , <link> , etc. Usage 1. Gem used: <link> 2. Behaviour of TinyMCE can be modified by making changes in config/tinymce.yml 1.1. Plugins embedded: 1.1.1. Link : Allows a reviewer to link external resources such as website URLs 1.1.2. Media : Adds the ability for reviewers to be able to add HTML5 video and audio elements to the editable area. 1.1.3. Code Sample : Lets a reviewer insert and embed syntax color highlighted code snippets into the editable area. 3. Initializing TinyMCE: To initialize tinyMCE in the new text area add the \"tinymce\" class as mentioned in the below example and ensure it has a unique ID. <code> Then invoke the tinymce helper to initialize TinyMCE: <code>. Approach: We have replaced drop-down used for giving scores in the review form with <link> . Now reviewer has to select a number of stars for each review questions instead of selecting a value from drop down. 3. No logical changes have been done to embed this feature in the form. Usage 1. bower install <link> . 2. Initializing star rating: To initialize star rating in the new select box apply the javascript as mentioned in the below example and ensure it has a unique ID. <code>. Approach: The current design of the system clears all the data in the text fields once a session for the user has been ended. We are making an AJAX call to save user entered text from the current text box as soon as user switches to next text box. This AJAX call is made every 10 seconds to save the content, also the user gets to see the green tick showing the last time when his user entered text has been saved. UTF-8 :To solve UTF-8 encoding problem, we can make a form accept only UTF-8 characters by using an attribute of the form tag. But most of the characters, including a lot of characters from languages other than English, are present in UTF-8 character set so the application will work perfectly fine on just allowing UTF-8 characters in the text box. Below is the code snippet on the same. <code> Spellcheck : Since we have used rich text format, spellcheck is being handled by the same and we have just enabled the spellcheck option for the browser. Below screens are for criterian based review forms. We have used DRY principle, we have made changes in the existing code and even used the same javascript functions. Manual test cases plans: 1. Field Widths ‚Äì If the screen contains text boxes that allow data entry and the width of data entered does not exceed the width of the form. 2. Save and Submit Review ‚Äì If the screen has the save and submit review buttons. 3. Cosmetic Inconsistencies ‚Äì The screen look, feel and design should match the other screens in your application. 4. Spelling ‚Äì Ensure that you have test cases that look for spelling errors. 6. Screen Font Type - Ensure that the screen font family matches from screen to screen. 7. Backlink - Ensure that backlink is present on the screen. 8. Review draft is saved - Ensure that user draft version is saved automatically in every 30 seconds. 9. Star rating- ensure that rating stars are displayed on the screen in place of the select dropdown. Automation testing: We are keeping the same test cases since as per our implementation to improve the review UI, we have not changed anything on the id and the class elements of the javascript, we have just changed the CSS elements, so basically, we have not broken the existing test cases. 1. Embedding more plugins in TinyMCE like inserting images, special characters, tables, etc. 2. Embedding code snippets from GitHub to enable the reviewer to link authors code using 'permalink' feature of GitHub. 3. Using multi-step review form having one review question per step. This will improve the user experience while reviewing others work. Demo <link> .", ["Good description of the changes to be made.", "It is not clear how the code snippets are changed.", "the code snippets should be described in more detail.", "the code snippets should be shown in a table of contents.", "Also, it would have been helpful to explain the changes made to the code.", "I would have liked to see a description of how the tests are tested."], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0]], "4": ["Expertiza has two kinds of review strategies, as specified in the Review Strategy tab of assignment creation: Auto-selected Reviews are not preassigned, but when a student comes to do a review, (s)he can select from the reviews that are available at that point. Instructor-selected Instructor decides in advance who reviews whom.Until now, when the strategy is auto-selected, there has been no maximum on the number of reviews a student could select. So students can review as many topics as they want. Set a maximum on the number of reviews a student can choose with auto-selected reviewing. This requirement needs changes to the instructor view and student‚Äôs review page. Instructor view changes While creating the assignment, instructor should be able to specify maximum on the number of reviews done by each student. We added checkbox for this selection under Review Strategy tab of instructor view. If the instructor selects this checkbox, he‚Äôll be prompted to enter the value for the maximum reviews allowed for each student. There are no changes to assignments controller. Instructor view looks as shown below. <image> Requirement 1 - Instructor View Changes Student Topic Review page changes Students review topics page is displayed by list method of Student_review_controller . <image> Requirement 1 - Student View Changes. If the student selects some topic and want to drop for some reason, he/she need to contact instructor to drop that review. Student Topic Review page changes Students review topics page is displayed by list method of Student_review_controller . <image> Requirement 2 - Allow students to drop reviews <image> Requirement 2 - Allow students to drop reviews only if Review has not been submitted. While creating the assignments instructor can allow students to see their teammate score by selecting Show teammate reviews? But this option shows both the scores and teammate reviews on the grades/view_my_score page. Instructor view changes General tab of assignment creation has \"show teammate reviews ?\" option. \"show teammate scores ?\" , \"show teammate reviews?\" . \"Show teammate reviews ?\" This is how instructor view will change after implementation. <image> Requirement 3 - Instructor View Changes Changes to students view score page Code to display teammate reviews and scores is present in the /views/grades/view_my_scores file. If the instructor only selects show teammate scores? student will be able to see aggregate teammate score as shown below. <image> Requirement 3 - Show aggregate teammate scores Students will be able to see only reviews if the instructor selects show teammate reviews ? during assignment creation. <image> Requirement 3 -Show only teammate reviews Students will be able to see both the score and teammate reviews if the instructors checks both boxes from assignment configuration page. There is no option that lets reviewers see others‚Äô reviews of the same work after they submit their review of that work. Instructor view changes While creating the assignment, instructor should be able to specify if students should be allowed to see reviews done by other students for the same work. <image> Requirement 4 - Instructor view to allow students to review others work Changes to student_response controller and views The View link displays the submitted/in progress reviews of the student and is handled by the list action of the StudentReviewController (student_review_controller.rb) and the associated list view is \"/views/student_review/list.html.erb\" file. We plan to add another link Other Reviews to the partial _reponses view. This link would be visible only if the show_other_reviews option has been enabled by the instructor and the review for the topic has been submitted by the student. This link would be next to each of the Review Topics submitted by the student of that assignment. <image> Requirement 4 - Student view - link to view other submitted reviews <image> Requirement 4 - Student view - Reviews submitted by other reviewers for the same work. The existing implementation of expertiza doesn‚Äôt provide a student the option to not see review scores or the text feedback. Sometimes a student might just want to see the scores and not the reviews and other times might want to see the reviews and not the scores. If the value is set to 0 then the student can view both scores and feedback, if the value is set to 1 then the student can view only the scores and if the value is set to 2, then the student can view only the feedback. Student View Task page changes In the student task view, the page where the student can submit work, view scores, review others, etc. we added a new option for the student to change review settings. Clicking on that link takes the student to the change_reviewsettings page where the student can choose to either view both scores and feedback or just scores or feedback. Review page changes In the partial to view the reviews _review.html.erb, conditions have been added to check the value of the reviewsetting variable. Based on the value of the variable, either both the scores and feedback or just the scores or just the feedback is displayed to the student.", ["Very good description of the changes to the code.", "The code changes are described well.", "The code changes would have been helpful to show The code changes in more detail.", "Also, it would be helpful to explain how the code is organized.", "There are no screenshots of the code, just a list of changes.", "that There are no screenshots of the code, just a list of changes is not very helpful."], [0.0, 0.0, 1.0, 1.0, 1.0, 1.0]], "5": ["Expertiza uses the jquery‚Äôs date-time picker widget for setting dates and times on various views. Over the years, different developers used different version and formats of the date-time picker due to which there are inconsistencies across the expertiza project. The main problem with the date-time picker is that the widget and the date-time formats used across the expertiza project are not consistent. Moreover, the JQuery based date-time UI widget itself is on version 0.8 which is extremely old and no longer consistent with expertiza's looks and feel. The primary task of the refactor was to find, refactor and make the date-time picker consistent at all places while exploring the possibility of updating the date-time picker to a newer version or completely replacing it by another better widget which works in conjunction with modern javascript libraries. The first step in the approach was to explore the current functionality of existing date time picker. According to our solution, the existing library needed to be replaced by the new gem. Further, necessary syntactical changes were made respective to the new gem. 1. <link> Moment.js is a lightweight javascript date library for parsing, manipulating, and formatting dates. The existing date-time picker widget was replaced by the new date-time picker in the following views: 1. Edit and create assignments - app/views/assignments/edit/_due_dates.html.erb This contains fields to set the submission and review deadlines for different rounds. The existing JQuery call to the date time picker was replaced by the call to the new widget. The form includes a selection of start date and end date for signup. Following changes were made to the file: Before: <code> After: <code> 3. New survey creation - app/views/survey_deployment/new.html.erb The page contains the form to allow the creation of new surveys. The survey start and end dates can be set using the form. The old code used two separate inline onClick event to call the same DateTime picker. Before: <code> After: <code> 4. Version logs - app/views/sign_up_sheet/_due_dates.html.erb The version logs file which is only accessible to the admins uses the date tie picker to filter the search results using the start and the end date. Following changes were made to the file: Before: <code> After: <code>. The old jquery based date-time picker was replaced by a new modern bootstrap based date-time picker as shown in the pictures below. The new bootstrap date-time picker widget also has different styles which can be implemented by changing the code as per the documentation <link> . Old Date-Time Picker <image> New Date-Time Picker <image>. This refactor was mainly concerned with the date-time picker widget UI. Thus most of the testing was done manually as automated testing cannot be used to test the widget. After refactoring each of the pages using the date-time widget, rigorous testing was done to check if the date-time picker selected the right date in appropriate formats. Automated testing was performed to test the models and controllers which relied on the date-time picker for its correct functioning. The new date-time picker widget was manually tested for correctness using the following manual steps: 1. Create and edit assignments Login into instructor account -> Select Manage Assignments -> Click on the plus sign to the right -> Fill in the relevant details -> In the 'due dates' enter the submission and review deadline using the new date time picker widget -> Save -> Check if assignment with proper deadline is being created. 2. New survey creation Login into instructor account -> Select Manage assignments -> From the list of assignments select an assignment and select the 'assign survey' action-> Fill in the relevant details -> Enter the survey start and end date using the new date time picker widget -> Save -> Check if the survey is created with proper deadline. Also the datetimepicker feature with start date and end date detection should work for both admins and super-admins. <image> <image> <image>. <image>. ( <link> ) 2. GemFile.lock ( <link> ) 3. application.js ( <link> ) 4. application.scss ( <link> ) 5. assignments/edit/_due_dates.html.erb ( <link> ) 6. sign_up_sheet/_due_dates.html.erb ( <link> ) 7. survey_deployments ( <link> ) 8. _row_header.html.erb ( <link> ) 9. search.html.erb ( <link> ) 10. factories.rb ( <link> ) 11. versions_search_spec.rb ( <link> ) 12. list.html.erb ( <link> ). Github Repo: <link> Pull Request: <link>.", ["This is a very good description of the changes made to the code.", "The design doc is very readable.", "The design doc explains the changes well.", "However, The design doc does not explain how the code was refactor, or how the code was tested.", "Also, the code is not consistent with The design doc.", "that Also, the code is not consistent with The design doc is a good thing."], [1.0, 1.0, 1.0, 0.0, 0.0, 0.0]], "6": ["The Expertiza project is software to create reusable learning objects through peer review. Expertiza is an open source project and is based on ‚ÄúRuby on Rails‚Äù framework. Expertiza should be able to distribute surveys to the users. The survey can be one of the following: 1. Course survey (all the participants of the course can take it). 2. Global survey (all the users in Expertiza can take it). The survey can also be targeted (the admin can specify a group of people who will receive this survey). The three kinds of surveys in this project are: 1. 1. Assignment Survey questionnaire 2. 2. Global survey questionnaire 3. 3. Course evaluation questionnaire. 1. Survey questionnaire should be a subclass of questionnaire. 2. The creation, editing, filling in, and checking that all the questions have been answered survey should be similar to the procedure used for other types of questionnaires (e.g. peer-review questionnaires). 4. We should use the same controller method to take the survey as to fill in the peer-review, namely, response_controller. 5. We should use the same code to display the existing survey responses as to display the responses in peer reviews. 6. For each course or assignment, the admin/instructor should be able to create a survey and have some (or all) of the participants receive the survey. Assignment Survey questionnaire, Global Survey questionnaire and Course Evaluation Questionnaire are the existing models which are subclasses of questionnaire. Their display types are survey, global survey and course evaluation respectively. <image>. 1. There is a constraint that the survey has to be filled in using the same controller method as used for filling in peer review, namely response_controller. Also, the same code has to be used to display the existing survey responses as to display the responses in peer review. 2. The response_controller can be used to make sure that the survey can be taken only once by each user, depending upon the survey type and the users who are allowed to access (can be listed using 'action_allowed?'). The answers can be saved using the 'saving' method. Also, the responses can be viewed once, the survey is submitted. 1. Instructor or admin both can add survey for any course or assignment 1. The creator would be able to select the participants based on the scope of the survey, that is, all the students or all the Expertiza users or specific group of people. 2. These questions will be by default added to every survey the user creates. 4. Or, there can be option of separating the global survey and course survey. The quiz taker will take the global survey first and then the course survey. 3. In our part of project implementation, there is no need to incorporate any changes to the Assignment Questionnaire. 1. Adding columns to the 'Assignments' table: survey_id and global_survey_id. 2. Adding columns to the 'Course' table: survey_id and global_survey_id. 1. We update 'survey_id' and 'global_survey_id' in the 'assignments' table. 2. This requires checking if any entry for 'survey_id' is already present: Case TRUE: Warning to user 'Update to an existing survey'. 1. The survey is mapped to participants through 'participants' table. 2. In 'participants' table: <code> 1. Using the 'type' we can get the type of object i.e. assignment or course, and then using parent_id the particular instance of that object can be mapped to the survey and listed for the user/participant. 1. There is no explicit assigning of surveys to participants. Updating the new columns in 'assignments' and and 'courses' table is sufficient for assigning the surveys. submitted or not submitted, the user/participant can view or update, respectively, the surveys. 1. Checking the 'assignments' or 'courses' the participant has enrolled in. 2. Checking if the 'assignments' or 'courses'have active surveys (survey_id != NULL). 3. If participant has already responded to the survey, only 'View' option is available. 1. There is a global table for all the responses in Expertiza-'response_map'. All the responses in expertiza are saved in this table. 2. When participant responds to the survey, based on the survey type, the entry in the response_map is: <code> 1. The other entries are: <code> <image>. 2. Click on Manage -> Questionnaires-> Survey / Global Survey/ Course evaluation. 3. Create a new Survey/ Global Survey/ Course evaluation filling in the parameters asked for. <image> Login as student: 1. The course survey is for all the students, whereas the global survey is for a few random students using Expertiza. 2. Take the survey visible through your account.", ["Good description of the changes made to the code.", "Good description of how the code is changed.", "But, the code would have been better if the code was more clearly described.", "the code would also have been helpful to explain the changes to the Assignment Questionnaire.", "Also, the design doc is not very detailed."], [1.0, 1.0, 1.0, 1.0, 1.0]], "7": ["A staggered-deadline assignment is an assignment in which different topics have different deadlines. It can be pretty useful if different topics within an assignment can have different deadlines for submission as well as reviews. Problem 2: Manual submission and review deadline entry required for all topics Currently system requires instructor to enter submission and review deadlines for all topics. Currently this is happening, but only in case of assignments which do not have staggered deadlines. If the assignment is not a staggered deadline assignment and if its submission deadline has passed, then we prevent students from signing up for any topic in that assignment. <code> We will have to replicate a similar logic for staggered deadline assignments. The problem here is that for staggered deadline assignments, different topics might have different deadlines. <code> First we check if the topic has a specific different deadline set by the instructor, and if not, then its deadline will be the same as the common deadline for the assignment. We do this only for staggered deadline assignments as for the other assignments, this check has already taken place. Our requirement is to provide the instructor with the option to select a relative date for the submission review deadlines based on the Round1 submission deadline. The instructor would however like the ability to manually enter a custom date according to his needs. One way of dealing with the above problem would be to provide an option for the other date fields for a given assignment to chose a relative date based on the initial submission date in addition to the ability to override and manually enter a custom date. Example: 3 days after Submission deadline, 6 days after re-submission deadline. The first step will be to make this assignment a staggered deadline assignment. For doing this edit the assignment and under the General tab, make this a staggered deadline assignment. Part1: Instructor wants to assign default deadlines to a staggered assignment In this case, the default deadlines for the assignment will be filled automatically based on the submission date for Round 1. In this case no further input from the instructor is required apart from selecting the round 1 submission deadline 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. Part2: Instructor wants to enter custom deadlines for a staggered assignment In this case, the instructor has two options. He can either chose a deadline from a list of other relative deadlines from the dropdown menu for a particular round or all rounds, or he can decide to override the system enter a date manually by selecting the ‚ÄúCustom Date‚Äù option. 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. 6. Change all the deadlines for the other rounds according to your requirements by choosing the \"Custom Date\" option Part3: Instructor wants to enter a custom deadline only for a particular round In this case, the instructor can set the submission deadline for round 1. This would result in all deadlines being populated relatively according to the pre-set values. The instructor can then, if need be, modify the deadline for a particular round by either selecting a different relative date or by entering a custom date manually. 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. 6. Change all the deadlines for the necessary round by either entering a manual date or by choosing a different relative date from the dropdown. 1. Login as instructor6 2. Go to courses tab 3. For CSC/ECE 506, Spring 2014, go to edit assignments and choose New problems B 4. Edit this and make it a staggered deadline assignment. Also change the review due dates for the first round to any date beyond today 5. Now go back to assignments page and go to view review report for this assignment 6. We focus on student 5059 for this case. 7. This student has one review, go ahead and grade this review. 12. Now revert back to instructor6 and again go to view review report for this assignment. 3. Revert back to instructor6 and again go to view review report for this assignment. We created 4 new topics for this assignment. Testing for modification of dates in staggered deadlines. Case 1: Attempting to enter a date for a round that was before the previous round. Case 2: Attempting to enter a date for round1, round2 or round 3 that is out of invalid (Deadlines being before current date). Case 3: Entering an incorrect date when manually entering a deadline for a particular round for a staggered deadline.", ["This is a very good description of the changes that were made.", "This would have been helpful to explain how the code was changed, and how the tests were tested.", "Also, the code would be helpful to show the changes made to the test plan.", "the test plan is not very detailed, and the tests are not described in any detail."], [1.0, 0.0, 0.0, 1.0]], "8": ["Expertiza is an online web application for educational purpose, and is developed using Ruby on Rails. Instructors are able to create, modify, delete and view assignments and students are able to form teams, submit assignments and make reviews using this application. The tree-display.js and its tree_display_controller.rb files are designed to allow Expertiza users to view their Assignments, Courses and Questionnaires at one place. This is the primary control page, as well as the home page for instructors on Expertiza which allows them to create, modify, delete and view Assignments. The primary problem with this is that both the files, due to their bulky and unoptimized methods, slow the rendering of UI on screen. The methods in these files can be studied and refactored to improve the overall performance of this controller and its corresponding UI. Moreover, any obsolete or unused methods can be removed and DRY principle should be implemented. This project mostly revolves around these 2 files, and would involve refactoring JavaScript more than Ruby on Rails. There may be unused methods in the controller or java script file due to previous development, maintenance and refactoring. Loading speed of the web page is slowed down by repeated interface with database regarding to same variables but by different methods. To find out unused methods in dynamically typed language like Ruby is difficult, thus our team is focusing on the suspicious methods which have neither comments nor references showing in github. All suspicious methods are tested and following shows the confirmed used methods as well as their functionality. goto_... Methods are called when the instructor clicks on the corresponding node under the \"Manage\" menu (e.g. \"goto_quetionnaires\" is called when clicking on \"Questionnaire\" node.) and the user will get redirected to corresponding pages. confirm method is called when the instructor tries to delete a course/assignment/review and chooses \"yes\" at the confirmation page. folder_node_ng_getter functions to render json of the node. (e.g. Returning all the courses data when clicking on \"Course\" node.). 1. We found one unused method bridge_to_is_available and delete it. <image>. 1. We simplified the month string representation in file app/assets/javascripts/tree_display.jsx <image> 2. We found the goto_* functions in file app/controllers/tree_display_controller.rb are not necessary and can be replaced with the goto_controller(name_parameter). However, they are called outside of the files in our scope and we did not modify them for now. <image> 3. We found a confusing variable name \"res2\" in file app/controllers/tree_display_controller.rb and changed. <image> 4. We found two confusing method names \"update_is_available\" and \"update_is_available_2\" and that \"update_is_available\" is used for checking the accessibility of users who are tas/owners while \"update_is_available_2\" is used for checking the accessibility of user who are instructors. <code> is changed to <code> and <code> is changed to <code> 5. We found three confusing method names \"initialize_fnode_2\" and \"children_node_2_ng\" and that \"res_node_for_child_2\" for corresponding nested chidren nodes (the subfolders in the tree display). <code> is changed to <code> , <code> is changed to <code> and <code> is changed to <code> 6. We renamed a few variable and method names related to update_tmp_obj <code> is changed to <code> and <code> is changed to <code>. The tree_display.js and tree_display_controller.rb are mainly related to the \"Manage\" tab and its child nodes. Thus, the following steps are needed to test the functionality from UI: 1. Log in as an instructor. 2. Click on the \"Manage\" tab as well as its child node on the tool bar and to test if they are redirected to the correct page. (Child node means \"Users\", \"Questionnaires\", \"Courses\", etc. under \"Manage\" menu or \"Review Rubrics\", \"Metareview Rubrics\", etc. under \"Questionnaires\" menu. And the reason calling it \"child node\" is because it is the variable name used in code.) 3. Click on the displayed contents to test if the details can be displayed properly. We passed all Travis CI build and Codeclimate checks.", ["This is a very good description of the changes made.", "This is very readable.", "The only thing that needs to be changed is the name of the variable \"res2,\" this variable is used too often, and should be changed to \"res1\" or \"res3.\"", "this variable is used too often, and should be changed to \"res1\" or \"res3.\"", "this variable would also be helpful to have a description of how the code is changed."], [1.0, 1.0, 0.0, 0.0, 0.0]], "9": ["E1472: Connect changes to score model with changes to score views Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.1.1.1.1. <link> 1.1.1.1.2. <link> 1.1.1.1.3. <link> 1.1.1.5. <link> 1.1.1.6. <link> 1.1.1.7. <link> 1.4. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.5. <link> 1.1.1. <link> 1.1.2. <link> 1.6. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.7. <link> 1.8. <link> 1.1.1. <link> 1.1.2. <link> 1.9. <link> 1.10. <link> 1.1.1. <link> 1.1.2. <link> 1.11. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.12. <link> 1.13. <link>. One of the Expertiza features is to report scores to both students and the instructor. The student can see the feedback from other students, such as the max score, the min score and the average score. Current System (After Refactoring Grades_controller): <link> <code> Student: user1600 and user1601 Password: test Original System (Before Refactoring Grades_controller): <link> <code> Student: user1600 and user1601 Password: test All our test result based on the following test cases on expertiza, please follow these step to get it. <code> Student: <code>. <code>. <code> <code> <code> <code> <code> <code>. <code> <code>. <code> <code>. <code>. <code>. <code>. <code>. <code>. The view method reports everyone‚Äôs grades to an instructor, and the view_my_scores method reports peer-review scores to a student. The grades_controller class is responsible for displaying grades to students (via view_my_scores) and instructors or Teaching Assistant (via the view method). <image>. 1. view method : handle the functionality of viewing the assignments of the whole class. 1. view_my_scores : take care of displaying the scores pertaining to an assignment to a single user. <image> The figure above mainly illustrates the process of viewing scores for different actors. The instructor and teaching assistant are able to view scores of all the team and could see the reviews of a selected team. Student actor can see his own scores and reviews. For example, when a student want to view his/her grades, there must be something in the database (precondition). <image> The RScore class stores the variables maximum,minimum, average review scores. Create rscore class in models (rscore.rb): <code>. Before: (views/grades/_participant.html.erb) <code> After: (views/grades/_participant.html.erb) <code>. Before :(views/grades/_participant.html.erb) <code> After :(model/assignment_participant.rb) <code>. At the beginning of the final project, the function of viewing scores is very slow by students and instructor. 1. Modify get_assessments_for method in response_map.rb After doing this, the time cost of view function decreased by more than 90% Before Refactoring: <code> After Refactoring: <code>. <table> 1. Original Time for Instructor to View all scores <image> Original Time for Instructor to View all scores 1. Time for Instructor to View all scores after Refactoring <image> Time for Instructor to View all scores after Refactoring 1. Original Time for Student to View all scores <image> Original Time for Student to View all scores 1. Time for Student to View all scores after Refactoring <image> Time for Student to View all scores after Refactoring. <image>. <image>. <image>. <link> <link> <link> <link> <link>. We will stick to the UI design of the grades view and see what else we can do to further improve the performance of the system.", ["This is a very good description of the changes to be made.", "The design doc is very readable.", "The design doc explains the changes well.", "But the screenshots are not very large.", "the screenshots are just a few lines long.", "There is no description of how the changes are made."], [0.0, 1.0, 0.0, 0.0, 0.0, 1.0]], "10": ["Expertiza is a web application developed using Ruby on Rails that serves as a peer-review system. The application allows students to submit and peer-review learning objects (articles, code, web sites, etc)<ref> <link> </ref><ref> <link> </ref>. It is an open source project and it's codebase is maintained in GitHub. We are contributing to Expertiza as a part of our Object-Oriented Design and Development's Open-Source Software (OSS) Project. Our goal in this project is to refactor the assignment_participant model . In this Wiki Page, we will explain the changes that we have made for the same. Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.4. <link>. The assignment_participant model is subclass of Participant model and is used to maintain the list of students/users participating in a given assignment. The changes that are needed to be done are described as follows:<ref> <link> </ref> 1. Rename methods prefixed with ‚Äúget‚Äù. 2. Move methods to appropriate file helper classes. 3. Move methods to appropriate models. 4. Remove unused methods 5. Use good Ruby style guidelines in the code. <references/>.", ["This is a very good description of the changes that were made.", "The changes are described in good detail.", "The changes are described as follows: Rename methods prefixed with “get”, move methods to appropriate file helper classes, and remove unused methods."], [1.0, 1.0, 1.0]], "11": ["response.rb is the class that manages the response to all rubrics in Expertiza. if someone fills out a review form, the instance of the review form is a Response. If someone gives feedback (a ‚Äúrejoinder‚Äù) to an author, that is a Response too. Or if someone evaluates a teammate contribution, fills out a survey, or takes a quiz, they are creating a Response. Note: Method display_as_html writes the HTML for displaying a rubric. This would ordinarily be view code, but it is used by so many different views that it is done here. Questions are written out in the order of their sequence number (anyone who creates a rubric can specify sequence numbers for questions). After all questions are displayed, there is a blank for an additional comment. <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing. When the get_maximum_score() function is called it takes care of the weight of the question. It multiplies the weight to the score and adds it to the final score. <code>. All the email code has been shifted to the mailers. Comments have been removed. <image> Auto selected Reviewing. response_helper.rb contains helper methods that display the questionnaires and rearrange questions so that the most frequently answered questions are at the bottom while the less frequently answered questions are at the top. Method is no longer being used in Expertiza and has been removed. Method is no longer being used in Expertiza and has been removed. <image> Auto selected Reviewing.", ["Very good job of describing the changes made to the code.", "It would have been better if they had included the code for the get_maximum_score() function, but they didn't.", "The code for that function has been removed.", "Also, it would be better if The code for that function was shown in the view, but The code for that function is not."], [0.0, 0.0, 0.0, 1.0]], "12": ["According to the existing code workflow, the assignment of topics to teams are based on FCFS (first come first serve) basis, where a team which first signs up for a topic gets the topic while other teams are waitlisted on the same topic. Factors such as team size are not considered which are important while assigning a topic to the team and potentially can reduce many issues faced by the current system. 1. One student can sign up only for a single topic. In cases where many topics are available, a student is forced to choose a single topic among many available topics which can be a difficult task. 3. If all the teams choose a handful of topics among many topics, it would also result in unnecessary additions in the waitlist queue for those few topics resulting in a situation where all the topics are not uniformly distributed among all the teams 4. Before, signing up, if more than one student forms a team and if each student belonging to the same team tries to sign up for different topics, than those topics are allotted to individual students resulting in a situation where a team can hold more than one topic. The algorithm works by considering every team as strength of 1, representing the student in the team. After sign up the topic would be allotted to the team based on a lottery system where a team is randomly selected for every topic. the intelligent assignment of teams. This approach is based on two important factors: 1. Team strength 2. Priority order of the topics submitted by the team. An added advantage of this approach is that, unlike the previous system, the intelligent team assignment system allows each team to bid for multiple topics which increases the chance of every team getting at least one topic that they placed their bid on. Each team can place their bids in priority order, the priority of the bids are also considered while assigning topics to the teams. For example: If TeamA is up to its maximum strength and bids for Topic1 , Topic2 , Topic3 where Topic1 has the maximum priority then TeamA has larger chance of being assigned Topic1 , but if Topic1 is already assigned (to a different team which had equal probability of getting the same topic based on team strength and bid priority) then Topic2 would be considered for assignment followed by Topic3 . Thus the priority mentioned by each team is also an important factor for assigning topics to teams. 1. Initially, every student is a team of 1 member. Before the sign up process takes place, students can merge their teams to form a larger team. 2. It is preferred that the number of members in the team should be as close as maximum strength allowed for each team to increase the chance of winning a topic. 1. Every team is allowed x bids that they can use during the sign up process to select the topics of their choice. [The value of x is decided by the instructor using class strength, number of topics created for an assignment and maximum team strength allowed for that assignment.] 2. During the sign up process, the team can place x bids on x topics of their choice in a priority order. 1. As each team can place their bids on the available topics based on topic priority. Hence every team gets to choose more than one topic of their choice. 2. The teams are assigned topics based on modified <link> <ref> <link> </ref> algorithm which considers factors such as team size and priority ensuring that the topics are no longer assigned based on FCFS basis. This approach addresses the most important issue where a topic is not assigned to the team just because the team was late to sign up for the topic as compared to the other teams. This flow chart illustrates the \"modified stable matching\" algorithm used to assign topics to teams based on the strength of the teams(bidder) and the priority in which they bid for the topic. This algorithm takes two parameters as input 1. A list of teams which are un-assigned any topic 2. A hash of team and topics which were assigned Algorithm 1. Sort the list of teams in descending order of team size 2. For each team a.Get the team_size and topics that the team placed their bid on b.Arrange the topics according to the priority order mentioned by the team i. For each of the topic, check which team is assigned this topic and store its team strength in assigned_team_size ii. If the team which is assigned this topic is not up to maximum strength and if the ( team_size + assigned_team_size <= max_strength allowed for each team) then assign this team the topic. They can associate each bid with a priority. This would in turn start assigning teams with topics based on their bid preferences. The table bid is supposed to store all the bids on the topics with their priority. Current requirement is to have only one bid per topic by an owner. When the instructor starts the intelligent assignment of topics to teams, IntelligentAssignmentController triggers the assignment algorithm. The students interact with AssignmentTopicView which lists down all the topics for the assignment and allows students to bid for topics with priority.", ["Very good description of the changes made to the code.", "It would have been helpful to have more detail on the code changes.", "Also, it would be helpful to show how the code is organized.", "The code snippets are too long.", "The code snippets should be separated into sections.", "For example of that The code snippets should be separated into sections : in The code snippets, The code snippets should show the order in which the topics are assigned.", "that For example, in The code snippets, The code snippets should show the order in which the topics are assigned is not done."], [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]], "13": ["Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.1.7. <link>. <link> is an open source project based on the <link> framework. Expertiza provides a platform for instructors to create assignments and for students to set up teams to facilitate early communication and teamwork in these assignments. Expertiza also provides an environment where students can peer review other students, allowing these users to view feedback on their assignments in a timely manner. Expertiza supports submission across various document types, including the URLs and wiki pages. The following items were improved in the refactoring of the given file: 1. Long blocks of code converted into separate methods 2. Ambiguous variable names changed to meaningful variable names 3. Macros added to replace hard-coded values 4. Code clarity 5. Test Coverage. The Review Mapping Controller handles mapping a given group's assignment submission to students working in other groups for peer review. The controller handles items associated with routing submissions to reviewers, handling permissions for instructor review calibration, and controlling drafts or uncompleted reviews. Included in this controller is the ability for the instructor to specify the number of required reviews per student or the number of reviewers per team in order to have group submission automatically sent to all students' review queues. in automatic_review_mapping method, the following bits of code were added to separate methods: <code> The above was moved into the team_assignment method that assigns users to a new team. <code> Again, the above is a unnecessarily large 'if' block that could be moved to another method, one that was named validate_review_selection The following is the final block of code moved to another method from automatic_review_mapping: <code> This block was moved to the maps_strategies_for_artifacts method. Next, the assign_reviewers_for_team method was evaluated for refactor. The following blocks of code were found that seemed to go past simply what the name of the method entailed, so they were moved to other methods: <code> The above performs its own standalone operation, it's not needed in an already long method that has its own priorities. As such, it was moved to generate_insufficient_review_collection. <code> The above creates a new hash table and performs standalone operations on it, and it is used nowhere else in the assign_reviewers_for_team method. It was moved to generate_teams_hash. <code> Although the above could stay as-is in assign_reviewers_for_team, there already seems to be too much functionality in this method, which is why it was moved to insufficient_assign_reviewers. There are existing RSpec tests (spec\\controllers\\review_mapping_controller_spec.rb) for the given file; we were tasked with ensuring that our changes did not break any of the existing tests, thus retaining the previous code's functionality. For the commit associated with our final submission, all existing tests pass according to travis-ci. 1. <link> 2. <link> 3. <link>.", ["This is a good description of the changes made to the code.", "The code changes are described well, and The code changes are described in detail.", "The code changes would have been helpful to show how the code was refactored.", "Also, the code would be helpful to describe the changes to the test plan."], [0.0, 0.0, 1.0, 1.0]], "14": ["The Expertiza project is system for using peer review to create reusable learning objects. Students do different assignments; then peer review selects the best work in each category, and assembles it to create a single unit.<ref> <link> </ref>. Used on the admin side of Expertiza for creating/ editing questionnaires (rubrics, surveys and quizzes). It helps in add/removing questions, options, etc for a questionnaire. Very big controller that handles a lot more than the name suggests. Functionalities need to be moved to appropriate controllers. Quiz methods are should be treated the same as any other type of questionnaire; differences between quiz questionnaires and other questionnaires should be implemented in the model class, quiz_questionnaire Turn the questionnaire into a ‚Äúform object.‚Äù The ..._questions methods: save_new_questions, delete_questions, save_questions should be in a separate class. Other classes involved: questionnaire.rb quiz_questionnaire.rb questions_controller.rb What needs to be done: Move quiz related functions to quiz_questionnaire.rb . copy, update_quiz, valid_quiz methods, clone_questionnaire_details is too long. Debug output (print statements) should be removed. Understand the functions in the controller and comment them. Ensure that the code is understandable to the next programmer who works on it. What We Have Done Method Refactoring <table> Format Refactoring Case 1: Loop Condition Change all the looping conditions into one format Before <code> After <code> Case 2: If Condition Change all the if conditions into ruby format Before <code> After <code> Case 3: Name Change all the name from \"JAVA name\" to \"Ruby name\" Before <code> After <code> Refactoring Example In models/questionnaires.rb , we add copy_questionnaires method, as shown below: <code> References <references/>. <table>. Change all the looping conditions into one format Before <code> After <code>. Change all the if conditions into ruby format Before <code> After <code>. Change all the name from \"JAVA name\" to \"Ruby name\" Before <code> After <code>. In models/questionnaires.rb , we add copy_questionnaires method, as shown below: <code>. <references/>.", ["Very good description of what was done.", "Good description of the changes made.", "It would have been helpful to have a more detailed description of how the code was changed.", "Also, it would be helpful to show the changes to the code, rather than just refer to rather in the code."], [1.0, 0.0, 1.0, 1.0]], "15": ["In this project, we have unit tested various methods in SignUpSheetController.rb and SignUpSheet.rb as well as refactoring these methods. We first wrote unit tests to ensure we had adequate coverage for our methods. Then, we refactored our methods with confidence found from our unit tests. We found that directly testing the functions that we refactored provided better assurances that our refactorings were correct rather than manual testing the user interface. For our unit testing, we used the RSpec framework. We choose this framework since legacy tests of our methods were implemented with RSpec<ref> <link> </ref> . We also utilized the RSpec-Mocks<ref> <link> </ref> to test functions related to the database without having to use fixtures. We wrote multiple controller tests and model tests for corresponding functions so as to test various scenarios and get 100% test coverage. We sought to obtain this high level of coverage to make refactoring more precise. We believe that highly tested code is resilient errors that could occur when refactoring. Before we started working on Expertiza<ref> <link> </ref>, running RSpec on the codebase resulted in 992 / 4184 lines of code (23.71%) covered. After our work, running RSpec on the codebase resulted in 1144 / 4278 lines of code (26.74%) covered. E.g. If you run the test in spec/controllers/sign_up_sheet_spec.rb by command \"rspec spec/controllers/sign_up_sheet_spec.rb\", then you can see the 100% line coverage for controller method save_topic_deadlines() in sign_up_sheet_controller.rb. For checking the coverage, open the index.html page coverage folder and go to respective controller. Similar, run the tests in Model and Controllers folder to see 100% test coverage for following functions. 1. Create() in SignUpSheetController 2. self.add_signup_topic() in SignUpSheet 3. save_topic_deadlines() in SignUpSheetController 4. self.confirmTopic() in SignUpSheet. We performed various refactorings on our code to increase the codes readability and remove redundancy. We extracted variable from complicated statements to increase the readability of the code. In the code base we were working with, there were a variety of lines of code that were more than 80 characters long. These lines of code were hard to read. So, we split them up into multiple lines of code by extracting statements found in function calls into their own variable. Example: <code> Became: <code>. We attempted to enforce good Ruby conventions while refactoring the code<ref> <link> </ref>. This entails doing things like correcting the formatting of the code to make it more readable. In addition to this, we converted a variety of iterators to follow good ruby conventions. For example, sign_up_sheet.rb had the function self.add_sign_up_topic(assignment_id) which contained an iteration through a set of topics while manually maintaining an index variable. Manually maintaining the index variable can be problematic for future maintenance. <code> We replaced these with the Ruby each_with_index iterator. This allows us to pass the responsibility of maintaining the count of the index to the iterator. <code> We replaced \"=>\" while passing parameter by colon (:) So that <code> became <code>. We have refactored the methods which were doing a lot of things into two or more methods so as to segregate the functionality and following the basic principal that one method should do only one thing. Also, this helped in making the methods more readable and easy to understand. E.g. In sign_up_sheet.rb Model, \"def sign_up_wailisted()\" is the new method extracted from original method self.confirmTopic(). There are many more such examples which are done as part of refactoring. 1. Clone the repo <code> 2. Change current directory to cloned repository 3. Run Command: <code> <code> 4. Check coverage: Open overage/index.html in browser and check line coverage for following methods 1.1. Create() in sign_up_sheet_controller.rb in Controllers 1.2. self.add_signup_topic() in sign_up_sheet.rb Models 1.3. save_topic_deadlines() in sign_up_sheet_controller.rb in Controllers 1.4. self.confirmTopic() in sign_up_sheet.rb in Models. We were not able to recreate the problem found in issue 580. After multiple attempts of trying to recreate the bug we began to examine the source code. We believe that someone else has already fixed the bug before we started working on the project. <references></references>.", ["This is a good description of what was done, but This could have been improved with more detail.", "This would have been helpful to show the code snippets that have been changed.", "For example of that This would have been helpful to show the code snippets that have been changed : in the code base, there were a lot of lines of code that were more than 80 characters long.", "This is not a very readable description of the changes made."], [1.0, 1.0, 0.0, 1.0]], "16": ["This page provides a description of the Expertiza based OSS project for Fall 2017. Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.4. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.6. <link> 1.1.7. <link>. <link> is an open source project. It is based on <link> framework. Expertiza is a web application which allows instructors to create new assignments, list of topics which students can sign up for. Students can also form teams for various assignments and projects. The following tasks were required to be completed in this project: 1. Issue #80: Add past-due assignments to task list. 2. Highlight with specific colors current and next due dates. 1. Past Due assignments are not present in the task list. If a student is a participant of an assignment and has not submitted the assignment before the assignment due date/deadline, then the assignment is considered as a past due/overdue assignment for that student. These past due assignments are not present in the task list and we have added this functionality to the existing system. 1. Highlighting next due dates. Different To do tasks in the task list with different due dates are highlighted with different shades of red color. An assignment that has to be submitted earlier has a redder color than assignments that have later due dates. 1. The function overdue_tasks? is added in the model student_task.rb file to fetch those tasks with current stage set as finished and which were not started by the student. <code> 1. In the list.html.erb file we used the tasks not started section as a template to construct the past due assignments section. <code> 1. The past due assignments variable from the controller contains the list of past due assignments as its contents which are looped through with a do each loop. The participant, stage and topic_id are used to obtain the due date of the assignment. Then the assignment name and its deadline are displayed. <code> 1. To highlight with specific colors current and next due dates we made several changes to the currently existing list.html.erb file. <code> The rgb() style color attribute is used to set the color of a html tag. A variable r is used to set the red color parameter in rgb function. Initially it is set to 255 which is the Darkest shade of red that is possible. Then a variable step is used to determine by what value the r variable must decrease to lessen the intensity of the red color. The size of the task list is used to initialize the step value. An if condition is used to make sure that step is initialized only when there are tasks to be completed. The task list before and after the changes are shown below. <image>. <image> The student in the example above is a participant in 6 current assignments that are displayed in the task not yet started section of the task list. Each of those is highlighted with colours as described. The student has failed to submit 6 other assignments before their respective due dates and they appear in the past-due assignments section of the task list. Following are a few test cases with respect to our code changes that can be tried from UI: 1. Login as student and check if past due assignments section is present on the task list. 2. If no such section is present, the student does not have any past due assignments. 3. Log in as an instructor and create a new assignment. 4. Set the deadline for the assignment to a date and time few minutes from the current date and time. 5. Assign the student being tested as a participant to the created assignment. 6. Login as the student and check the task list after the due date for the assignment has passed. 7. The new assignment will be in the Past Due assignment section. To check if the Tasks not yet started section has assignments highlighted with colours: 1. Login as a student and check if there are any assignments in tasks not started section. 2. If no assignments are present, the student is not involved with any current assignments. 3. Log in as an instructor and add the student as a participant to few assignments. 4. Log in as the student and now see that the assignments in tasks not yet started section are highlighted with colours as described in the wiki. Edge Cases The edge case for when there are no past due assignments for a student has been handled. In this case, no past due assignments are displayed. The edge case for when there is only one assignment in the tasks not yet started section has been handled. In this case, the assignment is highlighted with a dark red colour. 1. <link> 2. <link>.", ["This is a very good description of the changes that were made.", "The design doc is very readable.", "The design doc describes the changes well.", "However, The design doc does not explain how the changes were implemented.", "For example of that However, The design doc does not explain how the changes were implemented : the past-due assignments section is not shown.", "This is not explained in any detail."], [1.0, 1.0, 1.0, 1.0, 0.0, 1.0]], "17": ["This means that refactoring projects, testing projects, and Mozilla projects need to use the same rubric. The feature concluded with allowing 4 rubric scenarios for an assignment: 1. Rubric does not vary by round or by topic. 2. Rubric varies by round, but not by topic. 3. Rubric varies by topic, but not by round. 4. Rubric varies by both round and topic. Our proposed solution keeps the previous implementation, but changes rubric filtering to allow instructors/TAs to use filters that are not theirs. Following the <link> footsteps, this diagram depicts the interactions between an instructor and an assignment. Alongside editing topics and due dates, the instructor can edit what rubrics are assigned to an assignment. The topics tab allows instructors to specify which rubric associates with each topic while the rubrics tab lets the instructor determine if the assignment will vary by topic or not. <image>. Now find questionnaire by assignment questionnaire and type rather than assignment/type/round_number/topic_id. 1.3. assignment_participant.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.4. feedback_response_map.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.5. on_the_fly_calc.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.6. self_review_response_map.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.7. tag_prompt_deployment.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1. Views 1.1. edit/_rubrics.html.erb : Modify to set assignment vary by round/topic fields instead of non persisted flags 1. Helpers 1.1. assignment_helper.rb : Refactor by moving function to find questionnaire / assignment questionnaire to assignment_form.rb. 1.2. grades_helper.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.3. summary_helper.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1. DB Migrate 1.1. XXXXXXXXX_add_vary_by_topic_to_assignments.rb : Migration to add ‚Äúvary by topic‚Äù field to assignment 1.2. XXXXXXXXX_add_vary_by_round_to_assignments.rb : Migration to add ‚Äúvary by round‚Äù field to assignment 1. All of the related test files to accommodate the above changes. <image> In addition to that, we will be adding two additional boolean fields to the assignment schema: vary_by_round and vary_by_topic . As discussed earlier, in the previous implementation, these were methods that were called to determine if an assignment varied by round/topic rather than a persisted value. It would always query for the AQs by assignment id, current round number, and current topic id. However, if the assignment did not have reviews that vary by round or topic, these values would be nil on the AQ, and the previous query would fail. This means that: 1. If an assignment does not vary by round or by topic, the query for AQs will be by assignment id only. 2. If the assignment varies by round but not topic, the query for AQs will be by assignment id and round number. <image>. Here we describe manual UI Testing steps to edit an existing assignment to allow it have to specialized rubrics for different topic types. 1. Login to Expertiza using instructor account (For testing, username: instructor6 , password: password ) 2. Click on Manage > Assignments 3. Click on Edit option for any assignment, you should get following view. <image> 1. Click on Rubrics tab. You will see 2 checkboxes ( Review rubric varies by round? , Review rubric varies by topic? ) 2. Check the box for Review rubric varies by topic? 3. Go to Topics tab and verify that there is dropdown menu beside each Topic. 4. Select a rubric from dropdown menu, and click Save <image> 1. Go back to Home, and select the same assignment to edit. When you click on Topics tab, you should see the rubric you had selected. 1. This was due to how questionnaires were retrieved/found for an assignment. Staggered deadlines also rely on finding questionnaires using topic id, which isn't handled until after an assignment is made. 1. Unresolved Another quality of life improvement is that staggered deadlines and topics cannot be added to an assignment until after the assignment has been created and saved.", ["This is a very good description of the changes made to the code.", "This would have been helpful to have a more detailed description of what was changed, and how This was done.", "Also, it would be helpful to show the changes to the test plan, rather than just the code changes.", "that Also, it would be helpful to show the changes to the test plan, rather than just the code changes is not the first time I've seen this, but this's a good description."], [1.0, 1.0, 1.0, 1.0]], "18": ["This page provides a description of the Expertiza based OSS project Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.1.1.5. <link> 1.1.1.6. <link> 1.1.1.7. <link> 1.1.1.8. <link> 1.1.1.9. <link> 1.1.1.10. <link> 1.1.7. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.8. <link>. These problems are as follows: 1. Unsafe reflection method const_get called with parameter value 2. Hardwired variables in add_new_questions and save_new_questions 3. Unnecessary checks for QuizQuestionnaire, checks can be removed 4. Use guard clause to enclose methods instead of conditional 5. Removed unnecessary method 'create_questionnaire' 6. Break up create method into new 'create_questionnaire' 7. Use each_key instead of keys.each 8. Split lines of code to fit within recommended 160 character length 9. Removed useless assignment of variable in save method 10. Resolved issues involving use of unsafe reflection. Problem Method(s) save_new_questions, delete, and save_questions used conditional to wrap code instead of guard clause. Using guard clause can reduce complexity and number of lines in code. Solution For example, we go from: <code> To: <code>. Problem Method(s) create and save_new_questions have unnecessary checks for if question type is QuizQuestionnaire. Solution We removed the check in both methods. We go from: <code> To: <code>. Problem Method(s) save_new_questions and add_new_questions used hardwired variables. We go from: <code> To our code which incorporates constants. <code> With our constants at the top of the code for easy accessibility: <code>. Problem Unsafe reflection method const_get called with parameter value Solution Remove the unsafe reflection through using a variable that checks for null values. We go from: <code> To: <code>. Problem Method create_questionnaire, had no apparent calls to it. We remove the method to make the code dry. Solution For example, we remove: <code>. Problem The create method itself was 49 lines long. Solution For example, we go from: <code> To: <code>. Problem The existing code uses keys.each to iterate through the hash. Solution For example, we go from: <code> To: <code>. Problem Some of the lines of code exceed the recommended 160 characters per line. Solution For example, we go from: <code> To: <code>. Problem The existing code included assignments of variables that were not used throughout the file. In any case, we remove the variable keep the code dry. Solution For example, in the following method: <code> We remove the unnecessary variables and comments, resulting in the following method: <code>. In order to remove repetition and make the code dry, this do loop was refactored into its own method 'save_question_hash'. Solution For example, in the following method: <code> We refactor the do loop into its own method: <code>. However, in order to ensure the code edits didn't cause any previously crafted test to fail an RSpec test was ran before each commit. The command utilized to test the questionnaires controller is as follows: <code> However, if a VCL was utilized for development this following command was used instead. <code> In one case the create_questionnaire method was removed, thus in order to keep the set of tests clean the following test block was removed from the testing file: <code>. Test Log in Website url: <link> Log in: instructor6 Password: password Test Create questionnaire 1. After logging in click the Questionnaires tab. 4. Select Create Test edit/add questions: 5. Change dropbox of question type to TextArea, select Add \"1\" more. 6. Change dropbox of question type to Criterion, select Add \"2\" more. 7. Edit question content: \"Test question Textarea\", \"Test question Criterion1\", and \"Test question Criterion2\" in that order. Test Delete Questionnaire 18. Select Back. 1. Code Refactoring Best Practices <link> 2. Expertiza on Github <link> 3. Expertiza Project Fork <link> 4. Expertiza Website <link> 5. RSpec Documentation <link>.", ["This is a very good description of the changes that were made.", "The code is very readable.", "The code is easy to read, and the code snippets are well organized.", "However, it would have been helpful to have more description of what was changed.", "For example of that However, it would have been helpful to have more description of what was changed : in the create_questionnaire method, The code is too long, and The code should have been split into two parts.", "Also, the test plan is not very detailed. This is not the first time I've seen this."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "19": ["It allows the instructors to create new assignments and customize new or existing assignments. Each assignment should have its own unique auto-generated submission directory, which is named based on the assignment name entered by the teacher. In the current implementation of Expertiza, there are following issues need to be addressed: Issue #1: The directory name should be auto-generated from the assignment name. Issue #2: It should be done by changing spaces in the names to underscores. E.g., the directory for Program 1 is by default \"Program_1\". Issue #3: A check should be added to prevent two assignments in the same course from having the same name. Issue #4: Verify or add if not present - a check to stop two assignments from sharing the same directory. Issue #5: On changing name of an assignment while creating it, the code shouldn't throw a NoMethodError. Fix #1: Submission directory is successfully being generated after the assignment name is typed in. If needed, the submission directory can be changed, however any modifications to the assignment name will just auto-generate it to match. Fix #2: A check was added to ensure that assignments in the same course do not share the same name. When creating a course, if the assignment name is a duplicate, it will reset the entire form. Fix #3: A check was added to ensure that assignments in the same course do not share the same submission directory. When creating a course, if the submission directory is a duplicate, it will reset the entire form. Fix #4: These checks were also put in place when modifying an existent assignment. The controller, helper and spec were modified for this project: 1. Assignments Controller - assignments_controller.rb 2. Assignments View - _general.html.erb 3. Assignemnts Controller Spec - assignments_controller_spec.rb 4. Assignments Model - assignment.rb. This is a controller that helps instructors create, modify, copy new assignments. Each assignment can be associated with specific Rubrics, Review Strategy and Due dates. This the view for creating the new assignments and editing the existing assignments. Tests and bug fixes pertaining to assignments controller. The ruby code which defines how the assignment model functions. The project primarily deals with the AssignmentsController and AssignmentsView, and changes made are as follows: The directory name is auto-generated from the assignment name typed in by the instructor. This is achieved by replacing all spaces in the names with underscores, and removing all special characters like '/','\\','$', etc from the auto-generated submission directory name. If any two assignments of the same name under the same course are attempted to be created, it is prevented and an error message is displayed to the user stating the the submission directory name already exists. The odd case of a teacher editing the name of an already existing assignment to one that already exists is also handled. Expertiza will display a similar error message stating that the assignment couldn't be saved. Most changes were made in the assignments_controller.rb file. Checks were added to ensure that an existing assignment name or submission directory did not exist when creating a new assignment. If the assignment was not created due to an error, the code would render new which would cause the assignment to be created even though it did not pass all of the checks. The following function was added to app/views/assignments/edit/_general.html.erb , to generate submission directory names with underscores replacing spaces: <code> Changes were made to the create function in assignments_controller.rb , such that it only creates the assignment directory if the one with the same name doesn't already exist: Before <code> After <code> Changes were made to the update_feedback_assignment_form_attributes function in the same file to flash an error if an edited file has the same name: Before <code> After <code> The following validations were added to app/models/assignment.rb , without these validations the user was allowed to change the assignment name or submission directory to one that already exists. <code>. The following steps must be performed to test the project UI: Step 1: Log in as an Instructor, with Username - instructor6, Password - password <image> Step 2: Create a new assignment. In this case our assignment is called \"E2054 Test Assignment\", under course CSC 216 Fall 2009 <image> Step 3: To save the assignment, the Review and Author Feedback rubrics need to be filled in <image> Step 4: On completion, the assignment will be saved <image> Step 5: If another assignment of the same name under the same course is created, the following error is displayed <image> Step 6: On editing an already made assignment to match the same details as \"E2054 Test Assignment\" <image> We get the following error: <image>. The following RSpec tests were added to the assignments_contoller_spec.rb file <code> <link>.", ["This is a very good description of the changes made to the project.", "This describes the changes well, and explains how they were made.", "The only thing that needs to be changed is that the test plan should have been described in more detail.", "Also, the test plan would have been helpful to have a description of how the tests work, and how they are tested."], [1.0, 1.0, 1.0, 1.0]], "20": ["Expertiza allows the instructor to create new assignments and customize new or existing assignments. It also allows the instructor to create a list of topics the students can sign up for. Students can also peer review other students' submissions. The process is detailed below: 1. Steps to install Redis: <code> Run the redis-server using: <code> 1. Steps to install NodeJS on CentOS: <code> 1. Run the expertiza Rails server <code> 1. For logging in as an instructor:- Username: instructor6 Password: password 1. For logging in as an student:- Username: student17 Password: password. At present the calibration functionality is limited, the following points present the scenarios where the current implementation is lacking: 1. No support for varying rubric by round feature. 2. From the perspective of the student, lack of differentiation of review - whether its from an expert or otherwise. 3. A student is not notified once an expert submits a review. 4. Additionally, a student should be able to see how an expert rated his/her assignment - similar to how it's done in calibration results for calibrated assignments( As seen when Show Calibration Results is clicked. ). Tasks are broken down into sub-tasks as follows: 1. Refactoring: 1.1. a checkbox in the \"General\" Tab from ‚ÄúCalibrated peer-review for training?‚Äù to ‚ÄúAdd expert peer review?‚Äù 1.2. a tab name for instructor from ‚ÄúCalibration‚Äù to ‚ÄúExpert review‚Äù on the assignment setting page 1.3. partial file from ‚Äú_calibration.html.erb‚Äù to ‚Äú_expert_review.html.erb‚Äù 1.4. the link title on student side from ‚Äúshow calibration results‚Äù to ‚Äúshow expert peer-review results‚Äù 1.5. the file ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to ‚Äúresponse/show_expert_review_results_for_student.html.erb‚Äù 1.6. title in ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to start with ‚ÄúExpert review comparison report for‚Äù 2. Functionality changes 1.1. Vary-rubric-by-round - Currently, the functionality of calibration is limited. 1.2. Both TAs and instructors could do expert reviews - need to modify ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to make it support multiple expert reviews. This diagram shows the Assignment Setting page in the General tab. <image> This diagram shows the Assignment Setting page in the Calibration tab. <image> The following diagram shows the flow of control in case of peer reviews. <image>. <image>. Hence, we will also be writing test cases for the new functionality - added as a result of this project. We would also need to add additional fixtures in spec/feature to be used in the testcases. There are three main actors that interact with the new functionality, these are: 1. Instructors 2. Teaching Assistants 3. Students Hence, we would have to write tests for each of these types of users and test the expert review functionality. Some of the tests that we have in mind as of now, are as follows: 1. Instructor 1.1. Login as instructor using pre-configured credential. 1.2. Go to \"General\" tab 1.1.1. Verify \"Add expert peer review?\" present instead of \"Calibrated peer-review for training?\" 1.3. Verify whether the instructor can see \"Expert Review\" on the assignment setting page. 1.4. Perform Expert Review, based on values declared in Fixtures available to Instructor. 1. Teaching Assistant 1.1. Login as TA using pre-configured credential. 1.2. Go to \"General\" tab 1.1.1. Verify \"Add expert peer review?\" present instead of \"Calibrated peer-review for training?\" 1.3. Verify whether the TA can see \"Expert Review\" on the assignment setting page. 1.4. Perform Expert Review, based on values declared in Fixtures available to TA. 1. Student 1.1. Log in as Student using pre-configured credential. 1.2. Verify if student can see \"Show expert peer-review results\" 1.1.1. When a new expert-review is available. 1.1.2. Show nothing when nothing is available. 1.3. Testing to check if the reviews show up. 1.1.1. If added by TA. 1.1.2. If added by instructor. 1.1.3. If multiple reviews from either TA or instructor show up as a list.", ["Very good description of the changes made.", "The design doc is very readable.", "The design doc includes screenshots of the code changes, but does not explain how they are implemented.", "Also, The design doc does not describe how the tests are tested.", "This is a good thing, as it would have been helpful to explain the tests."], [1.0, 1.0, 1.0, 0.0, 1.0]], "21": ["2. A confirmation email is sent to a user of the system when they reset their Expertiza account password. In this project we have first identified all the set of scenarios where the user of the system will get an email. We have implemented tests for the following scenarios: There are various ways to create a new user account in Expertiza. Irrespective of the user creation method, the newly added user should get notified via email when his account is created in the system. This email states the username and a randomized password to allow the user to login for the first time. Below given are the ways to create new user to system. 1. By filling a user creation form An instructor can add a new user to the system by filling up a user creation form 1. By importing a CSV file The instructor can add new users to the system by importing a CSV file with user information <image> 1. By importing a CSV file to add participants to an assignment Instructor can add participants to an assignment by importing the users from a CSV. If the user listed in the CSV does not already exist in the system, then the a new user account is created and the user is added to the assignment. <image> 1. User requests an account A user can request an account by filling up a form with his details. If the superadmin approves a request, a new user account is created in the system and the user receives an account creation email notification <image>. The following features were checked for all cases as part of the email functionality when a new user is created 1. Mail delivery count increased by 1 after the mail triggered by the scenario is sent 2. Sender email-id is verified. 4. The subject is checked to be equal to 'Your Expertiza account and password has been created' We considered the following cases while testing specific to the scenario where user requests an account: 1. No email should be sent if new account requested with invalid email address 2. Super admin should receive email about new account request with a valid email address 3. Email notification should be sent to requester when super admin approves account creation request 4. No email notification should be sent to requester when super admin rejects account creation request. We used Capybara to model the scenario as follows: 1. Create user through instructor filling up the form: Admin user is created using factory class. 1. User requests a new account and account is created upon approval from superadmin Super admin is created using factory class. 1. User creation by instructor: Instructor creates new user by filling sign-up form <image> 1. User creation by user request Email count should be zero when user requests new account with an invalid email <image> Email count should be one when user requests new account with a valid email <image> 1. User creation by importing csv files Import CSV to add participants to assignment <image> Import CSV from manage users <image>. When the user tries to login, and the password entered is wrong, the user is redirected to reset password page. <image> Here the email-id entered is searched through the database, If such user account is found: url for reset is generated, with random token set as password is sent to the user. Flowchart: <image>. 1. User enters email id which is not associated with any account 1. No e-mail should be sent 1. User enters email id that's present in the user database The following features were checked inside 'it blocks' as part of verifying email functionality 1. Mail delivery count increased by 1 after the mail triggered by the scenario is sent 2. The sender mail-id is verified to be 'expertiza.development@gmail.com' 3. Receiver email id is checked to be equal to 'expertiza.development@gmail.com' . If the email id is not associated with any existing account, then email count will be zero <image> If the email id is associated with an existing account, then email count will be one <image>. However, if an account is created by adding them as participants to an assignment when they don't already have an account, e-mail notification is not being sent. The issue here was that an already existing user in the system will not get added as a participant on the assignment. Now that we have enabled the email functionality irrespective of where a new user is created from, we don't need to explicitly call the mailer from each location where new user is created. The email body was inconsistent across different scenarios. If the user does not exist in the system, new user account (if there is sufficient information about the user to create a new Expertiza account) is created If the user already exists as a participant on the assignment, do nothing Add the user to the assignment as a participant; otherwise. This way, the user(whether newly created or already an Expertiza user) gets added on the assignment as a participant. Also, the instructor should receive an email about the same. This method calls the email function to notify the reviewee <image>. <image> <image>.", ["Very good job of describing the changes made to the code.", "the code is well organized, and the code snippets are well organized.", "the code would have been helpful to have a more detailed description of the changes that were made.", "For example, the email-id entered is searched through the database, but the email id is not associated with any existing account."], [1.0, 1.0, 1.0, 0.0]], "22": ["<link> is an <link> <link> application which is used by instructors and students for creating assignments and submitting peer reviews. Expertiza allows the instructor to create and customize assignments, create a list of topics the students can sign up for, have students work on teams and then review each other's assignments at the end. The Source code of the application can be cloned from <link> . Files involved: popUpController.rb participantsController.rb What they do PopUpController displays a review when a user (instructor or student) clicks on a list of reviews. ParticipantsController handles participants in an assignment. What's wrong with them: PopUpController contains only two prominent methods, but they are very big. ParticipantsController contains redundant code. What needs to be done: 1 popUpController.rb 1.1 Action_allowed method always returns true. It needs to be fixed. 1.2 Team_user_popup method needs refactoring. @teamId is assigned but never used. Add comments to make code more readable. Rename variables based on their usage 1.3 Refactor Participants_popup and team_users_popup methods into smaller private methods. 2 participantsController.rb 2.1 In add and update_authorization methods, permissions collection object can be used to reference its elements without assigning each element to individual private variables. 2.2 Inherit and bequeath_all methods are similar. Common statements can be migrated to private method. Add comments in code to make it easy to understand. 2.3 Cluster all the flash messages under one private method to make the code more manageable 2.4 Fix email_sent method. It contains a dummy email address. Modified Action_allowed method to return true only if... <table>. Local variables like can_submit, can_review, etc removed and permissions object referenced directly <table>. Moved common functionality of Inherit and bequeath_all to private method populate_copied_participants <table>. <table>. <table>. Login as a instructor \"instructor6/password\". Click on Assignments -> review report -> and on a team. <references/>.", ["This is a very good writeup. This describes the changes well.", "The code changes are described well, but the code is not described well enough.", "There are a lot of screenshots, but no screenshots of the code changes.", "This is a good start."], [1.0, 1.0, 0.0, 1.0]], "23": ["<link> is a software development process that relies on the repetition of a very short development cycle, requirements are turned into very specific <link> , then the software is improved to pass the new test cases only. The TDD sequence can be can be summarized in following steps: 1. Add a Test 2. Run all tests and see if the new test fails 3. Write the code 4. Run tests 5. Refactor code 6. Repeat Advantages of using TDD: 1. Narrowing Problem Focus 2. Tidier Code 3. Not worrying about dependencies 4. Easier refactoring 5. Better Test coverage and fewer bugs. <link> is a software testing method by which individual units of source code are tested to catch errors early in the development process. For a model it involves testing the interface and on how it responds to commands and queries from outside. Model testing is bounded to the functionality of only the model under test and doesn't test how its collaborating models get affected based on this query. Unit Testing provides several benefits which can be summarized in the below points. 1. Finds problems early: Unit testing finds problems early in the development cycle. In test-driven development (TDD), which is frequently used in both extreme programming and scrum, unit tests are created before the code itself is written. When the tests pass, that code is considered complete. 2. Facilitates change: Unit testing allows the programmer to refactor code or upgrade system libraries at a later date, and make sure the module still works correctly (e.g., in regression testing). Unit tests detect changes which may break a design contract. 3. Simplifies Integration: Unit testing may reduce uncertainty in the units themselves and can be used in a bottom-up testing style approach. By testing the parts of a program first and then testing the sum of its parts, integration testing becomes much easier. 4. Documentation: Developers looking to learn what functionality is provided by a unit, and how to use it, can look at the unit tests to gain a basic understanding of the unit's interface's API. 5. Design: When software is developed using a test-driven approach, the combination of writing the unit test to specify the interface plus the refactoring activities performed after the test is passing, may take the place of formal design. Each unit test can be seen as a design element specifying classes, methods, and observable behavior. The goal of the project is to test the Menu.rb, i.e. the Menu model by writing unit tests, which are written using <link> . The unit tests are to be written such that the path coverage of menu.rb is greater than 90% and achieve the highest possible branch coverage. The goal is to test the menu model file. 4. Creating dummy entries for testing different functionalities. 5. Writing testing conditions for different functions and cross-checking with the expected outputs. Menu is a model which gives the functionality to the top menu bar in the Expertiza website. It links the menu items associated with each tab in the menu using a tree. The following Menu is displayed for the Student role : <image>. Mock/dummy objects are needed to be created for any unit testing criteria. These objects are loaded newly and deleted after every testing condition. Several methods exist for creating such objects, whose parameters need to be designed to satisfy the conditions under test. We have used factories and created the mock objects that we need to execute the tests. Menu model require several other mock objects to be created namely Node(this is a subclass in the menu class), menu_item, site_controller, controller_action,etc. A total of 21 testing conditions were required to be performed for testing all the functions in menu model file. The conditions that needed to be tested are as below: Node class 1. initialize <code> 2. setup <code> <code> <code> 3. site_controller <code> 4. controller_action <code> <code> 5. content_page <code> 6. add_child <code> Menu class 1. initialize <code> <code> <code> 2. select <code> <code> 3. get_item <code> 4. get_menu <code> 5. selected <code> 6. selected? <code> <code> 7. crumbs <code>. A screenshot of the tests passing is shown here: <image>. <image> <link>. After writing the test cases we used SimpleCov to measure the C0 coverage of our rails application. After running rake spec to run the test cases, SimpleCov creates a directory called coverage in our rails application folder. These are the learning outcomes after performing this project: 1. Writing tests using the Test Driven Development approach. 2. Writing unit tests for models and controllers in RSpec. In our case, before writing the test cases for the menu.rb we had the understand how different models interacted with each other and how each action by different users would make changes in the database schema. 1. <link> 2. <link> 3. <link> 4. <link>.", ["This is a very good description of what was done.", "This explains the benefits of unit testing, and how This is used.", "But This does not explain how the tests are tested.", "the tests are not described in any detail.", "the tests are just described as tests.", "This is a good description, but that the tests are just described as tests could have been better."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "24": ["Expertiza allows the instructor to create new assignments as well as edit new or existing assignments. This issue is not a bug but an additional feature to the existing import topic functionality. Issue 329 : When importing teams there are different options to handle conflicting team names Issue 328 : When importing teams, and a conflict exists there is an option to merge the two teams by inserting the new members into an existing team. we tried to import a team and selected 'Insert any new members into existing team'. No new team members were in fact inserted into the team. <code> <code>. Problem : When importing teams, and a conflict exists there is an option to merge the two teams by inserting the new members into an existing team. Solution : This was an issue to fix the functionality of Insert any new members into existing team. Problem : When importing teams there are different options to handle conflicting team names as shown in the screenshot below. We‚Äôd like to add another option to rename EXISTING team when a conflict exist. Solution : This was a request to add an option to rename existing team if there was a conflict in the team name. New code introduced was as follows: In start.html.erb In this file, the new option as displayed to the user is added <code> In team.rb In this file, the handling of the new tag \"rename_existing\" is added wherein, the old team is updated with a new name. Solution : We have modified the existing implementation for import topics to assign the teams to the topics. We have changed the files to handle another column where the teams have been assigned to topics. The column is optional because there might be topics that have not yet been assigned to any teams Expectations from the import file: 1. Assigned team name should exist in the system, otherwise the import will fail. Instructor has to make sure that the teams which are assigned in the import file should exist with same names in the system or database. 2. Instructor also need to ensure that the topic for which the team is being assigned should not be full or can accommodate new team assignment to the respective topic. We are just adding another column so the best way is to extend the existing select tag with a new option for the teams assigned. All the select tags has been changed with an additional option \"Assigned Team\". <code> model/sign_up_topic.rb The existing import function in the model import the topics to the topic table. As per the requirement and validations, topic should be imported first and then only the team can be assigned to the topic. So the existing import method has been modified to assign the team once the topic is imported in the database table. As per the edge case mentioned in the requirement document that few topics may not have any team assigned to it, so we first check if topic has any team assigned, then only it tries to map the topic with the team. <code> Changes in the application with new implementation An option column checkbox (Teams Assigned) has been added to the UI <image> A new column Assigned Team is added where the columns are being mapped. As our additional functionality is to have another column to assign team to the topic. We have to have the import test case and the assigned team change could be applied to the same test case. We use it to check if the older team gets the new name and the new team gets the requested name. 5. Click on Topic Description checkbox and import the following file. 7. Import topics. 2. Select Manage >Assignments > Edit Assignment > Topics 3. Scroll down to the screen and click on import topics 4. Upload a file with the topic details and a team assigned to topic 5. Check the Teams Assigned optional column 6. Click on import and map the columns in the mapping page 6. After submitting, team will be assigned to appropriate topic [Problem 3 (329)] 1. Login to Expertiza using username: instructor6 & password: password. 2. Select Manage > Courses or Assignments > Add Teams button > Import Team 3. In the screen that loads, select \"rename the existing team and import\" in the handle conflicts section. 4. Upload a file with the team details and select the appropriate delimiter. 5. Click on Create 6. Verify that the new team got created with the assigned name and the older team's name got changed. 2. Select Manage > Courses or Assignments > Add Teams button > Import Team 3. In the screen that loads, select \"Insert any new members into existing team\" in the handle conflicts section. 4. Upload a file with the team details and select the appropriate delimiter. 5. Click on Create 6. Verify that the existing team got updated with the new team members. Also, if there's no team in the system and instructor has used it in the import file so a new pop up can be displayed where the new team can be created or the import can be extended to create teams while assigning the topic.", ["This is a good description of the changes made to the code.", "It is not clear what the changes are to be made.", "The code changes are described very well.", "The code changes are described in a readable way.", "I would have liked to see a screenshot of the code changes.", "Also, I would like to see the test plan, which would explain how the code is implemented."], [1.0, 0.0, 1.0, 1.0, 1.0, 0.0]], "25": ["Students can also review their teammates, making use of the teammate review questionnaire, based on their contribution to the projects. When we use these questionnaires for reviews, for example the teammate review assessment we encounter a few problems. We add in a new Question type ‚ÄòCake‚Äô, which will be extended from the Scored Question model [cake < scored question < choice question < question]. Potential ways of displaying the Cake question on the UI: 1. Stars: Existing design for teammate reviews uses stars to symbolize the contribution provided by each student. We can implement the cake type using the same. The questionnaire for reviewing teammates includes the question asking the cake (contribution) factor. Ideally, the cake should include the reviewer himself as well. But after considering code that also involves teammate reviews, what we have observed is that every assignment has the option to render reports to the instructor - showcasing different types of reports such as Review Reports, Teammate Review Reports, Self Review Reports, Answer Tagging reports. If the existing self-review feature were to be implemented, the view for the Self Review reports would also contain self-teammate reviews, which would cause inconsistencies in rendering Self Review Reports, and does not help serve the purpose of a legible report. Consider Student8529, who has reviewed himself and his teammate Student8663. With the design approach taken for this project, when Student8529 reviews himself, the review would appear under the Teammate reviewed, under the Teammate review report. 1. Student: Fills out the reviews, and chooses answers in accordance with the Cake question type imposed restrictions, if there is one. The screen for the same when a cake type question is added to the teammate review is as shown below: <image> The cake type question will always have a green circle in the background, rending the score on top of it. In order to enable a student to review him/herself as a teammate we have implemented self reviews for teammate assessment. For example: In teammate review assessment, let there be a cake type question about the amount of contribution provided by each team member. After enabling self reviews, cake has to include the author as well. In order to implement the self review feature for teammate reviews we have added a column \"is_self_teammate_review_enabled\" to the assignments table. 1. Self reviews enabled 2. A student logs on to expertiza and clicks on an assignment 3. Then he clicks on your team link 4. He should be able to see his teammates and himself (for self review) under team members 5. Total contribution for a cake type question in a teammate review should include the contribution provided by the student in the self review as well. 6. If the contribution is exceeded, a warning should appear 1. Self review disabled 1. The link for a reviewer to review himself as a team member should not show 2. The cake type questions in the teammate review should include only contributions provided by the other team members 1. Context: If self review is enabled after the assignment has been created and a few students have already given reviews, then it should give a warning. 1. Self review enabled in the middle of the assignment 2. Add teammate review for teammate1 3. Add teammate review for teammate2 (make sure it adds upto 100%) 4. Enable self review as an instructor 5. As a student, notice that a new review button is visible in the ‚Äúyour team‚Äù page. 6. Click on review, try to add contribution for self and make sure a warning appears that says that the cake is already at 100% 1. Context: If self review is disabled after the assignment has been created and a few students have already given reviews. 1. Self review disabled in the middle of the assignment 2. Enable self review as an instructor 3. Add teammate review for teammate1 4. Add teammate review for teammate2 5. Add self review (make sure it adds upto 100%) 6. Disable self review as an instructor 7. As a student, notice that the review button is NOT visible in the ‚Äúyour team‚Äù page. The test cases pass, on creation of a review questionnaire and on creation of a questionnaire with different types of questions, including the cake type questions to the questionnaire rubric. In the current implementation of cake type questions, answer objects are tracked on the basis of teammate reviews or any other review, meaning, if the cake type question is part of a Teammate Review questionnaire, then instances of answer are tracked with respect to answers given by team members, otherwise all the responses for that specific question are fetched without any correlation between answer instances and team members. As part of future scope, if there are reviews other than teammate reviews that would need to keep a track of answer objects with respect to team members, then the implementation would have to also include that specific review scenario. With the current implementation, reviews that track answers round-wise, would not be accommodated with cake type question and can be extended for the same.", ["Good description of the design approach, but it would have been helpful to have more detail on the implementation.", "Also, it would be helpful to show how the code is implemented.", "the code would also have been good to show the code changes that have been made, and explain how they are related to the design."], [1.0, 1.0, 1.0]], "26": ["For users intending to view the deployed Expertiza associated with this assignment, the credentials are below: 1. Instructor login: username -> instructor6, password -> password 2. Student login: username -> student4340, password -> password 3. Student login: username -> student4405, password -> password. It‚Äôs an open source project developed on Ruby on Rails platform and it‚Äôs code is available on Github. It allows students to review each other‚Äôs work and improve their work upon this feedback. It focusses on refactoring some of the more complex methods, modifying some of the language to make it more Ruby friendly, removing some redundant code. A couple of long and complex methods were refactored from this controller along with removal of some non-functional code and a few language changes to make it Ruby style. Three methods in particular, namely conflict_notification ,calculate_all_penalties and edit were found to be too long and were in need of refactoring into smaller, easier to manage methods. Few more compact methods were created for this purpose. There were no existing test cases for the controller. This is a helper class which contains methods for constructing a table(construct_table) and to check whether an assignment has a team and metareveiw(has_team_and_metareview). We worked on the following work items(WIs) WI1 : Refactor calculate_all_penalties method into smaller methods WI2 : Move the repeated code in conflict_notification & edit methods to a separate method list_questions. WI3 : Refactor the code as per the Ruby style guidelines and incorporate the good practices WI4 : Test the conflict_notification method to test the changes made. WI5 : Move the repeated code in view and view_my_scores methods to a separate method retrieve_questions. 1. Refactoring calculate_all_penalties method This is used to calculate various penalty values for each assignment if penalty is applicable. The following changes were made: 1. This method was very complex, performing too many functions within a single method and had to be broken into 3 smaller methods each having a more well defined function. 2. The following 3 methods were created after splitting the first method <code> 3. Changes were also made to make the code follow ruby style.The language was made more ruby friendly. 4. Finally some redundant code was commented out as it was non-functional. Refactoring into smaller more specific methods: <image> Removal of non-functional code : <image> Change of language to make it more Ruby friendly: <image> 1. Move the redundant piece of code from conflict_notification & edit methods to a new method list_questions The conflict_notification method is used to help the instructors decide if one of the reviews are unfair or inaccurate. This was again split into 2 methods with some part of the code which is repeated in another method refactored into a new method. <image> Refactored #Created a method which was a duplicate in conflict_notification and edit methods <image> edit method: This method is used to edit the questionnaires. This method again has code which is repeated in the conflict_notification method and thus the repeated section was split into a new method. <image> New method: Refactored #Created a method which was a duplicate in conflict_notification and edit methods <image> Similar refactoring was performed to obtain the retrieve_questions method: <image> This is the new method created after the above refactoring: <image>. There were no existing test cases for the GradesController. We have added a new spec file 'grades_spec.rb' which covers testing scenario for the newly added method. As the model was not changed, no test cases were added for the model. Following steps needs to be performed to test this code from UI: 1. Login as instructor. Create a course and an assignment under that course. 2. Keep the has team checkbox checked while creating the assignment. Add at least two students as participants to the assignment. 3. Create topics for the assignment. 4. Sign in as one of the students who were added to the assignment. 5. Go to the assignment and sign up for a topic. 6. Submit student's work by clicking 'Your work' under that assignment. 7. Sign in as a different student which is participant of the assignment. 8. Go to Assignments--><assignment name>-->Others' work (If the link is disabled, login as instructor and change the due date of the assignment to current time). 9. Give reviews on first student's work. 10. Login as instructor or first student to look at the review grades. 1. The construct_table method in GradesHelper is not used anywhere. It has no reference in the project. method in GradesHelper can be broken down into separate methods, one each for team and metareview.", ["This is a very good description of the changes made.", "This describes the refactoring very well.", "However, This does not explain how the tests are tested.", "The test plan is not described.", "There are no existing test cases for the GradesController."], [1.0, 1.0, 1.0, 0.0, 1.0]], "27": ["The goal of this project was to add RSpec tests for the functionality added for project <link> . The changes submitted by project E1948 can be found <link> . See the Test Outline section to see the specifics of our testing work. For this project, our plan was to write new RSpec tests for new methods added in project E1948 for ReviewMappingHelper. In total, our team wrote 34 tests to cover the 8 new methods created or altered methods. These 8 methods are listed below. See the Test Outline for more details on the RSpec tests written these methods. This section shows the RSpec test we created for each of the methods defined in Relevant Methods above. The full test file can be found <link> . This method gets review and feedback responses for all rounds for the feedback report. Before testing this method, RSpec sets up an assignment, a review, and a reviewee. Then it creates 2 responses from the reviewer (one for each of the initial 2 rounds). During testing, these RSpec tests assures this method returns the correct amount of responses for each round. In this scenario created, each round should return 1. There is an additional two tests in this RSpec feature, testing to see if a 3rd round returns nothing if there was no response created (which there is not a 3rd response pre-setup. Likewise, there is an additional test where it creates a third response and assures that this method returns 1 for round 3. Setup <image> Tests <image>. This method gets the review score awarded based on each round of the review. Before testing this method, RSpec sets up an assignment, a reviewer, and a reviewee. Then it assignments 3 scores (one for each round) given by the reviewer. During testing, these RSpec tests check to see if this method returns the correct awarded score for each round requested. Setup <image> Tests <image>. This method checks the submission state within each round and assigns team color accordingly. The check_submission_state method calls the submitted_within_round? method to check if the submission was made in the current round and if yes then the purple color will be assigned to the team. One of the test cases tests this feature that purple color is being set or not. If no link was included by the team in the submission or the link is not a wiki link or the assignment was not submitted within the round, then the team will be assigned green color. These conditions are also being covered in the tests below. Setup <image> Tests <image> <image>. This method is a helper method for get_each_review_and_feedback_response_map. It sets the instance variables @review_responses_round_ and @feedback_response_maps_round_ after calculating the number of responses received by the team after each round. This method should return the corresponding response map associated with each round of review. The initial setup to test this method includes creating a reviewer, creating responses and review_response_map_ids. The tests check if the correct response map is returned or not for each round. Setup <image> Tests <image>. This method is a helper method for _team_score.html.erb view. It sets the metrics, namely min, max and avg score value for all reviews for a particular round and team. In the setup for the Rspec test, we create assignment, due dates for 3 rounds, student, reviewee, reviewer and user. We have 3 test cases each for round 1, round 2 and round 3. Setup <image> <image> Tests <image>. This methods checks if the link submitted for evaluation has been updated or not since the last round. The method takes in parameters round, due date and link updated time and compares the dates to check whether the latter for before the former time. The method returns false if it's not updated and true otherwise. The setup for this rspec test included creating an assignment and creating 2 rounds with corresponding due dates along with a reviewer and reviewee for the same. The first test case asserts that the method returns false when link is not updated. The second test case asserts that the method returns true when the link is updated within the due date. Setup <image> Tests <image>. 34 out of 34 tests in the review_mapping_helper_spec.rb test file. URL link of video of review_mapping_helper_spec.rb tests running and passing:- <link>. 1. We refactored get_review_metrics to get_review_volume, as per request from the professor <image> 1. We refactored get_team_colour & obtain_team_colour to read get_team_color & obtain_team_color, as per request from the professor <image> 1. We refactored calcutate_average_author_feedback_score to calculate_average_author_feedback_score, as per request from the professor <image>. <image> <image>.", ["This is a good description of what was done, but This does not explain the changes made to the code.", "This would have been helpful to have a description of how the tests are tested.", "Also, it would be helpful to show the code changes that have been made.", "that Also, it would be helpful to show the code changes that have been made is not the first time that I've seen this."], [1.0, 1.0, 1.0, 1.0]], "28": ["Description of the current project This project is intended to make Bookmarks more user-friendly, credible and valid. Bookmarks in expertiza are created by reviewers and can be used by authors for their work on any project. On each line of the signup sheet are two icons, one for adding a bookmark to the topic, and another for viewing bookmarks on the topic. If the instructor allows the participants to create bookmarks, then only a participant has access to create and view them. He should be able to create a new Bookmark only if he enters a valid one. Problem 1 : When a user after logging into expertiza wants to add a new bookmark or view existing bookmarks for the available projects, he will click on the buttons against the specific title. Once he goes to either 'Create New Bookmark page\" or \"View existing bookmarks page\", he's not able to go back to Sign-up sheet using \"back\" button. <image> Enhancements to this problem : We can go back to Sign-up sheet after clicking on \"back\" button. <image> Problem 2 : If a user clicks \"Add Bookmarks\" button, he will be navigated to a \"Add a new bookmark page\" where he can give details of new bookmark (like URL, description etc ). <image> After creating an empty bookmark, we are displayed this message as below in the figure. <image> Problem 3: When the instructor doesn't give access for participants to add/view bookmarks, the participants are still able to access them. He un-checks \"Allow participants to add bookmarks\" button and participants are still able to access them. <image> Enhancements to this problem : Now,if the instructor un-checks the button \"Allow participants to create bookmarks? \", the actions View and Add Bookmarks are no longer visible/accessible. <image>. 1. app/views/bookmarks/list.html.erb : This file is a view for listing the existing bookmarks of a particular Title of the project. 2. app/views/bookmarks/new.html.erb : This file is a view for creating a new bookmark - (A valid one). 3. app/views/sign_up_sheet/_actions.html.erb : This file is a view for showing the actions against the title of the bookmark. 4. app/controllers/bookmarks_controller.rb : This file has the code regarding the access that instructor gives to students regarding Bookmarks. a) Back button for the page \"View Bookmark\" and \"Create Bookmark\" was resolved. 1. Login with the credentials to expertiza. 2. Go to 'My assignments' and select OSS Project/writeup. 3. Select 'Signup sheet'. Select a title and choose either 'View Bookmark' or 'Add Bookmark' button 5. If you choose 'View Bookmark', after viewing, press the back button to go back to Signup sheet. 6. You will land up in Sign-up sheet page. 7. If you choose 'Add Bookmark', you can add by giving Bookmark details and save it. 8. Now press back button. 9. You will land in Sign-up sheet page. b) Creating Blank(Empty) Bookmarks problem was resolved. 1. Login into the expertiza with the credentials. 2. Go to 'My Assignments' 3. Select OSS Project/writeup 4. Now choose the \"Sign-up sheet\". 5. You will be displayed with titles to all available OSS projects. 6. Choose the one for which you want to create/add a bookmark. 8. You should be given a warning saying \"Error occurred while creating bookmark. 9. You will still remain in the same page unless you press 'Back' button. c) Issue of having the access to create the bookmarks even though instructor denied the access was resolved 1.Login to expertiza as instructor. 3. Select OSS Project and to edit. 4. Click on 'Topic' button and see if the 'Allow participants to create bookmarks' is checked or not. 6. Now login into expertiza as student and select 'My assignments' 7. Click on OSS project/writeup. 8. Select 'Sign-up sheet' and you see all titles available for OSS projects. 9. Against each title, you can't see any buttons to either add/view bookmarks. 10. You can now repeat the process by checking in the button and see if the add and view button against the titles are accessible/not. 1. A questionnaire can be built to grade a bookmark. Questions maybe like \" How helpful was this bookmark? \", \" Did you use this bookmark for your work? 2. A reviewer should be recognized or credited if he added useful bookmarks i.e if the author has made use of the bookmark. 3. A function to add extra credits automatically if a participant had submitted more than threshold number of useful bookmarks.", ["This is a very good description of the changes that were made.", "The code changes are described well.", "The code changes would have been helpful to show The code changes in more detail.", "Also, it would be helpful to explain how the code was changed.", "I would have liked to see a screenshot of what was changed in the code.", "that I would have liked to see a screenshot of what was changed in the code is not the case, though."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "29": ["If one respond to the advertisement, a join team request will be created and the topic holder can see it on ‚ÄúYour team‚Äù page. After a student gets a team and the team is not full, (s)he should also be able to send invitations to others. Fix Issue #227 : If user 'A' got a topic and user 'B' got no topic, then if A join B‚Äôs team, A‚Äôs topic is dropped and A and B end up with a new team with no topic. A user who is enrolled in an assignment and has a topic, can advertise for more team members. When another user goes on the 'your team' link, who is enrolled in the same assignment but doesn't have a team and topic yet, he will be able to see the team advertisements by other teams. This request goes to the team who had posted that advertisement. The request can be approved or denied by the team members. If there is an entry in the \"join_team_requests\" table for a user, then (s)he can only see advertisements if the corresponding \"status\" is \"D\", which implies that this user is not yet part of a team. If a user has an assignment and a topic only then (s)he will be able to advertise for team members to join their team. If a user doesn't have a topic (s)he won't be able to advertise. The scenario in which A, B were two users, A with a topic, B without a topic, A joins B's team but A's topic gets dropped; A,B become a team but with no topic. Such cases are now avoided as we have ensured that without first selecting a topic a user cannot advertise for team members nor can he send invitations to other users to join his team. If (s)he has a topic then he'll be able to see the option for advertising for teammates. If the assignment doesn't have a topic then the user will be able to send out team invitations. 1)Login as Admin, create an assignment with all the necessary details like maximum no of users per team, add topics for the assignment, enroll users(students) in the assignment. 2)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. You should be able to see the assignment now in the Assignment section. 3)Since A doesn't have a topic yet, so you won't be able to see the advertise link. 4)Go to the sign-up sheet for the assignment, select a topic. A now has a topic, so now A can advertise for team-members. 6)Login as another user(Student) or impersonate another student, say student B, whom you have enrolled in the assignment. 7)Since B doesn't have a topic yet, so you won't be able to see the advertise link. 8)Go to the sign-up sheet for the assignment, you'll be able to see a trumpet icon next to the topic that has an ad posted. 9)Click on the icon, you'll see the ad posted by A. Click on request to join A's team. 12)Login as user A or impersonate A, now you'll be able to see the team join request sent by user B. And now if you login as B or impersonate B, you will no longer be able to access the trumpet icon which is a link to all ads pertaining to topics the concerned assignment. 14)Had user A declined User Bs join request, the status in the table \"\" would change to \"D\", that means user B still doesn't have a team. So, now if you login as B or impersonate, you'll be able to see the ads again. 1)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. 2)You should be able to see the assignment now in the Assignment section. Since A doesn't have a topic yet, so you won't be able to see the advertise link. 3)Go to the sign-up sheet for the assignment, select a topic. A now has a topic, so now A can advertise for team-members. 4)This ensures that for an assignment with topics, a user can send out advertisements only if (s)he has a topic. 5)Login as Admin, create an assignment with all the necessary details like maximum no of users per team, do not add topics for the assignment, enroll users(students) in the assignment. 6)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. You should be able to see the assignment now in the Assignment section. 7)Since the assignment doesn't have any topics, therefore, you will be able to see the advertise link. You won't see a sign-up sheet since the assignment has no topics.", ["This is a good description of the changes made to the project.", "This explains the changes well, and explains how they were made.", "This also explains the issues that were fixed, and how they relate to the design.", "The only thing that needs to be changed is that the description of what was done is not clear."], [1.0, 1.0, 1.0, 1.0]], "30": ["<link>. The instructor needs to watch teams being formed, and every time a new team is formed, a new mentor needs to be assigned, outside of Expertiza. This leads to a lot of work for the instructor, as well as sometimes long delays before a team is assigned a mentor. 3. When a team reaches a target size of greater than 50% of the maximum teammate capacity, then: 1.1. A mentor will be assigned to this team and notified via email. 1.2. Participants in an assignment will be identified as mentors via their participant permissions ( <link> ). Anyone with ‚Äúmentor‚Äù permission for an assignment is eligible to be automatically assigned to mentor a team when a new team is formed. Develop a trigger that: 1. Is activated when any team has been formed that has k members, where k is greater than 50% of the maximum team capacity 1.1. ex: max members = 4, trigger activated when the team size reaches 3 2. Assign a mentor to the team 1.1. Mentors should be evenly assigned to teams, so a good strategy is to assign the mentor who has the fewest teams to mentor so far. 3. Notify the mentor via email that they are now assigned to a specific team, and provide the email addresses of the team members. 4. Possibly notify the team members that they have been assigned the mentor with contact information (further discussion here). The mentor assignment feature has a few preconditions and assumptions which have been outlined below. 1. An instructor has already added an assignment without topics. 2. ‚Äúmentor‚Äù permission exist 3. There are users in said assignment with mentor permissions. 4. A mentor has yet to be assigned to said assignment. 5. Mentor assignment is done only once, does not take into consideration drop offs. <image> <link>. The value will be only present if the mentor has been automatically assigned. <image> <link> The instructor view will also need to have visibility of what mentors the teams have. <image> <link>. 1. <link>. <image> <link>. 1. <link> <image> <link> 2. <link> <image> <link> <image> <link> 3. <link> <image> <link> 4. <link> <image> <link>. This will allow for the auto assign mentor feature to be disabled if the instructor does not want the work flow executed for the assignment. One trigger had to be added to invitation.rb so when users accept invitations to join a team the mentor management logic can execute. 1. <link> <image> <link> 2. <link> <image> <link> 3. <link> <image> <link>. Two views were updated in the Expertiza application to allow the user to see who the mentor is on their team. This also had to be done in two places, since the instructor view of a team is different than the student's view of the same team. 1. <link> 2. <link>. <image> <link>. 3. Impersonate the student account you found.If there is no team, create one by inviting other student to your team, or create a team using the admin control. 4. By toggling the Auto assign mentors when team hits > 50% capacity? in the assignment configuration page you will be able to: 1.1. Enable the functionarities and logics that our team implemented. 1.2. Disable the functionarities and logics that our team implemented to allow an admin to assign mentor manully. 1. Add team members to any team under the Rock on Assignment using any following way: 1.1. Invitate/Accept the team invitation using impersonated student accounts. 1.2. Add student to team by using the admin control. 2. Observe that when the member size passing the capacity (3 for this Rock on assignment), a mentor called Student6801 will be added to the assignment team. 3. Remove the mentor and the added students of the assignment team using the admin control. the second team member added), a mentor will not be added to the assignment team. 5. You should also be able to see that mentor is showing on the team list. 1. By doing similar step as we mentioned above, you should not see any of the following: 1.1. A mentor is added to the team after the team size changed. 1.2. A mentor is displaying on the team list unless this mentor account: Student6801 is manually added or invited. 1. A team will have a mentor after addMentor is called. 2. A team will have a mentor removed after removeMentor is called. 3. The mentor with lowest number of team assigned will be return after selectMentor is called. 4. The selectMentor except not to receive any message if a team already has a mentor. 5. The selectMentor except not to receive any message if a team has size < 50% of the maximum size.", ["This is a very good description of the changes that were made.", "This would have been helpful to show the changes made to the code.", "Also, it would be helpful to describe the changes to the wiki page.", "the wiki page is not very readable, and the wiki page does not explain how the code is changed.", "There is no description of how the changes are made."], [1.0, 1.0, 0.0, 1.0, 1.0]], "31": ["The student_task/list page is the page displayed to a student after logging in into expertiza. 1. Show the record of each group collaborator(s) for each course. Another div is to display all the assignments and their information, include Assignment, Course, Topic, Current Stage, Review Grade, Badges, Stage Deadline, Copyright Grants and Make Public. Original page before modifying showing below, all the courses and all the assignments are displaying in the same table, and badges have own column. <image> <image>. Here are some existing problems and unclear parts of the pageÔºö 1. Problem1 : Consider the cases where a student might be enrolled in assignments from more than one course. In this case, assignments should be grouped by course, with the course name given before the listing of the first assignment. 1. Problem2 : Remove the column for Review Grade because it makes no sense, change Review Grade to Submission Grade. Show the actual score and show the blue button. 1. Problem3 : Delete the badges column, and if the Assignment has a badge, mark it directly next to the assignment name under the assignment column. Fixing app/views/student_task/list.html.erb original code of how to display course are showing below <code> In order to group the courses, we added a group_by method to find out which courses does this assignment belongs to, and group the assignments that has the same courses name at one table. The modified code is showing below. <code> We will print out the course name as each table head, group the assignments, and we take down Course coloum from table content since the course name is already showing as table head. Also, for the assignments that have not assigned to a course, we will print out No Course Assigned Yet . 1. Fixing app/views/student_task/list.html.erb 1. app/helpers/student_task_helper.rb For this problem, first, we change Review Grade to Submission grade, which only need to modify <code> to <code> on list.html.erb. Second, we change how we display the score. Original code is showing below <code> In the original code, each grade is assigned to /100, which is not correct because not every assignment has 10 reviews (one review count for 10 point). Since we need to display the current score on the page, we need an array to carry the current score and display it on the result. The modified code showing below. <code>. Fixing app/views/student_task/list.html.erb Since not too many assignments are able to get badges, that make badges column barely have contents. Therefore, we display it after the assignment name and delete Badges coloum. If one student gets a badge, it will display a small picture after the badged assignment. Hover over your mouse on it, and it will display the information about this badge. <code>. <code> <code>. Page showing right now <image> <image>. Since when no assignment was assigned to the student, it should not show the table content on the page. Change from <code> to <code> 1. Second, we modified spec/features/assignment_submission_spec.rb . In order to use the content inside of the original test file, we added a def function. The function is able to set up the database for testing needed, and test the necessary function from the student_task/list page. - The def function we added is showing below. <code> - Later on, we will use this list_page function on our test cases. It will show if the student_task/list page has the assignment name( Assignment1684 ) that we putted on the database. Also, since there are an assignment assigned to the student, we will expect page to have course table information ( eg. Assignment, Submission Grade, Topic, Current Stage, Stage Deadline, Publishing Rights ). Since the assignment was not being graded yet, on the submission Grade column it will show a N/A . We are using student student2064 as our user. Therefore, the page should show student2064 . We also assigned the student to team up with CSC517, test ( student_id, user type. user type will be test #random number ), and on the page it should show Students who have teamed with you CSC517, test#{n} . Next, the page should not contain other course name. Testing code is showing below. <code> 1. Next, we added a new file spec/features/student_task_spec.rb . However, instructor_interface_helper did not help us to sign up an assignment to the user. Therefore, we will testing if the user have not been signed up for an assignment, and the student_task/list page will only show the first div part. The course information table will not appear on the page. <code>. <image>.", ["Very good job of describing the changes made.", "It would have been better if you had included a list of the changes you made to the code.", "Also, the test plan should have been described in more detail.", "I would have liked to see the code snippets that were added to the tests, and the code that was removed from the tests."], [1.0, 1.0, 1.0, 0.0]], "32": ["For testing the changes made, the following credentials are recommended: 1. Instructor Login: username: instructor6 password: password This project does compile. It provides a platform to view assignments, manage teams, select topics and work on improvement through anonymous peer reviews. Expertiza allows the instructor to define different topics that students or teams could choose from as their assignment. Each topic can have 0 or more slots that indicate the number of students or teams that can be signed up for that topic. To improve the user experience when managing topics, the following tasks were identified: 1. Issue #971: Change create topic UI into AJAX 2. Issue #926: We need a way to sort topics by topic number in assignment#edit page 3. Issue #718: We should allow instructors to give feedback when accepting or rejecting topic suggestions. Currently, when instructors manually enter topics, they have to go back and forth between the list of the topic page (views>sign_up_sheet>_add_signup_topics.html.erb) and the create topic page(views>sign_up_sheet>new.html.erb). Adding a new topic can be done through an editable grid (see js-grid) without leaving the list of topic page, by making use of AJAX. The list should be automatically updated when a new topic is entered. <code> On the View ' app/views/sign_up_sheet/_add_signup_topics.html.erb' the following was added: <code> The content of the above tag is completely rendered via Javascript, where we use JSGrid for dynamically allowing users to Add, Delete and Update Topics on the same page. In ' app/assets/javascripts/signup.js ' file, the following was added: The following content shows how AJAX calls are handled/made to our signup controller so that the CRUD operations on the topics page is dealt with <code> The Preview View for Topics Management : <image> After Our Implementation using JS Grids : <image>. This task is to do with sorting the Topics according to the topic number. This functionality is taken care by Js-Grid by itself, where clicking the topic# will toggle the topics in the ascending/descending order. Sorting in Ascending Order: <image> Sorting in Descending Order : <image>. Instructors should be allowed to give feedback when accepting or rejecting topic suggestions. Earlier, feedback on topics suggested by students can be given only when the instructor wants the topic to be revised, not when (s)he is approving or rejecting it. In app/controllers/suggestion_controller.rb Including the text provided in the comment field, while approving the topic. This ensures that comments are saved when an instructor accepts a topic suggestion in the backend. <code> Including the text provided in the comment field, while rejecting the topic.This ensures that comments are saved when an instructor rejects a topic suggestion in the backend. <code> Only an instructor should be able to approve or reject a submission. Therefore, only for instructor role, approve and reject submission options will be provided. <code> Comments can be added even during topic approval or rejection. <image> Comments during approval or rejection get reflected in the feedback list. <image>. 1. Issue #971: Change create topic UI into AJAX 1. Login as an instructor. It will automatically go to the manage courses page 2. Click Assignments tab next to Courses 3. Select the assignment for which a new topic has to be added 4. Click the edit icon for the assignment and go to Topics tab 5. You will be able to see the topics list in a grid format. Click on add icon on the right side corner of the grid 6. You can also edit an existing entry by just clicking on that row in the grid without being redirected to a new page 1. Issue #926: Sort topics by topic number in assignment#edit page. 1. Log in as any user or instructor. 2. Go to the assignments list. Note: this is not the manage assignments for instructors. 3. Click into a finished assignment. 4. Click into a current assignment. 1. Issue #718: 1. Login as an instructor. It will automatically go to the manage courses page. 2. Click on the \"Manage Notifications\" link above the \"Courses\" and \"Assignments\" links. 3. You will be directed to a creation page for notifications. The notification will display on the first page the user is shown. It will disappear when they change or reload the page. Note: instructors on the management page will retain the notification if they switch between Assignments, Courses, and Questionnaires. This is because the JavaScript does not actually reload the page. If the assignment is found, it loads all the topics and checks if the rendered format is json along with a http status 'OK'. If the assignment is not found, an empty json is rendered.", ["This is a very good description of the changes made.", "This is very readable.", "The code snippets are well organized.", "There is a lot of information about the code changes, but it would have been helpful to have more of a description of what was done.", "Also, it would be helpful if The code snippets were shown in a larger format."], [1.0, 0.0, 1.0, 1.0, 1.0]], "33": ["Currently we have a few classifiers that can detect useful features of review comments, such as whether they contain suggestions. The suggestion-detection algorithm has been coded as a web service, and other detection algorithms, such as problem detection and sentiment analysis, also exist as newer web services..but they need to be integrated properly using API calls in expertiza code. But later on we faced many issues such as: 1) The API call links were outdated 2) The new link that we found were incompatible with the previous work 3) The planned task of adding new API calls as per Carl Colglaizer's Framework turned out to be irrelevant or not required for this project, so we dropped it. So we decided to start with integrating these API Calls from scratch. Features we added in this project 1. Setting up a config file 'review_metric.yml' where instructor can select what review metric to display for the current assignments 2. Based on the selection made by professor, API calls (sentiment, problem, sugegstion) are made and a colorful table is displayed below the review form for student to review 3. The total time taken for making these API calls will be displayed below the table. This design pattern helped us achieve the decoupling and abstraction of implementation code base (makeARequest Function) of API call from the calling function (getReviewFeedback function). Later, refactoring of _response_analysis.html.erb partial further decoupled the implementation. Thus, in a nutshell, application of facade pattern along with some refactoring lead to a decoupled implementation of integration of all 3 API calls. <image>. In the partial view file _response_analysis.html.erb file, we added new javascript functions to make, process and display output of API calls. 1. review_metric.yml config file <code> <image> 1. response_controller.rb <code> <image> 1. response.html.rb <code> <image> 1. _response_analysis.html.erb - fetch_response_comments() function <code> <image> 1. _response_analysis.html.erb - getReviewFeedback() function <code> <image> 1. _response_analysis.html.erb - makeARequest() function <code> <image> 1. _response_analysis.html.erb - combine_api_output() function <code> <image> 1. _response_analysis.html.erb - generateTable() function <code> <image>. 1. <link> for problem metrics only 2. <link> for sentiment metrics only 3. <link> for suggestions metrics only. In order to make the API call, the partial view \"_response_analysis.html.erb\" is rendered in \"response.html.erb\" view file which will be responsible for sending a JSON input to the web service. The input will contain the review comment written by the user and when the student hits the \"Get review feedback button\" the comments will be sent to these api calls in the following json format: Below is a sample input <code> Once the request is sent, we expect the output to be in the following format: Sample Output: (for sentiment analysis API call) <code> Sample Output: (for problem detection API call) <code> Sample Output: (for suggestion detection API call) <code> These outputs (which is a JSON) will be parsed and the concerned metrics such as the sentiment, problem and suggestion will be extracted so the user will be able to view a summarized result of how well their review comments are. In addition, the result will be presented in a colorful tabular format to the user after they hit the \"Get Review Feedback\" button. Also, the total time taken for making these API calls will be displayed below the table. Rspec tests for the same have been written in response_controller_spec.rb <image>. 1. The functionality was written on the client side in javascript solely in _response_analysis.html.erb 2. To test this view, any type of review must be accessible as a student. 3. There is a button at the bottom of the review called 'Get Review Feedback'. 4. When pressing button, API calls are issued and the metrics will show up within the table (a sample of which is displayed below). 5. API calls are slow and will take time to process until the 'Loading...' text disappears. 6. You can modify the comments and click the 'Get Review Feedback' button again to get new feedback, that too can be achieved without the need of saving the review, but still saving the review first is a better option to approach this. 7. All the review feedback for the comments will be displayed in a colorful table. <image>. 1. <link> 2. <link> (the link is mentioned here for records. 3. <link> 4. <link> (make sure you change branch to 'beta' branch if the page doesn't load by default to beta branch) 5. <link>.", ["Very good description of the changes made.", "The code snippets are very readable.", "It would have been better if The code snippets were separated into two parts.", "For example of that It would have been better if The code snippets were separated into two parts : the code for the makeARequest() function should be separated from the make_getReviewFeedback() function.", "Also, the test plan should be described in more detail."], [1.0, 1.0, 1.0, 0.0, 1.0]], "34": ["1. Renaming done on the UI as well as on the backend 2. Varible names refactored appropritely 3. Flash messages changed accordingly. The error which is raised is due to the following validation present in the model late_policy.rb. 1. After discussing with professor we have decided to increase the max penalty limit to 100 2. Added a flash error message in the create function of late_policies_controller.rb <code>. 1. Added a back link in which redirects the user to edit assignment page. 2. Saved the assignment object in a session variable when the user clicks on the the edit asignment icon 3. We also added a back button on index page since there was no direct way of going back to edit assignment page once a late policy was created. 4. We also added padding between the edit and delete links on index page <code>. While testing this issue we noticed that the functionality was working perfectly fine, however, it was not user friendly. 1. We decided to add a tooltip icon explaining how this functionality works 2. We also inproved its UI by adding the alignment and padding. 1. Added test file late_policies_controller_spec.rb with appropriate test cases 2. Added test file late_policies_spec.rb with appropriate test cases. 1. <link> 2. <link> 3. <link> 4. <link>. 1. <link> 2. <link>.", ["This is a good description of the changes made to the code.", "The changes are described well.", "The changes would have been helpful to have the test plan explained in more detail.", "I would have liked to see a description of how the tests were tested.", "Also, I would like to see the code snippets that were added to the tests."], [1.0, 1.0, 1.0, 1.0, 1.0]], "35": ["<link> is a large project developed as a combined effort of students and faculty using the <link> framework. 0536558. Additional funding from the <link> <link> (LITRE) program, the NCSU <link> , the NCSU <link> Initiative, and the Center for Advanced Computing and Communication. Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.4. <link> 1.1.1. <link> 1.1.2. <link> 1.5. <link> 1.1.1. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.1.2. <link>. The goal of this project is to use both Bootstrap and AngularJS to improve the look of the entire Expertiza including the representations of buttons, tables, and other elements. Certain changes in design will also improve the efficiency of the web app when it comes to the amount of time it takes for a page to be loaded. We plan to improve the user experience by replacing the plain html buttons with stylish bootstrap buttons. To make the design of Expertiza consistent, our goal is to replace this plain-styled text with color coded Bootstrap buttons. The new design of Expertiza will include the fixed menu bar on the top of the page. As it can be seen on the screenshot, the user has scrolled down the page, but the menu bar is still visible on the top of the page, making it convenient for the user to navigate throughout the website. <image>. Please refer to the later part of this article: <link> for viewing the current design Now, when trying to open manage-courses, all records are loaded before rendering them onto the page, which takes too long time to load and is not responsive at all. Better practice is on Virgin American‚Äôs website: <link> When the website is representing the calendar, the price for each day is not actually loaded. <image> So in Expertiza, we can create several buttons for course semesters in the page. And if the list is still too long and takes a long time load, we can use a ‚Äòshow more‚Äô button ,or automatically load more data when the scroll bar reaching the end of the page, to minimize the content we need to load after one single mouse click. <image>. We will need to reduce the number of buttons. So we can replace them to 5 buttons with responsive design, that is, no redirecting happens after clicking on the buttons. <image>. Please refer to the later part of this article: <link>. That takes a long time to load and the length of review list is too long. <image>. As an assignment with a goal of improving the graphic design and responsiveness of Expertiza web application, this project mainly follows design patterns from two design pattern groups: structural and behavioral. Another structural design pattern that will be seen in this project is Front Controller pattern. While this pattern suggests that there is a single controller that takes all the requests, when we have both Rails and AngularJS coexisting, we can think of Rails framework as being the \"single bridge\" to the database from AngularJS's stand point. AngularJS, being an outstanding front-end framework, will interact with the user and pass all the request to Rails framework. Rails framework then queries/updates the database and provides AngularJS with the data. Finally, the third structural design pattern that this project follows is Module pattern. Modules are one of the essential constructs in the skeleton of AngularJS framework and, hence, this project is bound to follow module pattern. <image>. Since the large part of this project is to iterate through the database query and show the data to the user with a reduced delay, this project follows the well known Iterator pattern. This approach greatly improves the user experience since it does not leave the user waiting empty-handed until Rails framework completes the full query of the database. <image>. 2. Bootstrap will be applied for better user interfaces. <image>. 2. The database should not be executed before the user clicks on the button. 3. Bootstrap will be applied for better user interfaces. <image>. 1. The list is too long: if there are 20k users in the database, there will be 20k rows in this table in a one page! 1. Load only a given number of records to the view, such as 100 records, when accessing into this page for the first time.", ["Good description of the design pattern, but not much else.", "It would have been better to show how the code is implemented.", "The design pattern is not described in any detail.", "There is no explanation of how the design patterns work.", "that There is no explanation of how the design patterns work is not a very good description of what is done.", "I would have liked to see more explanation of the changes that were made."], [1.0, 1.0, 0.0, 1.0, 1.0, 1.0]], "36": ["This project works on improving the search functionality of Expertiza, by adding search bars if not present, introducing advanced search feature where user can search on the basis of more than one parameters and making the search functionality appear more elegant. 1. An instructor or administrator can search for a user by name, user-ID, or other characteristics. 2. An instructor should be able to search for assignments by name, due date, or other characteristics. 5. An instructor or administrator should be able to search for all the assignments that a particular user has participated in. In the current system workflow, we found that the user is unable to search in the Manage Users view. In the proposed workflow, we plan to enable the user to search by all the columns in the UI viz. The user will be able to apply multiple filters at a time and the output of the query will match all filters applied. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. However, the search is case sensitive. In the proposed system, the user will be able to search for an assignment using additional filters such as Creation Date and Updated Date along with Assignment Name. The user will also be able to apply multiple filters at a time and the output of the query will match all filters applied. To search for an assignment by Creation Date, the user will be prompted with a calendar where he can select a date and all the assignments created on or before the selected date will be displayed. To apply multiple filters, user can tap on the Advanced Search button available, adjacent to the Search button; a hidden div will then be rendered below containing textboxes for all the columns. All assignments that were created before the selected date for Creation Date or Updated Date columns and the ones that match other filters will be returned. A empty list will be returned if the search criteria doesn't match any records in the database. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. The existing system does not have a search functionality under Questionnaires. The user will be able to apply multiple filters at a time and the output of the query will match all the filters applied. To search for an assignment by Creation Date, the user will be prompted with a calendar where he can select a date and all the assignments created on or before the selected date will be displayed. To apply multiple filters, user can tap on the Advanced Search button available, adjacent to the Search button; a hidden div will then be rendered below containing textboxes for all the columns. All assignments that were created before the selected date for Creation Date or Updated Date columns and the ones that match other filters will be returned. A empty list will be returned if the search criteria doesn't match any records in the database. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. The existing system does not have a search functionality under Reviews. The user will be able to apply multiple filters at a time and the output of the query will match all the filters applied. The user will be able to apply multiple filters at a time and the output of the query will match all filters applied. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. 1. Search by user name 2. Search by user name that does not exist 3. Search by user email 4. Search by user email that does not exist 5. Search by user email containing a substring 6. Search by user full name 7. Search by user full name is empty 8. Search by user name and email 9. Search for assignments participated. 1. Search by user name 2. Search by institution 3. Search by creation date 4. Search by updated date. 1. Search by name 2. Search by courses used in 3. Search by assignments used in. 2. Search by score 3. Search by text comment length 4. Search by reviewer and reviewee.", ["This is a very good description of the changes that were made to the project.", "The design doc is very readable, and the screenshots are very well organized.", "The only thing that needs to be changed is that the description of what was done is not clear.", "the screenshots are not large enough to show the changes made to the screenshots."], [1.0, 1.0, 1.0, 0.0]], "37": ["The scores for different users, participants and teams for several assignments belong to different courses are calculated for multiple views. This code needs to be made faster. Requirement: Participant.find(participant id).scores # should return a Hash or new object, with a single database query. This method should return the scores of a participant from all the assignments in which the participant has submitted. 1. Participant already has its own participant id. Each user has a different participant for each assignment so we do not need to take participant id as the parameter. 2. This also means it should return a hash that will contain the scores of all the assignments in which this user is a participant since participant id changes each time. A new view was required since this view did not exist previously. A new link has been added to the user's homepage: <image> On clicking on this link, the user will be able see his scores for all the assignments he/she has participated in. This is a new view and will look as below: <image>. We needed to write a method and add a view that computed and displayed the scores of a user across all the assignments user has participated in. We added a new method all_scores in the grades_controller.rb. This method executes the following steps: 1. :Executes the below sql query: <code> The user_id is of the current user is passed as a parameter to this query. Once the hash is created and populated accordingly, this hash is used by the view to display to the user. Requirement: assignment.scores # should return a Hash or new object, with a single database query. This method should return scores of all the participants in an assignment. Instead, we get the scores in the query itself thereby reducing the complexity of the code. 2. The previous code was calling several methods that computed the different parts of the score in a loop. We tried to reduce this by having the database query (wherever possible) do most of the work for the method and the method just populate the hash. 3. Even though the single query approach works faster, for assignments that have a lot of responses, we noticed that the code still took some time to complete. The query in itself runs fast (when executed directly on the SQL server). The scores are computed in the get_scores method of the assignment.rb. For all quiz questionnaires taken by the participant, get all the quiz responses. Create a hash and store the score computed by calling Score.compute_quiz_scores. The total score is then calculated and stored in the hash by calling compute_total_score for each participant. 2. For all teams that participated in this assignment, get the scores into the hash by calling Score.compute_scores for each assessment and questions. Each of them might query the database adding to the time taken. We refactored this code to have the following steps: 1. Created an empty hash before hand. 2. Run a single SQL query that will return all the data required by the hash. 3. Loop through the result set to populate the hash. This speeds up the code since there is only a single SQL query that will get executed. The query is outside the loop and hence reduces the time required. The old code and the new code were tested against the same database, on the same machine and network and it was observed that there was a significant reduction in time taken to get the scores. Snapshot of the time taken for the previous method: <image> Snapshot of the time taken for the method after the above changes: <image> As can be observed, the improvement is significant. Requirements: Add a method course.scores which should return a Hash. This method should return scores of all the participants enrolled in a course. 1. We needed to get the scores of all users for all assignments for a given course. A new view was required since this view did not exist previously. This view will be displayed on clicking on the View Scores option in the Actions panel of the courses as highlighted below: <image> On selecting the highlighted option above, the following page will be displayed: <image>. We needed to write a method and add a view that computed and displayed the scores of all users that have enrolled in a course. This method does the following steps: 1. Creates an empty hash. 2. Runs a single SQL query as below: <code> The course id is passed as a parameter to this query. 1. The result returned from the query is used to populate the hash. This hash is then used to display the different parts of the view. 3. Avoided method calls where values could be obtained in the same SQL query itself. 2. The SQL queries could be compiled into database views. However, if such is required, the query can be made into a database view. 3. The view_my_scores method in the grades_controller can also be made similarly fast by replacing multiple database queries and loops with a single query.", ["Very good description of the changes made to the code.", "The code changes are described well.", "The code changes is clear that The code changes were made to make the code easier to read.", "However, the code is not described in any detail, and the code would have been helpful to explain how the code was changed.", "Also, the code would be helpful to show the changes to the view, rather than just describe rather."], [1.0, 1.0, 1.0, 1.0, 1.0]], "38": ["<link> is an <link> <link> application designed to support team/individual student projects which involves team creation, project sign up, project submissions, document upload (almost any format), and carry out multiple peer review processes for learning and educational purpose. This Open Source application can be cloned from <link> , the latest active branch is <link> . <link> supports email functionality within a Rails application, which involves sending and receiving emails from and to an application. Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.4. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.6. <link> 1.1.7. <link> 1.1.8. <link>. Another major issue is the migration issue from <link> to <link> as a result of which many of the unsupported features for Rails 4 have stopped working. Expertiza has two different Mailer implementations based on type of <link> : Synchronous events and Asynchronous events.<ref> <link> </ref> The synchronous events refer to events that should be immediately notified. All synchronous events are triggered by <link> and the call is made to app/mailers/mailer.rb (formally as model in /app/models/) via the sync_message() method call. Here mailer.rb extends <link> class. The required email template has been added for both generic_message and sync_message method calls. They are sync_message.html.erb and sync_message.text.erb <code> 3. Correct <link> and <link> codes have been added to app/views/mailer/generic_message.html.erb 4. The following line in the sync_message(defn) method has been commented out from app/mailers/mailer.rb in order to encode email correctly.<ref> <link> </ref> <code> 5. The following method calls in the following files have been changed. a) app/controllers/grades_controller.rb b) app/models/courses_users.rb c) app/models/participant.rb Original: <code> Changed: <code>. The asynchronous events are registered to <link> object and a <link> server must be activated to carry out the task. The DelayedMailer class acts as a wrapper class (i.e., adapter pattern <ref> <link> </ref>) to the Mailer class in the /app/mailers/mailer.rb via the delayed_message() method call. These events are added to the <link> by Delayed::Job.enqueue() command. Each event as record is stored in the delayed_job table, which can be browsed on <link> . Most of them are database migration files. To eliminate future table creation issues with <link> gem, we have also changed the integer byte length of <link> tables from 10 to 8 and have revised the <link> methods inside the migration files to improve efficiency. <code> Changes to data migration files are illustrated as follows: Original: <code> Changed: <code> Detailed code changed can be found at <link> . The <link> implementation was done via <link> gem <ref> <link> </ref> but it has not been parsed correctly. 2. The following lines have been added to Gemfile <code> 3. The following parsing errors in app/controllers/assignment_controller.rb have been corrected. Original: <code> Changed: <code> 4. The following code in ap/views/assignments/edit/_rubrics.html.erb has been changed. Original: <code> Changed: <code>. <link> is a <link> framework for <link> programming language. Inspired by <link> , it resembles a <link> specification. To test the emailer features, we have restored <link> test cases for both delayed_mailer.rb (asynchronous maier) and mailer.rb (synchronous mailer). Currently, the fixture<ref> <link> </ref> files are not completed and loading them into the test database may cause failure for the test, so we recommend to comment out the following line in the /spec/rails_helper.rb <code> Future developers must take extreme care to make sure all fixture files work before enable this option. <code>. 5. Enter your <link> server account settings in config/environments/production.rb file. 6. Start the rails server by entering <code> 5. Start the delayed_job server by executing <code>.", ["This is a good description of the changes made to the code", "It is not clear how the code has been changed.", "The test plan is described, but The test plan does not explain how the tests work.", "There are no screenshots of the tests, and the code is not described in any detail."], [1.0, 0.0, 1.0, 1.0]], "39": ["Student should be able to navigate to that page through the link provided in timeline. <image> 1. Viewing the timeline 1. Use case id:1 2. Use case description: View timeline in 'Your work' page of selected assignment 3. Actor: Student 4. Precondition: Student should be logged into Expertiza 5. Post condition: Student can view the due dates and timestamps of the activities, if any. 2. Viewing the due dates 1. Use case id:2 2. Use case description: View due dates only when no submissions have been made 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment 5. Post condition: Student will view only dues dates in timeline when no submissions are made. 3. Viewing hyperlink submissions in timeline 1. Use case id:3 2. Use case description: View hyperlink with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have made a hyperlink submission 5. Post condition: Student will view hyperlink of the submitted link with timestamp in timeline 4. Viewing files uploaded in timeline 1. Use case id:4 2. Use case description: View file name with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted a file 5. Post condition: Student will view file name with timestamp in timeline and would be able to download the file upon clicking on filename. 5. Viewing links to submitted reviews with round number 1. Use case id:5 2. Use case description: View review links with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted a review 5. Post condition: Student will view review link with timestamp and round number in timeline and would be redirected to the review submission upon clicking on the link. 6. Viewing links to author feedback 1. Use case id:6 2. Use case description: View author feedback links with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted an author feedback 5. Post condition: Student will view author feedback link with timestamp in timeline and would be redirected to the author feedback submission upon clicking on the link. Currently when a student logs into Expertiza, he could see the student task list page. In this project, a timeline in the student task list page would be added to navigate student to the due dates and the necessary links easily and keep a track of them. After the addition of the functionality, the student task list page would have the timeline as shown below. Timeline feature is used to display timeline with due dates, submitted links, submitted files, self review, reviews performed(multiple rounds) and Author Feedback. 1. When the student doesn't submit the assignment on time , due date passed would be shown in the timeline. 2. If the hyperlink submitted by student doesnt get submitted properly, it would not show any link to hyperlink on timeline. <image> <image> <image> Testcase 1: A hyperlink is submitted and expect to find 'submit Hyperlink' in the student task page. Testcase 2: A file is submitted and expect to find 'submit File' in the student task page. Expect to find 'round 1 review' in the student task page. Check timeline for 'submit Hyperlink', 'submit File' and 'round 1 review'. <image>. 1. Step1 : Login to Expertiza as Student 2. Step2 : Click the Assignments Tab 3. Step3 : Select an Assignment of choice 4. Step4 : Select 'Your Work' Link and the Timeline would be displayed with only due dates <image> 1. Step5 : Submit a hyperlink in 'Your Work' 2. Step6 : The hyperlink submitted would be refelcted in the Timeline along with the Timestamp. <image> 1. Step7 : Click on the hyperlink displayed which would redirect to the submitted link page. 2. Step8 : Upload a File in 'Your Work' 3. Step9 : The uploaded filename would be reflected in the Timeline along with the Timestamp. <image> 1. Step10 : Submit a review 2. Step11 : The submitted review link would be reflected in the Timeline along with the Timestamp and Round number page. <image> <image> 1. Step12 : Click on the review link displayed to be redirected to the submitted review link page. 3. Step14 : The submitted feedback link would be reflected in the Timeline along with the Timestamp. <image> 1. Step15 : Click on the round review link displayed to be redirected to the submitted feedback link page.", ["This is a very good description of what was done.", "This would have been helpful to have more detail on the changes made to the code.", "Also, it would be helpful to show the changes that have been made, rather than just describe rather.", "The code snippets are not very readable.", "The code snippets are not organized in any way, and it is hard to read The code snippets."], [1.0, 1.0, 0.0, 1.0, 1.0]], "40": ["Once someone has peer reviewed a project, the authors of the project can also provide feedback for this review, called ‚Äúauthor feedback.‚Äù While grading peer reviews, it would be nice for the instructors to include the author feedback, since it shows how helpful the peer review actually was to the author of the project. Expertiza allows instructors to view kinds of reports of assignments in their courses such as submissions, scores, and review reports. To improve the report views, some table columns such as team name, score, the average should be made sortable by using the same existing sort library. Workflow <image>. We have to sort ‚ÄúReview done‚Äù, ‚ÄúTeam reviewed‚Äù, ‚ÄúScore awarded/Avg score‚Äù. in the ‚Äúview review report‚Äù table. <image>. We will be using tablesorter function of jQuery to sort the table.To sort the columns that have constraints, custom scripts will be created. Tablesorter supports custom sorting. By default the sorting is disabled on the columns, we must enable sorting on those columns in order to make it sortable. Three types of scenarios may arise: 1. Sorting by columns alphabetically - To sort the columns alphabetically, the table-head attribute must include sorter-true class with it. 2. Sorting by date - Sorting by date includes creating a generic format for all dates(mmddyyyy). This generic format will be used to parse dates and sorting will be done based on this format. For ‚ÄúAuthor feedback report‚Äù table, we have to change the header name ‚ÄúReview response rejoined‚Äù to ‚ÄúReview responded to‚Äù and ‚ÄúLast rejoined at‚Äù to ‚ÄúLast responded at‚Äù. Then, sort ‚ÄúRejoinder‚Äù and ‚ÄúReview ‚ÄúReview responded to‚Äù as string (alphabetically), sort ‚Äú# author feedbacks done‚Äù by the first number then the second number (same as ‚ÄúReview done‚Äù in the ‚ÄúView review report‚Äù table) and sort ‚ÄúLast responded at‚Äù as date. We will use tablesorter function of jQuery to sort the table. To sort the columns that have constraints, custom parser will be created and used on top of tablesorter. <image>. Add a header, ‚ÄúReports for [name of assignment]‚Äù at the top. We will add header on top of Dropdown menu. <image>. For Author feedback reports, when no feedback has been submitted by any student, the names of the participants appear in a strange horizontal format. Fix this so that the formatting is correct, regardless of how many participants have done author feedback. <image>. <image>. We added jquery tablesorter in the script section to sort the columns. We had to enable the sorting on various columns so we added \"sorter-true\" in class of all the table headers. <image> <image> <image> <image>. We used jQuery tablesoter to sort the data in app/views/reports/_feedback_report.html.erb. We created custom parser to sort the dates in the last column and placed it tablesorter script. Due to blank columns the tablesorter threw an error. When the sorting is done based on rejoinder column, student data in rejoinder column will be hidden. While sorting on other columns, data in rejoinder column will be made visible. <image> <image> <image> <image> <image> <image> <image>. We added a header on top of Dropdown menu. <image> <image>. For Sorting Review Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select Review Report from Drop-down menu. 5. Sort the columns by Clicking on it. For Sorting Author Feedback Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select Author Feedback report from Drop-down menu. 5. Sort the columns by Clicking on it. For Sorting Teammate Review Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select teammate review report from Drop-down menu. 5. Sort the columns by Clicking on it. For Missing Header on View Reports 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. For Rendering Proper Format in Author Feedback Report 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. From drop-down menu select Author Feedback Report.", ["Very good description of the changes made to the code.", "It would have been better if they had included a description of how they sorted the data.", "Also, it would be helpful to have a description on how they used tablesorter to sort the data in app/views/reports/feedback_report.html."], [1.0, 1.0, 1.0]], "41": ["It uses <link> Framework. 1. Refactor automatic_review_mapping method 1.1. Write failing tests first 1.2. Split into several simpler methods and assign reasonable names 1.3. Extract duplicated code into separate methods 2. Refactor response_report method 1.1. Write failing tests first 1.2. Use factory pattern to create a corresponding report according to the switch condition 1.3. Create corresponding helper classes for different report types. Review mapping controller handles the review responses that are done on every assignment. It assigns reviews to different teams or individual student depending on the type of assignment(team project or individual project). As this method was long and complex it needed to be broken down into smaller methods with specific functionality. Original: <code> After Refactoring: <code>. This method automatic_review_mapping was very long and complex. A few methods in the controller were acting as private methods for this method and were being called only in this method. So this automatic_review_mapping method was split into smaller methods. All these small methods and the private methods were shifted to a helper class: AutomaticReviewMappingHelper. Methods 1. initialize(created) 2. automatic_review_mapping_strategy(updated) 3. execute_peer_review_strategy(updated) 4. peer_review_strategy(updated) 5. assign_reviewers_for_team(updated) The common parameters that are used in the automatic review mapping method are defined here so that they can be used as instance variables throughout for better flow of the code. <code> <code> <code> <code> <code>. This method consisted of long case statements making it a long and complex to understand. So this method was refactored using Factory Design Pattern. Original <code> After Refactoring <code>. As seen, the controller method originally was sharing a lot of instance variables with the corresponding views, and it has the long switch statements. Each switch condition is corresponding to a different type of report. Thus, different report helper classes are created for different types of report. These helper classes are grouped in the helper module: ResponseReportHelper. <code> <code> <code> <code> <code> <code> <code> <code> <code> The <link> is used to create a corresponding type of report, according to the switch condition. <code>. 1. Tests for these methods already existed. We altered them according to the refactoring that needed to be done. 2. Additional tests were added for the corner cases that weren't being tested. 4. After Refactoring the tests pass for all the test cases. 5. Test cases for automatic_review_mapping for which tests are run: 1.1. all the parameters are 0 1.2. all parameters except student_review_num are 0 1.3. calibrated parameters are 0 review_num are non-zero 1.4. Team is empty, max team size is 1 and when review_num parameters are not zero 1.5. Create Teams when team is empty 1.6. when artifacts num are non zero it should set the instance variables and call methods. 1. Test cases for response_report for which tests are run: 1.1. when type is SummaryByRevieweeAndCriteria 1.2. when type is SummaryByCriteria 1.3. when type is ReviewResponseMap 1.4. when type is FeedbackResponseMap 1.5. when assignment does not have varying_rubrics_by_round feature 1.6. when type is TeammateReviewResponseMap 1.7. when type is Calibration and participant variable is nil 1.8. when type is PlagiarismCheckerReport Tests for automatic_review_mapping: <code> Test for response report: <code> Additional Tests in the Controller: <code> Additional Tests in helper_spec: <code>. Tests passed for Revised Code: 1. Test for helper <image> 1. Test for Controller <image>. git clone <link> 1. go to expertiza folder cd expertiza 1. run bash setup.sh bash setup.sh 1. run bundle install bundle install 1. run rails server rails server 1. Use firefox in the image and test response_report method 1.1. Type in <link> 1.2. If you need to log in, use account name ‚Äúinstructor6‚Äù, and password ‚Äúpassword‚Äù. 1.3. In order to view different reports, select different types of report and click ‚ÄúSubmit‚Äù button. <image> 1. Use firefox browser in the image and test automatic_review_mapping method 1.1. Type in <link> 1.2. If you need to log in, use account name ‚Äúinstructor6‚Äù, and password ‚Äúpassword‚Äù. <image> <image> <image>. 1. <link> 2. <link> 3. <link>.", ["This is a very good description of the changes made to the code.", "This explains what was done and why.", "The tests are described well.", "They are not too long, but They are not very detailed.", "I would have liked to see more description of what was changed.", "Also, it would have been helpful to show the code snippets that were changed."], [1.0, 1.0, 1.0, 0.0, 1.0, 0.0]], "42": ["Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.4. <link> 1.5. <link> 1.6. <link> 1.7. <link> 1.8. <link> 1.9. <link> 1.10. <link> <link> <link>. Questionnaire Controller interacts with the user to create and edit questionnaires such as review rubrics, teammate-feedback rubrics, quizzes, and surveys. This page provides a detailed description of Open Source Project on Expertiza for refactoring the questionnaire controller. Why is Refactoring Required 1. It helps in making the code more understandable 2. It makes the code more maintainable 3. To remove repetition of code. The scope of the project is to refactor Questionnaire Controller which is very huge, in order to follow the standard principle of Fat Models and slim controllers. 1. questionnaire_controller.rb 2. questionnaire_helper.rb 3. advice_controller.rb. 1. Functionality moved to quiz_questionnaire.rb. 2. edit_advice method was not being used, so it was removed. 3. save_advice moved to the advice_controller. 4. copy, update_quiz, valid_quiz methods were long and have been broken up. clone_questionnaire_details was also broken up and renamed. 5. Added comments to select_questionnaire_type 6. Debug output (print statements) have been removed. 7. Changed code to follow the global rules. 8. save_new_questions, delete_questions, save_questions have been moved to a separate class. <link> <link> <link>. A Subset of the UML class diagram including only the related classes for this project can be drawn as shown below. <image> Questionnaire Controller is the superclass of QuizQuestionnaire and all the other classes - User class, Advice class and Questionnaire classes are related model Classes to the controllers that we have modified. Several methods in Questionnaire Controller class required refactoring to ensure that the change is reflected in the entire project. The names were changed to follow method naming conventions in Ruby. Deprecated code was removed and re-coded to ensure that the code worked in future version of Rails as well. Methods that are more general in the sub classes were moved to the parent class. Some methods that calculate that were colliding with other files were moved to a helper method questionnaire_helper.rb . 1. The quiz questionnaire related methods such as view_quiz, update_quiz, new_quiz and validate_quiz are moved to questionnaire_helper.rb to make the questionnaires_controller thin and follow global rule of thin controllers and fat models . <image> 2. Non Restful method names changed accordingly to make them Restful. Before <code> After <image> 3. edit_advice method is evidently not used, and removed. This edit function is already implemented in advice_controller.rb. 4. save_advice has been moved to the advice_controller. 5. Global rule changes for using Hash - value key pair implemented [Use key: ‚Äòvalue‚Äô, not :key => ‚Äòvalue‚Äô] accordingly. <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> 6. \".eql? <code> 7. Removed duplicate and redundant code making the code DRY. <code> 8. Removed unnecessary debug prints present in the code. <code> 9. Used `&&` and `||` rather than `and` and `or` to keep boolean precedence as per global rules. <code> 10. More global rule changes. <code>. The following object oriented design principles were followed during refactoring: 1. Single Responsibility Principle : The single responsibility principle states that every context (class, function, variable, etc.) should have a single responsibility. It was maintained that each method should be involved with a single responsibility and the code that was not related to that particular functionality was moved to other method. This was also taken care of in terms of classes. The repetitive and redundant code was removed from the associated classes and methods. We tested the functionality of the questionnaires controller before and after refactoring by manually creating and listing the questionnaires, there is no change in behavior observed. After Refactoring, the questionnaire controller is working as before. <image> <image> <image>. 1. Refactoring was performed as per requirements in the files questionnaire_controller.rb, and advice_controller.rb. 2. The code from models cannot be moved directly to controllers, so the code was moved to the helper class questionnaire_helper.rb. 3. Some methods with confusing method names have also been renamed. <link> <link> <link> <link> <link>.", ["This is a very good description of the changes made.", "The code changes are described well.", "The code changes is clear that the code has been refactored, and that the changes are reflected in the code.", "However, the code is not described in any detail, and the code would have been better to describe The code changes in more detail.", "Also, it is not clear how the tests are tested."], [1.0, 1.0, 1.0, 1.0, 1.0]], "43": ["Expertiza has a functionality that allows students and instructors to receive and give grades, respectively. This functionality is implemented in the grades_controller.rb file. This controller currently violates some essential Rails design principles including having too much calculation and having methods' names that violate Ruby naming convention. Here are the refactoring steps needed to be taken in order to fix the grades_controller.rb . 1. Create a new private method to encapsulate the population of the view model for all the necessary data (lines 102-107). 2. Simplify the logic surrounding the error flashing. The nested logic seems unnecessary (lines 190-192). 3. In line 300: 1.1. Increase readability by fixing whitespace according to the common Ruby Programming guidelines. 1.2. Return is not needed here. 1.3. Remove space between ‚Äò!‚Äô and its argument. 1.4. Use meaningful variable names and break up the expression. 4. Move these functions into grades_helper.rb and change their names to be more Ruby-like: 1.1. calculate_all_penalties 1.2. calculate_penalty_attributes 1.3. mean (also cease the usage of the assignment) 1.4. calculate_average_vector 1.5. build_score_vector 1.6. Remove_negative_scores_and_build_charts 5. The previous programmer used update_attribute, which is concerning, as validations are ignored (Line 153 and 219). 1. Comment changed that was wrong (\"head\" into \"heat\") <image> 1. Line 102-107 (New Private Method made to encapsulate this) <image> <code> <image> <code> <image> 1. Line 190-192 <image> <code> <image> 1. Line 300 <image> <code> <image> 1. Lines 153/219 <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image>. To test this controller, run the following command to verify the changes do not break any core functions. <code> <image> <image> When you run the program and get to login page. Use credentials below for instructor. <code> <image> A good student to impersonate for testing is <code> <image> <code> <image> <code> <image> <code> <image> <code> <image> 1. To Do: Add Rspec tests to grades_helper.rb Important views for using refactored functions <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code>.", ["This is a very good description of the changes made to the code.", "This describes the changes well.", "However, This does not explain how the code was changed.", "The code changes are not described in any detail.", "This is a good thing, but This would have been helpful to explain the changes in more detail."], [1.0, 1.0, 0.0, 1.0, 1.0]], "44": ["Expertiza is an Open Source Software project developed by NCSU. It allows the instructor to create assignments as well as modify existing assignments. Students can signup for topics in an assignment and can submit articles, codes, web-sites etc. It is a web application built on Ruby on Rails framework. It also allows students to review the submissions that have been made other students. In the current implementation only the students can sign up for topics. Because of this, no higher authority (e.g instructor) can control the signups in a straightforward manner. If the instructor wishes to assign a particular topic to a team or remove a team from a particular topic then the instructor has to impersonate that student and sign up for the topic. Due, to the current implementation, you can neither handle the mistakes in signups , nor make modifications to the existing signups without impersonation. The new implementation allows an instructor to assign a particular topic to a team as well as remove a team from a topic.This functionality has been added in views/sign_up_sheet/_all_actions.html.erb which now has a '+' sign to assign a topic to a particular user. If the instructor clicks on this, then a view will appear which takes in the username of a student to be added. When the box is filled out and the ‚Äúadd‚Äù button clicked, then the indicated user‚Äôs team is signed up for the topic. If there are no slots available for that topic then the team will be put on the waiting list. There is also a 'X' sign that will help the instructor to remove a team from a topic. Some of the scenarios where the instructor might wish to add a team would be if the sign up deadline has passed, or if the instructor has decided to update the maximum number of teams allowed to choose a particular topic. The instructor might want to drop a team from the topic if the team doesn't want to proceed with the same topic for the assignment. With the new implementation, Instructors/Teaching Assistants do not need to go through the trouble of impersonating a student in order to add or drop their team from topics. We have chosen the nested if-else approach because there were many scenarios , all of which required us to take different actions. Changes were made in the following files - 1. controllers/sign_up_sheet_controller.rb 2. views/sign_up_sheet/_all_actions.html.erb 3. views/sign_up_sheet/assign_topic.html.erb 4. views/sign_up_sheet/remove_topic.html.erb Functions added to implement functionality :- 1. update_team 2. assign_topic 3. remove_team 4. remove_topic In the sign_up_sheet controller, two major methods were added: <image> <image> Two additional icons have been added in the Actions column. The ‚Äògreen plus‚Äô icon allows you to add a team to the current topic. Clicking on the icon redirects you to a form, where the admin is required to enter the username of the person whose team he wishes to add. <image> Clicking submit then redirects back to the original page, with a flash message containing the status of the operation. <image> In case the topic has already been assigned the maximum number of teams, the new team is added to the waitlist. <image> The 'red cross' icon is used to remove a team from the given topic. Clicking on it takes the admin to a form, where he is required to enter the username of one of the team members belonging to the team that is to be removed. Submitting the form redirects the user back to the original page, with a flash message indicating the status of the remove operation. <image>. The system can take in individual users who don't have a team or topic and can add him/her to the existing teams that are enrolled for the topic. 1. <link> 2. <link> 3. <link>.", ["This is a very good description of the changes made to the code.", "This explains the changes well.", "The only thing that needs to be changed is the description of how the code is changed.", "the description of how the code is changed is not very helpful, as it would have been better if it had been described in more detail."], [1.0, 1.0, 1.0, 1.0]], "45": ["3. In the DB the default number of meta-reviews allowed and required should be null. 6. When a user requests a new meta-review, the field which says the number of meta-reviews left ( refer to above image ‚ÄúNumbers of Meta-reviews left:‚Äù) does not change and the button to request a new meta-review disappears. The code below shows the conditional used to display the \"Request new meta-review\" button. Currently, the number of required and allowed meta-reviews is always being set to 3 in the database. When the checkbox for setting meta-review limits is unchecked, the values of number of meta-reviews allowed and required should be null. The \"Request new a meta-review\" button should be hidden when: 1. The number of meta-reviews in-progress is greater than the maximum allowed outstanding reviews. 2. The number of reviews allowed is limited AND the total number of meta-reviews completed or in-progress is greater than the number allowed. The code below shows the conditional used to display the \"Request new meta-review\" button. The user should NOT be able to see the 'Request a new meta-review to perform' button when there are no reviews available. 1.1.1. A student should NOT be able to request a meta-review on their own review. 1.1.2. When the meta-review limit on the assignment is set to 1 then a student should NOT be able to request a second meta-review. 1.1.3. The user should not be able to see the 'Request a new meta-review to perform' button when they have performed all valid reviews. 1.1.1. The user should be able to click the 'Begin' button and still see the 'Request a new meta-review to perform' button. 1.1.2. The user should NOT be able to see the 'Request a new meta-review to perform' button when they have reached the meta-review limit. 1.1.3. If the user requests two meta-reviews but has not submitted, then they should not be able to request a new meta-review. 1.1.4. The user should be able to request a meta-review if they are above their required but below the allowed number of meta-reviews. Number of meta-reviews left should decrement when a user requests a meta-review. 1.1.1. The user should see the number of meta-reviews left decrement after a new meta-review is requested. 1.1.2. The user should see the number of meta-reviews left decrement after a new meta-review is completed. All meta-review tests make meta-reviews allowed only during the meta-review round. 1.1.1. The user is able to SUBMIT a simple meta-review. and set the number of allowed and required meta-reviews. 1. User should NOT be able to see 'Request a new meta-review to perform' button when there are no reviews available. 1. User is able to SAVE a simple meta-review. 2. User is able to go BACK during a simple meta-review since this functionality is available for reviews. 3. When the limit and required number of meta-reviews on the assignment are equal, then a student will see they need to submit exactly that number of meta-reviews. 4. When there are more meta-reviews allowed than required, then a student will see they need to submit between the two numbers of meta-reviews 5. When the meta-review limits for an assignment are unset then a student will see that the number of meta-reviews aren't limited 6. A student should not see a number of required or allowed meta-reviews when there are no limits on meta-reviews 7. A student should see the number of meta-reviews decrement after a review is requested 8. A student should see the number of meta-reviews decrement after they complete a review 9. A student should not be able to request a meta-review on their own reviews 10. If the meta-review limit on the assignment is set to 1 then a student should not be able to request a second meta review 11. User should not be able to see 'Request a new meta-review to perform' button when they have reviewed all valid reviews already. 1. User should be able to request more than one meta-review before completing any 2. User should not be able to see 'Request a new meta-review to perform' button when they have reached the meta-review limit 3. User should not be able to request more than two meta-reviews without completing at least 1 4. A student should be able to request a meta-review if they are above their required but below their allowed meta-reviews <image>.", ["Very good description of the changes made to the code.", "the code is very readable.", "the code would have been helpful to have a description of how the code was changed.", "Also, the code should have been shown in a more readable format.", "I would have liked to see the code for the \"Request new meta-review\" button."], [1.0, 1.0, 1.0, 1.0, 0.0]], "46": ["A response is the object that is created when someone fills out a review rubric, such as when one writes a review, gives feedback to a reviewer, or fills out a survey. It is not the worst controller in the system, but it would be much clearer if its method names were more descriptive of what they do. This project tries to modify and refactor the response_controller.rb in a more clear way. response_controller.rb response.rb. 1. def assign_instance_vars 2. def scores 3. def new 4. def set_questionnaire 5. def set_questionnaire_for_new_response 6. def show_calibration_results_for_students. Since most of the method involved in our project is private methods and all of the public methods in response controller were already tested. Thus, we will focus on testing methods we created in the model class: response.rb spec/models/response_spec.rb will be edit in order to test our methods. We did the following refactor to make this method more clear: 1. the instance variables are actually action handles to the views from controller including \"new\" and \"edit\", thus refactoring method name to assign_action_parameters would be better to understand what this method is trying to do. 2. This method is a private helper method and is used in new and edit methods to set the action parameters for the new and edit actions <image> 1. After renaming, the method became more clear of what it's doing <image>. 1. This method was already defined in other classes and is useless in the current class, thus remove it would be a reasonable choice. <image>. 1. In the method set_content in response_controller.rb, there is one line of code that \"new_response ? set_questionnaire_for_new_response : set_questionnaire\". Thus, we can tell the method set_qustionnaire will called when new_response is false, which means that the object was triggered by an existing response. In the method set_questionnaire, the line of code that ‚Äú@questionnaire = @response.questionnaire_by_answer(answer)‚Äù, which is looking up the questionnaire answered by this existing response. Therefore, refactoring the method name to find_quesetionnaire would be better to understand. <image>. 1. In the method set_content in response_controller.rb, there is one line of code that \"new_response ? set_questionnaire_for_new_response : set_questionnaire\". Thus, we can tell the method set_qustionnaire will called when new_response is true, which means that the object was triggered by a new response. In the set_questionnaire_for_new_response method, the \"cast\" statement informs us that the new questionnaire are created based on the types or Reviewers, such as Review, Metareview, Teammate Review and so on. Therefore, refactoring the set_questionnaire_for_new_response method to create_new_questionnaire would be better to understand. <image>. 1. This method shows the result of expert review for reviewer after teacher or TA submit the calibration by editing the assignment. 2. The method makes about five database accesses and the code is quite messy and thus break it into 2 methods with the business logic moved to response.rb would be a good way to make the code in controller cleaner. <image> 1. The method get_questions_from_assignment is the part that's inside the model class and contains logic of mapping reviews with assignments in the questionnaire and return questions in the joined table <image>. <image>. <image>. <image>. 1. This method contains a complicated condition that determines whether the submission has been updated since the last time it was reviewed. If it has not, then the reviewer can edit his/her previous review. If there has been an update, then the reviewer gets a new review form to ‚Äúupdate‚Äù the review. 2. So we break the new method into two methods: new and get_most_recent_response and put the logic into the response controller class. 3. The method get_most_recent_response in the model class tests whether there has been a review since the last file or link was submitted and in the controller this method was called to get the newest response. <image> 1. The new method after refactoring, now the code is quite clear and with only one appearance of variable \"@response\" <image>. <image>. <image>. Most of the method involved in our project is private methods and all of the public methods in response controller were already tested. Thus, we will focus on testing methods we created in the model class: response.rb spec/models/response_spec.rb will be edit in order to test our refactored methods <image>.", ["This is a very good description of the changes made to the code.", "This would have been better to describe the refactorings in more detail.", "For example of that This would have been better to describe the refactorings in more detail : the method get_questions_from_assignment is a good example of how the code is broken up."], [1.0, 1.0, 1.0]], "47": ["<image> This button takes the student to the create/edit Review Questionnaire page. The student then can create a new rubric. Added a new field called 'supplementary_rubric' to the 'teams' table so that the supplementary rubric could be stored. Supplementary rubric questions are visible along with instructor generated rubrics. <image> ‚ÄúView‚Äù function for a rubric displays answers submitted for the Supplementary rubric questions along with Review Questionnaire for Reviewer. <image> ‚ÄúYour Scores‚Äù function for the Reviewee displays answers submitted for the Supplementary rubric questions along with Review Questionnaire. <image> \"Alternate View\" for \"Your scores\" should also include Supplemenraty Rubric questionnaire. 3. Polymorphism 4. Inheritance Use Case Here SRQ is used for newly added field supplementaryReviewQuestions in the Teams table and it is initially set as null for all the table entries.Once a student adds a specific Questionnaire to his project this field stores the id of that Questionnaire which is stored in the Questionnaires table. <image> Use Case to Add Questionnaire Functionality: In the \"Your Work\" section, Student will be shown a button \"Manage Rubric\", when clicked, if the supplementaryReviewQuestions column in Teams table is null for that team, Questionnaire will be created and SRQ in Teams table will be updated to contain the Questionnaire ID. The student will be directed to the Edit Questionnaire page with exsiting logic. <image> Use Case for Show Questionnaire Functionality: When the student orders for new reviews, if the supplementaryReviewQuestions column in Teams table is not null for the assigned team, extract the questionnaire for supplementary reviews and append in a new section below normal Questionnaire. <image> Use Case for Show Review( and Scores) Functionality: When the Student or the Instructor checks the reviews and scores on rubric, if the supplementaryReviewQuestions column in Teams table is not null for the team, extract the questionnaire review for supplementary questions and append in a new section below normal Questionnaire Reviews. To provide the view for the scores of a team we will add one more partition containing the scores for the supplementary questionnaire and implement the already build logic to get and display the scores. 2. To check if clicking on \"Manage Supplementary Rubric button\" creates a questionnaire id in Supplementary rubric column of Teams Table. 3. To check if a reviewer creates a Rubric, the assigned student is able to see the Supplementary Review Questionnaire whenever he/she logs in and tries to review it. <code> <code> <code> <code> end. Here SRQ is used for newly added field supplementaryReviewQuestions in the Teams table and it is initially set as null for all the table entries.Once a student adds a specific Questionnaire to his project this field stores the id of that Questionnaire which is stored in the Questionnaires table. <image> Use Case to Add Questionnaire Functionality: In the \"Your Work\" section, Student will be shown a button \"Manage Rubric\", when clicked, if the supplementaryReviewQuestions column in Teams table is null for that team, Questionnaire will be created and SRQ in Teams table will be updated to contain the Questionnaire ID. The student will be directed to the Edit Questionnaire page with exsiting logic. <image> Use Case for Show Questionnaire Functionality: When the student orders for new reviews, if the supplementaryReviewQuestions column in Teams table is not null for the assigned team, extract the questionnaire for supplementary reviews and append in a new section below normal Questionnaire. <image> Use Case for Show Review( and Scores) Functionality: When the Student or the Instructor checks the reviews and scores on rubric, if the supplementaryReviewQuestions column in Teams table is not null for the team, extract the questionnaire review for supplementary questions and append in a new section below normal Questionnaire Reviews. To provide the view for the scores of a team we will add one more partition containing the scores for the supplementary questionnaire and implement the already build logic to get and display the scores. 1. Created a migration script to add a new column 'supplementary_rubric' to the Teams table 2. To add supplementary rubric: In submitted_content_controller.rb: created a new function 'manage_supplementary_rubric' <code> In the view, submitted_content/_mail.html.erb: Created a button 'Manage Supplementary rubric' to be shown in 'your work' tab <code> After this, the same functionality of adding a rubric and questions is used as before. 2. To check if clicking on \"Manage Supplementary Rubric button\" creates a questionnaire id in Supplementary rubric column of Teams Table. 3. To check if a reviewer creates a Rubric, the assigned student is able to see the Supplementary Review Questionnaire whenever he/she logs in and tries to review it. <code> <code> <code> <code> end.", ["This is a very good description of the changes that were made.", "This would have been helpful to show the changes in more detail.", "For example of that This would have been helpful to show the changes in more detail : it would be helpful to explain how the tests work.", "Also, the test plan should have been described in a more detailed way, rather than just saying that the tests are to be tested."], [1.0, 1.0, 0.0, 1.0]], "48": ["Review \"tags\" are a form of feedback on Expertiza where students \"tag\" (classify) text from peer reviews, using Yes or No answers to questions chosen specifically for each tag deployment. <image>. It can be difficult for students to find a tag they missed on the Team View page, and other teams are working with ML algorithms to \"pre-tag\" as many reviews as possible, leading to a granular field of completed/incomplete tags. At this time, the only tagging feedback students see are the tag prompts and a Javascript counter with a numeric representation of how many tags have not been completed. In order to find a missed tag, students have to scroll the page and manually search for tags that aren't done. In order to help students complete all the tags for an assignment, we propose a new, dynamically generated heatgrid on the \"Your Scores\" view that breaks down reviews and tags by round, question, and review, which uses visual cues to help students find incomplete tags. The heatgrid shows both a total count of \"complete\" out of \"available\" tags, and individual tags with color-scaled feedback for completeness. The new heatgrid must handle these requirements, and display visual feedback accordingly: 1. Single and multiple round reviews 2. Reviews with and without tag prompts 3. Dynamically update as tags are completed 4. Different tag deployments will use different numbers of tags per review 5. Use of existing review row-sort functionality 6. Not rely on the database for tag data, as AnswerTag database rows may not exist until tags are clicked. For example, if there are 370 tags in total on this page and 10 of them have already been tagged, then 10/370 will be displayed. This element will also be updated dynamically when users make tag changes on this page. A simple JS function to count all the tag elements on current page. It will be invoked when the page first being rendered and also when any tags are changed by users. A simple JS function to count the number of tagged tags on the current page. It will be invoked when the page first being rendered and when any tags are changed by users. This JS helper dynamically render the page when any tags are changed by users. <image>. For manual testing purposes, we logged in as instructor6 in order to: 1. View the tagging report as an instructor/TA (Instructor tagging is permitted, and tags are separate from Student Tags) on view_team 2. Impersonate a student to view the tagging report on view_team as a student 3. View the mini-report on Alternate View both as students and instructors 4. Ensure that changing of tags updates the Tagging Report 5. Ensure that the Tagging Report interacts well with the existing layout 6. Ensure that the Tagging Report is hidden/shown when \"Hide Tags\" is clicked 7. Ensure that the Tagging Report accordions as expected when clicked 8. Confirm that mouseover events display the expected tooltips, including color scheme for the \"10 out of 250\" cell as well as color scheme for the main report body, and the Expand/Collapse tooltip 9. Ensure that the Tagging Report is hidden when there are no Tags available for a view_team page 10. Ensure that the Tagging Report was compatible with different tag deployments containing different numbers of tags A good example of functionality for a project with reviews and one with reviews can both be found with student7856. Program 2 has plenty of reviews that can be tagged and untagged and checked that the heatmap functionality is working. Program 1 does not have any reviews to tag and was checked to ensure that nothing broke due to not having any reviews to tag. Many recent assignments (2017-present) which have reviews have tag deployments. <image> 3. Both instructors and students can enter tag data. To view the instructor view, tags, and tagging heatgrid, click \"Assign Grade\". <image> 5. Click \"Your Scores\" to view the main View Team page which includes most of the functionality, including the tag heatgrid. On the main View Team Page, click a question row and change one or more tag prompts, to ensure the heatgrid and fraction are updated. c. Click \"Hide tags/Show Tags\" to show and hide all tag-related data. e. Click the row-sorter for question or average, and change one or more tag prompts to ensure the heatgrid is still updating the correct tags <image> 7. To view the \"Alternate View\", navigate back and click \"Alternate View\". This view should show a small counter near the top of the page with tag completion data. 9. We suggest now impersonating student7856 and navigating to Program 2 , then Your Scores to view a series of reviews with all tags completed so you can see how the interface behaves. 10. Finally, we suggest viewing an assignment which has reviews, but does not have a tag deployment assigned, to ensure none of the heatgrid materials related to tagging are displayed.", ["This is a very good description of the changes that were made.", "This would have been helpful to have more detail on the changes made to the design doc.", "the design doc is not very readable, and the design doc does not explain how the changes were made, or how they were implemented.", "Also, the design doc does a poor job of describing the changes to the heatgrid.", "that Also, the design doc does a poor job of describing the changes to the heatgrid is not the first time that I've seen this."], [1.0, 1.0, 0.0, 1.0, 1.0]], "49": ["The quality of the reviews can be improved if students are shown some example reviews while they peer review. These example reviews can either be taken from the assignment of current semester or from the same/related project of previous semesters. The objective of the project is to add a feature to show some good sample reviews while the students peer review other teams work. To enable this, students while submitting their peer review give a consent on whether their reviews can be shown as an example to others. Instructors then select a subset of these reviews to be posted as an example reviews. These example reviews are shown in the peer review page (Other's work link) to the entire class. 3. The student can remove their consent anytime, and the sample review should no longer be visible to other students. In the order of flow, 1. Student's Consent: In each review assignment, there will be a checkbox that says \"I agree to share my review as a sample for others\" then students can decide to check this box or not just before they submit reviews. Sequence Diagram: <image> 2. Instructor's Selection: The instructor can select from among the \"public\" reviews and decides which to make visible to other students doing a particular assignment, i.e. all participants in that assignment. If this review has already been shown as an example, the button should be ‚Äúremove this review from examples‚Äù instead. Sequence Diagram: <image> 3. List of Sample Reviews: A participant can see these \"exemplary\" reviews by going to \"Others' work\" for the assignment in question, and clicking on one or more links that say, e.g., \"Sample review\". And it should be shown just below the title ‚ÄúReview for ...‚Äù. 1) Add 'visibility' column to responses 2) Add new Table 'sample_reviews' 2. Mapping of Reviews and Assignment: The example reviews can either be taken from an assignment of the current course or it could be from an assignment from a previous course. One idea is that when clicking to ‚Äúmake this review an example‚Äù, it will link to a page where you can select an assignment to which you have access (the same as the list of ‚ÄúAssignment‚Äù in the tree_display), then the example review will be shown to all participants of that specific assignment. 5. To allow instructor to select among the public reviews to shown as examples to all students a button 'Mark as an example' in the popup views. Changes corresponding to this is made in /app/views/popup/team_users_popup.html.haml 5. To enable students to see the example reviews, a link Sample reviews is added in the Other's work page. As a Student (Scenario 1): Student giving consent to make their review public 1. Log in. 4. Click on any assignment for which the review has to be submitted. 5. Assignment task page is displayed. 6. Click on \"Other's work\" to open the reviews summary page (at /student_review). 7. Chose to review any of the teams' assignments that are displayed. 8. Select a team for review and fill in the review. 9. Before submitting the review, select the checkbox that says \"I agree to share this review anonymously as an example to the entire class\". 10. After clicking on the submit button, the review submitted has been made public. As a Student (Scenario 2): Showing all the available sample reviews for respective assignment 1. Log in. 4. Click on any assignment for which the review has to be submitted. 5. Assignment task page is displayed. 6. Click on \"Other's work\" to open the reviews summary page (at /student_review). 7. Below the heading \"Reviews for ...\", click on the \"Sample reviews\" link. 8. This opens a page where the student can view all example reviews for that assignment. 5. Displays a list of reviews submitted by students. 7. Displays the summary of reviews submitted by that student, with a \"Make as an example\" button on the right of every review. 8. Click on \"Make as an example\" for the intended reviews, which opens a popup that displays a list of all assignments that are a part of the instructor's courses. 9. From this list select all assignments for which the review has to be shown as a sample. 10. Click on 'Publish Sample Reviews' after selection (this closes the popup). 11. Navigate to view reviews of that particular assignment and click on \"Sample Reviews\". 12. A new page is opened that lists out all the sample reviews of the assignment. The first set of tests are for testing scenario of i) a student making his review public/private and i) student viewing the sample reviews. The second set of tests are for testing i) instructor marking a review as an example and ii) selecting the assignments to which the reviews has to be shown.", ["This is a very good description of the changes made to the code.", "This would have been better if the code was more readable, but the code does describe the changes well.", "The design doc is very readable, and the screenshots are very well organized.", "However, the code snippets are too long, and it would be better if the code snippets were separated into sections.", "For example of that However, the code snippets are too long, and it would be better if the code snippets were separated into sections : the screenshots should be separated into two sections."], [1.0, 1.0, 1.0, 1.0, 1.0]], "50": ["Keeping this in mind our code is set to work under the following conditions: 1. Assignment teams created for an assignment without topics 2. Mentors ( Instructors and TAs ) are only assigned to assignment teams if they have been added to an assignment as participants We've created the following <link> to demonstrate the added functionality. As well as the following <link> which demonstrates what happens when teams are created when no mentors have been added as participants to an assignment. 1. Assign a TA or instructor as a mentor for a team created for an assignment without topics. Do not put email code in the Team class). <link>. Our implementation begins when an assignment team is created. If the assignment is associated with a topic, the created team will not be assigned a mentor. This hash is created from the TAs and instructors added to the assignment as participants. The keys of the hash correspond to the mentor's participant id while their values are the number of times the mentor has been assigned to mentor teams. The mentor with the lowest number of assigned teams will be the next mentor assigned to a newly created team. Once the team is assigned a mentor, an email is sent out to the mentor and students in the team to notify them of their mentor assignment. First Design: <image> Ultimately we were able to implement the following design: Final Design: <image> We created the following assignment_teams_mentors table with the following connections to existing tables. The new table created is responsible for storing all the mentors assigned to the various teams created. This column will help determine what TAs and instructors can mentor for a specified assignment. Currently instructors see the corresponding view when looking at teams associated with an assignment: <image> Our team proposed adding an additional \"Mentors\" column in the instructor view: <image> Currently students see the corresponding view when looking at their team for an assignment: <image> Our team originally proposed to add an additional \"Mentors\" section in the student view: <image>. The assignment_team_mentors table is responsible for storing all the mentors assigned to the various assignment teams created. 1.2. Created a can_mentor column for the participants table in order to be able to know who was a mentor and who was a student. <image> Models 1. assignment_team_mentor.rb 1.1. Responsible for ensuring mentor with the least number of teams mentored, gets assigned to the next team created. 1.2. Started to add mailer functionality for notifying the mentor assigned. This ensures a team only has one team mentor. This provides the flexibility of a potential mentor added as a participant to an assignment, to mentor multiple teams created for an assignment. <image> Controllers 1. teams_controller.rb 1.1. The following code was added within the create method. 1.2. Calls on AssignmentTeamMentor to assign mentor for instructor created teams. Will generate notice if unable to assign mentor to recently created team. <image> 1. 1.1. The following code was added within the list method. 1.2. A hash is generated with the assigned mentor of each team. <image> 1. student_teams_controllers.rb 1.1. The following code was added within the create method. 1.2. Calls on AssignmentTeamMentor to assign mentor for student created teams. Will generate notice if unable to assign mentor to recently created team. <image> 1. 1.1. The following code was added within the view method. <image> 1. teams_user_controller.rb 1.1. added code to send the email when a user is added to a team to the mentor. <image> 1. views/tree_display/_row_header.html.erb 1.1. displays either mentor assigned or \"No mentor assigned\" for team level. <image> 1. views/student_teams/view.html.erb 1.1. responsible for displaying to a student the mentor assigned to their team for an assignment. <image>. This button is how we decide if we need to assign mentors to a team. As an instructor we were able to confirm the following UI changes after mentors were assigned to teams: <image> As a student we were able to confirm the following UI changes when a mentor has been assigned to their team: <image> The following <link> further expands on this UI testing. As an instructor we were able to confirm the following UI changes after teams were created when no mentors had been added participants: <image> As a student we were able to confirm the following UI changes when a team was created without mentor participants for the assignment: <image> The following <link> further expands on this UI testing. 1. Providing ability to manually select the mentor for a team created. <image> 1. Refactor email functionality code and continue to develop to allow for the assignment team members to be notified of new assigned mentor or any other added members. <image>. <link> <link> <link> <link> <link>.", ["Very good description of the changes made to the code.", "Good description of how the code is implemented.", "It is clear that the code has been changed, but the code is not clear how the changes are described.", "the code is not described in any detail, and the code would have been helpful to explain the code changes in more detail."], [1.0, 1.0, 1.0, 1.0]], "51": ["Expertiza provide the function for user to request an account, but the function is not perfect. It will enable Expertiza to handle the pending request for super-admin and add institution for user. 1. Currently, a new user can only choose institution from the dropdown. The new user should be able to add a new institution. 2. A place where a new user to write a brief introduction is needed in this page. 1. After super-admin or admin approves the request, make sure the record does not disappear on the page. And there should be an email send to email address offered by requester. 1. Modify the test of request new user method. 2. Add a new option for the drop-down bar of institution in the new user request page. 3. Add a new textarea in the new user request page, to input a new institution and introduction. 4. Add validation for new institution new institutions and introductions. 6. Add a new button on the layout. 8. Enable the system will send an email after the request is processed. So we need to add a new column for request_user table. The new table will be shown below. <image>. <image> <image> 1. Name: Instructor or Teaching Assistant request a new account 2. Actor: Instructor or Teaching Assistant 3. Other Participants: None 4. Precondition: None 5. Primary Sequence: 1. Click on ‚ÄúRequest account‚Äù. 3. Fill in a user name. 6. Select an institution. 8. Click on ‚ÄúRequest‚Äù. 2. Fill in the institution name. 1. Name: Admin or Super admin view list of new account requests 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza. 3. View the list of new account requests. 1. Alternative Flow: None 1. Name: Admin or Super admin accept a new account request 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza. 3. Select a request. 1. Alternative Flow: None 1. Name: Admin or Super admin reject a new account request 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza 2. Click on the link ‚Äú/users/list_pending_requested‚Äù. 3. Select a request. 1. Alternative Flow: None 1. Name: Admin or Super admin send an email to applicant 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza 2. Click on the link ‚Äú/users/list_pending_requested‚Äù. 3. Select a request. 4. Click on the email address. 1. Alternative Flow: None. <code> <code> <code> <code> <code>. <code> <code> <code> <code>. Below are the mock-up screens that explain ‚Äúnew account acreation‚Äù functionality in Expertiza. 1. 1.New user should click ‚Äúrequest account‚Äù for requesting a new account, then redirect to the ‚Äúrequest new ‚Äù page. <image> 1. 2.After redirect to ‚Äúrequest new ‚Äù page, new users should enter their information, includes role, name, e-mail and institution. We can enter our new institution in this textbox. The email address is clickable. <image> 1. 5.If we click the email address, the email editor will pop out. <image>. In the first part, we test the request account feature. Finally, we test if the new user can signin with new account and password. 1.Now in the new user request page, the user can add a new institution by choose 'Other' and input their own institution. <image> 2.The new institution is able to saved into institutions table as a new record. <image> 5.The administrator can access the '/users/list_pending_requested' url via ‚ÄúAdministration > Show‚Ä¶>new requests‚Äù menu <image> The admin can access the '/users/list_pending_requested' url via ‚ÄúAdministration > Manage>new requests‚Äù menu <image> 6.‚ÄúEmail Address‚Äù column in /users/list_pending_requested page clickable. <image> <image> 7.After super-admin or admin approves the request, the record does not disappear on the page. <image> 8.There is be an email send to email address offered by requester.And for super_admin and user. <image> <image>.", ["The writeup is very good, but The writeup could have been better.", "The writeup would have been helpful to have a bit more description of the changes made.", "The description of how the test plan is implemented is not clear.", "Also, the description of what is done is not very clear.", "It would be helpful to show the code snippets, and explain what is being done."], [1.0, 1.0, 1.0, 1.0, 1.0]], "52": ["It also makes it easy for the instructor to add a new topic to an assignment/project, create a new project and add students to it. This helps in improving the existing work and also provides a new way to learn. In Expertiza, user and instructor accounts are currently created by existing super administrators, instructors or TAs. For new users to access the system and experiment the features offered by Expertiza, a ‚Äúdemo-like‚Äù feature needs to implemented. The following are the set of requirements that needs to be catered with this feature: 1. Allow people to request instructor accounts over the web. This feature should also have security features such as Captchas to help avoid account creation by bots. 2. When a user account is created over the web, the super-admin should get e-mail regarding the same and also the user should be notified upon approval/denial (if denied, then reason should be specified). 3. Currently, Expertiza consists of a lot of entities that can be made publicly visible to all other users in the system. 4. A user who creates an account over the web should be pointed to an instruction page and/or video on how to create an assignment and register students for it, etc. Once a user wants to register and try the features of Expertiza, upon opening the website, one can register by filling up the form and click the register button. Once the user requests for an account creation, the super admin receives a mail informing about the request with the name of the requested user. The super admin shall then, look for the details of the user in the Review Requested Users tab and can either approve/decline the request. Once the super admin approves the user request, the user gets a mail notifying that they now have the permission to access the features of Expertiza. A temporary password in clear text is also sent in the mail for login. If the request is rejected, then the reason should be mentioned in the reason column of the form. But there is no mail sent to the user regarding that. Needs permission from super admin‚Äù that can be seen on the login page if an unregistered user tries to access the features of Expertiza. Once the user requests for an account, upon clicking the request sign up , he/she is automatically redirected to the instructions page with the video tutorials explaining various features of Expertiza and on how to access them. In _login.html.erb a new button called Request Sign Up was added for the new users to register. The register page will look as above. On clicking Request , a user will be redirected to a page like below: <image> User will have to fill up all the required details and request a signup. When a super administrator logins to his account he can go to Manage/users/review requested users menu as shown below. We have put the review requested users in the menu, rather than a separate tab, making it more flexible to integrate some more features under the users option later. <image> Super Admin can either approve/reject a user. The view for this page would be as shown below. This is an entirely new page wherein, the super admin can also mention the reason for a rejection of a request and view the entire list of requested users. <image> In addition to the above files a new file in instructions, named home.html.erb is created which will have all the videos explaining how Expertiza works. This is to the new user to request for an account in Expertiza and also mail all the super admins about the new user request. Upon the request, this method uses the user parameters (fields entered in the request sign-up form) and a status of 'Under review' is assigned by default. On verifying the captcha, the super admin(s) gets a mail regarding the request with the user name and the requested user is redirected to the instructions page. This is for the super admin to either approve or reject the user request and send a mail to the requested user if his/her account is created. The mail also contains a password for the user to login. We have created a new table called requested_users with table description that is similar to users . The status column, which isn't present in the users tables indicates the approval/rejection of the request of the user. Though the description of this table is similar to the users table, we thought it was better to go with a new one, keeping in view of the following advantages: 1. The users table had lot more entries which weren't needed for the requested user scenario and also vice-versa. The entries like status and reason of the requested_users table weren't necessary once the user request has been approved. 2. The users table was accessed at many places in Expertiza, so any change in that would have to be reflected at all places. It was comparatively easier to manage with a new table rather than using the existing one. The description of the table is as follows: <image>.", ["The description of the changes is good, but the changes could have been better.", "the changes would have been helpful to have a more detailed description of what was done.", "The description of how the new code works is not clear.", "I would have liked to see a screenshot of the code, and a description of why the code was changed.", "Also, the code is not described in any detail, and the code would have helped to have more information about the changes."], [1.0, 1.0, 1.0, 1.0, 1.0]], "53": ["Students submit their work and review other‚Äôs work and provide feedback. Wiki link: <link> Github link: <link>. 1. The current Expertiza UI for reviewing uses a simple html text area for each criterion, which starting to look dull for the users. 2. Moreover, the current form still uses plain old HTML form that sent the text entered in several text areas to the controller only after the user clicks the submit button. Moreover, we found that the review text contains misspelled words and incorrect use of English grammar that makes the review hard to understand. Updates in requirements as of 11 November, 2017 4.Replace the text area with a rich text editor that allows user to customize the fonts, bold, insert link to images / videos (possibly generate a thumbnails of the links). Approach: We have replaced text area in the review form with <link> rich text editor. There are many rich text editors available like <link> , <link> , etc. Usage 1. Gem used: <link> 2. Behaviour of TinyMCE can be modified by making changes in config/tinymce.yml 1.1. Plugins embedded: 1.1.1. Link : Allows a reviewer to link external resources such as website URLs 1.1.2. Media : Adds the ability for reviewers to be able to add HTML5 video and audio elements to the editable area. 1.1.3. Code Sample : Lets a reviewer insert and embed syntax color highlighted code snippets into the editable area. 3. Initializing TinyMCE: To initialize tinyMCE in the new text area add the \"tinymce\" class as mentioned in the below example and ensure it has a unique ID. <code> Then invoke the tinymce helper to initialize TinyMCE: <code>. Approach: We have replaced drop-down used for giving scores in the review form with <link> . Now reviewer has to select a number of stars for each review questions instead of selecting a value from drop down. 3. No logical changes have been done to embed this feature in the form. Usage 1. bower install <link> . 2. Initializing star rating: To initialize star rating in the new select box apply the javascript as mentioned in the below example and ensure it has a unique ID. <code>. Approach: The current design of the system clears all the data in the text fields once a session for the user has been ended. We are making an AJAX call to save user entered text from the current text box as soon as user switches to next text box. This AJAX call is made every 10 seconds to save the content, also the user gets to see the green tick showing the last time when his user entered text has been saved. UTF-8 :To solve UTF-8 encoding problem, we can make a form accept only UTF-8 characters by using an attribute of the form tag. But most of the characters, including a lot of characters from languages other than English, are present in UTF-8 character set so the application will work perfectly fine on just allowing UTF-8 characters in the text box. Below is the code snippet on the same. <code> Spellcheck : Since we have used rich text format, spellcheck is being handled by the same and we have just enabled the spellcheck option for the browser. Below screens are for criterian based review forms. We have used DRY principle, we have made changes in the existing code and even used the same javascript functions. Manual test cases plans: 1. Field Widths ‚Äì If the screen contains text boxes that allow data entry and the width of data entered does not exceed the width of the form. 2. Save and Submit Review ‚Äì If the screen has the save and submit review buttons. 3. Cosmetic Inconsistencies ‚Äì The screen look, feel and design should match the other screens in your application. 4. Spelling ‚Äì Ensure that you have test cases that look for spelling errors. 6. Screen Font Type - Ensure that the screen font family matches from screen to screen. 7. Backlink - Ensure that backlink is present on the screen. 8. Review draft is saved - Ensure that user draft version is saved automatically in every 30 seconds. 9. Star rating- ensure that rating stars are displayed on the screen in place of the select dropdown. Automation testing: We are keeping the same test cases since as per our implementation to improve the review UI, we have not changed anything on the id and the class elements of the javascript, we have just changed the CSS elements, so basically, we have not broken the existing test cases. 1. Embedding more plugins in TinyMCE like inserting images, special characters, tables, etc. 2. Embedding code snippets from GitHub to enable the reviewer to link authors code using 'permalink' feature of GitHub. 3. Using multi-step review form having one review question per step. This will improve the user experience while reviewing others work. Demo <link> .", ["Very good description of the changes made, and the code snippets.", "It would have been helpful to have more detail on the code changes.", "The code snippets are not very detailed, and It would have helped to have a more detailed description of what was done.", "Also, the code snippet on the test plan is not explained well.", "I would have liked to see more detail about the code."], [1.0, 1.0, 1.0, 0.0, 1.0]], "54": ["Expertiza has two kinds of review strategies, as specified in the Review Strategy tab of assignment creation: Auto-selected Reviews are not preassigned, but when a student comes to do a review, (s)he can select from the reviews that are available at that point. Instructor-selected Instructor decides in advance who reviews whom.Until now, when the strategy is auto-selected, there has been no maximum on the number of reviews a student could select. So students can review as many topics as they want. Set a maximum on the number of reviews a student can choose with auto-selected reviewing. This requirement needs changes to the instructor view and student‚Äôs review page. Instructor view changes While creating the assignment, instructor should be able to specify maximum on the number of reviews done by each student. We added checkbox for this selection under Review Strategy tab of instructor view. If the instructor selects this checkbox, he‚Äôll be prompted to enter the value for the maximum reviews allowed for each student. There are no changes to assignments controller. Instructor view looks as shown below. <image> Requirement 1 - Instructor View Changes Student Topic Review page changes Students review topics page is displayed by list method of Student_review_controller . <image> Requirement 1 - Student View Changes. If the student selects some topic and want to drop for some reason, he/she need to contact instructor to drop that review. Student Topic Review page changes Students review topics page is displayed by list method of Student_review_controller . <image> Requirement 2 - Allow students to drop reviews <image> Requirement 2 - Allow students to drop reviews only if Review has not been submitted. While creating the assignments instructor can allow students to see their teammate score by selecting Show teammate reviews? But this option shows both the scores and teammate reviews on the grades/view_my_score page. Instructor view changes General tab of assignment creation has \"show teammate reviews ?\" option. \"show teammate scores ?\" , \"show teammate reviews?\" . \"Show teammate reviews ?\" This is how instructor view will change after implementation. <image> Requirement 3 - Instructor View Changes Changes to students view score page Code to display teammate reviews and scores is present in the /views/grades/view_my_scores file. If the instructor only selects show teammate scores? student will be able to see aggregate teammate score as shown below. <image> Requirement 3 - Show aggregate teammate scores Students will be able to see only reviews if the instructor selects show teammate reviews ? during assignment creation. <image> Requirement 3 -Show only teammate reviews Students will be able to see both the score and teammate reviews if the instructors checks both boxes from assignment configuration page. There is no option that lets reviewers see others‚Äô reviews of the same work after they submit their review of that work. Instructor view changes While creating the assignment, instructor should be able to specify if students should be allowed to see reviews done by other students for the same work. <image> Requirement 4 - Instructor view to allow students to review others work Changes to student_response controller and views The View link displays the submitted/in progress reviews of the student and is handled by the list action of the StudentReviewController (student_review_controller.rb) and the associated list view is \"/views/student_review/list.html.erb\" file. We plan to add another link Other Reviews to the partial _reponses view. This link would be visible only if the show_other_reviews option has been enabled by the instructor and the review for the topic has been submitted by the student. This link would be next to each of the Review Topics submitted by the student of that assignment. <image> Requirement 4 - Student view - link to view other submitted reviews <image> Requirement 4 - Student view - Reviews submitted by other reviewers for the same work. The existing implementation of expertiza doesn‚Äôt provide a student the option to not see review scores or the text feedback. Sometimes a student might just want to see the scores and not the reviews and other times might want to see the reviews and not the scores. If the value is set to 0 then the student can view both scores and feedback, if the value is set to 1 then the student can view only the scores and if the value is set to 2, then the student can view only the feedback. Student View Task page changes In the student task view, the page where the student can submit work, view scores, review others, etc. we added a new option for the student to change review settings. Clicking on that link takes the student to the change_reviewsettings page where the student can choose to either view both scores and feedback or just scores or feedback. Review page changes In the partial to view the reviews _review.html.erb, conditions have been added to check the value of the reviewsetting variable. Based on the value of the variable, either both the scores and feedback or just the scores or just the feedback is displayed to the student.", ["Very good description of changes to the code.", "It is clear that the changes are not related to the changes to assignments controller.", "the code is not described in any detail, but the code is clear what changes have been made.", "I would have liked to see more detail on the changes, and the changes that were made to the view_my_scores.", "Also, the code is very short, and the code would have been helpful to have a description of the changes."], [1.0, 1.0, 1.0, 1.0, 0.0]], "55": ["Expertiza uses the jquery‚Äôs date-time picker widget for setting dates and times on various views. Over the years, different developers used different version and formats of the date-time picker due to which there are inconsistencies across the expertiza project. The main problem with the date-time picker is that the widget and the date-time formats used across the expertiza project are not consistent. Moreover, the JQuery based date-time UI widget itself is on version 0.8 which is extremely old and no longer consistent with expertiza's looks and feel. The primary task of the refactor was to find, refactor and make the date-time picker consistent at all places while exploring the possibility of updating the date-time picker to a newer version or completely replacing it by another better widget which works in conjunction with modern javascript libraries. The first step in the approach was to explore the current functionality of existing date time picker. According to our solution, the existing library needed to be replaced by the new gem. Further, necessary syntactical changes were made respective to the new gem. 1. <link> Moment.js is a lightweight javascript date library for parsing, manipulating, and formatting dates. The existing date-time picker widget was replaced by the new date-time picker in the following views: 1. Edit and create assignments - app/views/assignments/edit/_due_dates.html.erb This contains fields to set the submission and review deadlines for different rounds. The existing JQuery call to the date time picker was replaced by the call to the new widget. The form includes a selection of start date and end date for signup. Following changes were made to the file: Before: <code> After: <code> 3. New survey creation - app/views/survey_deployment/new.html.erb The page contains the form to allow the creation of new surveys. The survey start and end dates can be set using the form. The old code used two separate inline onClick event to call the same DateTime picker. Before: <code> After: <code> 4. Version logs - app/views/sign_up_sheet/_due_dates.html.erb The version logs file which is only accessible to the admins uses the date tie picker to filter the search results using the start and the end date. Following changes were made to the file: Before: <code> After: <code>. The old jquery based date-time picker was replaced by a new modern bootstrap based date-time picker as shown in the pictures below. The new bootstrap date-time picker widget also has different styles which can be implemented by changing the code as per the documentation <link> . Old Date-Time Picker <image> New Date-Time Picker <image>. This refactor was mainly concerned with the date-time picker widget UI. Thus most of the testing was done manually as automated testing cannot be used to test the widget. After refactoring each of the pages using the date-time widget, rigorous testing was done to check if the date-time picker selected the right date in appropriate formats. Automated testing was performed to test the models and controllers which relied on the date-time picker for its correct functioning. The new date-time picker widget was manually tested for correctness using the following manual steps: 1. Create and edit assignments Login into instructor account -> Select Manage Assignments -> Click on the plus sign to the right -> Fill in the relevant details -> In the 'due dates' enter the submission and review deadline using the new date time picker widget -> Save -> Check if assignment with proper deadline is being created. 2. New survey creation Login into instructor account -> Select Manage assignments -> From the list of assignments select an assignment and select the 'assign survey' action-> Fill in the relevant details -> Enter the survey start and end date using the new date time picker widget -> Save -> Check if the survey is created with proper deadline. Also the datetimepicker feature with start date and end date detection should work for both admins and super-admins. <image> <image> <image>. <image>. ( <link> ) 2. GemFile.lock ( <link> ) 3. application.js ( <link> ) 4. application.scss ( <link> ) 5. assignments/edit/_due_dates.html.erb ( <link> ) 6. sign_up_sheet/_due_dates.html.erb ( <link> ) 7. survey_deployments ( <link> ) 8. _row_header.html.erb ( <link> ) 9. search.html.erb ( <link> ) 10. factories.rb ( <link> ) 11. versions_search_spec.rb ( <link> ) 12. list.html.erb ( <link> ). Github Repo: <link> Pull Request: <link>.", ["The writeup is very detailed, but the screenshots are not.", "The writeup would have been helpful to have a more detailed description of the changes made.", "the screenshots are very good, but the screenshots are not very detailed.", "the screenshots are just a few lines of code, and the code is not clearly described.", "I would have liked to see more detail on the changes.", "Also, the screenshots should have been more detailed."], [0.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "56": ["The Expertiza project is software to create reusable learning objects through peer review. Expertiza is an open source project and is based on ‚ÄúRuby on Rails‚Äù framework. Expertiza should be able to distribute surveys to the users. The survey can be one of the following: 1. Course survey (all the participants of the course can take it). 2. Global survey (all the users in Expertiza can take it). The survey can also be targeted (the admin can specify a group of people who will receive this survey). The three kinds of surveys in this project are: 1. 1. Assignment Survey questionnaire 2. 2. Global survey questionnaire 3. 3. Course evaluation questionnaire. 1. Survey questionnaire should be a subclass of questionnaire. 2. The creation, editing, filling in, and checking that all the questions have been answered survey should be similar to the procedure used for other types of questionnaires (e.g. peer-review questionnaires). 4. We should use the same controller method to take the survey as to fill in the peer-review, namely, response_controller. 5. We should use the same code to display the existing survey responses as to display the responses in peer reviews. 6. For each course or assignment, the admin/instructor should be able to create a survey and have some (or all) of the participants receive the survey. Assignment Survey questionnaire, Global Survey questionnaire and Course Evaluation Questionnaire are the existing models which are subclasses of questionnaire. Their display types are survey, global survey and course evaluation respectively. <image>. 1. There is a constraint that the survey has to be filled in using the same controller method as used for filling in peer review, namely response_controller. Also, the same code has to be used to display the existing survey responses as to display the responses in peer review. 2. The response_controller can be used to make sure that the survey can be taken only once by each user, depending upon the survey type and the users who are allowed to access (can be listed using 'action_allowed?'). The answers can be saved using the 'saving' method. Also, the responses can be viewed once, the survey is submitted. 1. Instructor or admin both can add survey for any course or assignment 1. The creator would be able to select the participants based on the scope of the survey, that is, all the students or all the Expertiza users or specific group of people. 2. These questions will be by default added to every survey the user creates. 4. Or, there can be option of separating the global survey and course survey. The quiz taker will take the global survey first and then the course survey. 3. In our part of project implementation, there is no need to incorporate any changes to the Assignment Questionnaire. 1. Adding columns to the 'Assignments' table: survey_id and global_survey_id. 2. Adding columns to the 'Course' table: survey_id and global_survey_id. 1. We update 'survey_id' and 'global_survey_id' in the 'assignments' table. 2. This requires checking if any entry for 'survey_id' is already present: Case TRUE: Warning to user 'Update to an existing survey'. 1. The survey is mapped to participants through 'participants' table. 2. In 'participants' table: <code> 1. Using the 'type' we can get the type of object i.e. assignment or course, and then using parent_id the particular instance of that object can be mapped to the survey and listed for the user/participant. 1. There is no explicit assigning of surveys to participants. Updating the new columns in 'assignments' and and 'courses' table is sufficient for assigning the surveys. submitted or not submitted, the user/participant can view or update, respectively, the surveys. 1. Checking the 'assignments' or 'courses' the participant has enrolled in. 2. Checking if the 'assignments' or 'courses'have active surveys (survey_id != NULL). 3. If participant has already responded to the survey, only 'View' option is available. 1. There is a global table for all the responses in Expertiza-'response_map'. All the responses in expertiza are saved in this table. 2. When participant responds to the survey, based on the survey type, the entry in the response_map is: <code> 1. The other entries are: <code> <image>. 2. Click on Manage -> Questionnaires-> Survey / Global Survey/ Course evaluation. 3. Create a new Survey/ Global Survey/ Course evaluation filling in the parameters asked for. <image> Login as student: 1. The course survey is for all the students, whereas the global survey is for a few random students using Expertiza. 2. Take the survey visible through your account.", ["The writeup is very readable.", "The writeup is very well organized, and the code snippets are well organized.", "The only thing that could be improved is that the code for the survey is not described in any detail.", "This is a good example of a design doc, but This would be helpful to have more detail on the design doc.", "Also, the code is not explained in any way.", "I would have liked to see more detail about the design docs."], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0]], "57": ["A staggered-deadline assignment is an assignment in which different topics have different deadlines. It can be pretty useful if different topics within an assignment can have different deadlines for submission as well as reviews. Problem 2: Manual submission and review deadline entry required for all topics Currently system requires instructor to enter submission and review deadlines for all topics. Currently this is happening, but only in case of assignments which do not have staggered deadlines. If the assignment is not a staggered deadline assignment and if its submission deadline has passed, then we prevent students from signing up for any topic in that assignment. <code> We will have to replicate a similar logic for staggered deadline assignments. The problem here is that for staggered deadline assignments, different topics might have different deadlines. <code> First we check if the topic has a specific different deadline set by the instructor, and if not, then its deadline will be the same as the common deadline for the assignment. We do this only for staggered deadline assignments as for the other assignments, this check has already taken place. Our requirement is to provide the instructor with the option to select a relative date for the submission review deadlines based on the Round1 submission deadline. The instructor would however like the ability to manually enter a custom date according to his needs. One way of dealing with the above problem would be to provide an option for the other date fields for a given assignment to chose a relative date based on the initial submission date in addition to the ability to override and manually enter a custom date. Example: 3 days after Submission deadline, 6 days after re-submission deadline. The first step will be to make this assignment a staggered deadline assignment. For doing this edit the assignment and under the General tab, make this a staggered deadline assignment. Part1: Instructor wants to assign default deadlines to a staggered assignment In this case, the default deadlines for the assignment will be filled automatically based on the submission date for Round 1. In this case no further input from the instructor is required apart from selecting the round 1 submission deadline 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. Part2: Instructor wants to enter custom deadlines for a staggered assignment In this case, the instructor has two options. He can either chose a deadline from a list of other relative deadlines from the dropdown menu for a particular round or all rounds, or he can decide to override the system enter a date manually by selecting the ‚ÄúCustom Date‚Äù option. 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. 6. Change all the deadlines for the other rounds according to your requirements by choosing the \"Custom Date\" option Part3: Instructor wants to enter a custom deadline only for a particular round In this case, the instructor can set the submission deadline for round 1. This would result in all deadlines being populated relatively according to the pre-set values. The instructor can then, if need be, modify the deadline for a particular round by either selecting a different relative date or by entering a custom date manually. 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. 6. Change all the deadlines for the necessary round by either entering a manual date or by choosing a different relative date from the dropdown. 1. Login as instructor6 2. Go to courses tab 3. For CSC/ECE 506, Spring 2014, go to edit assignments and choose New problems B 4. Edit this and make it a staggered deadline assignment. Also change the review due dates for the first round to any date beyond today 5. Now go back to assignments page and go to view review report for this assignment 6. We focus on student 5059 for this case. 7. This student has one review, go ahead and grade this review. 12. Now revert back to instructor6 and again go to view review report for this assignment. 3. Revert back to instructor6 and again go to view review report for this assignment. We created 4 new topics for this assignment. Testing for modification of dates in staggered deadlines. Case 1: Attempting to enter a date for a round that was before the previous round. Case 2: Attempting to enter a date for round1, round2 or round 3 that is out of invalid (Deadlines being before current date). Case 3: Entering an incorrect date when manually entering a deadline for a particular round for a staggered deadline.", ["The writeup is very detailed, and The writeup explains the changes well.", "The writeup is not clear what the problem is, but the problem is clear that the design doc is not concerned with the issue.", "the design doc should have explained the changes to be made, and how the design doc would be implemented.", "Also, the design docs should have been more detailed, so that the reader could see the changes and the code.", "the reader could see the changes and the code should have described the changes that were made, but the reader could see the changes and the code didn't.", "I would have liked to see a description of the changes, and a screenshot of the code."], [1.0, 0.0, 1.0, 1.0, 1.0, 0.0]], "58": ["Expertiza is an online web application for educational purpose, and is developed using Ruby on Rails. Instructors are able to create, modify, delete and view assignments and students are able to form teams, submit assignments and make reviews using this application. The tree-display.js and its tree_display_controller.rb files are designed to allow Expertiza users to view their Assignments, Courses and Questionnaires at one place. This is the primary control page, as well as the home page for instructors on Expertiza which allows them to create, modify, delete and view Assignments. The primary problem with this is that both the files, due to their bulky and unoptimized methods, slow the rendering of UI on screen. The methods in these files can be studied and refactored to improve the overall performance of this controller and its corresponding UI. Moreover, any obsolete or unused methods can be removed and DRY principle should be implemented. This project mostly revolves around these 2 files, and would involve refactoring JavaScript more than Ruby on Rails. There may be unused methods in the controller or java script file due to previous development, maintenance and refactoring. Loading speed of the web page is slowed down by repeated interface with database regarding to same variables but by different methods. To find out unused methods in dynamically typed language like Ruby is difficult, thus our team is focusing on the suspicious methods which have neither comments nor references showing in github. All suspicious methods are tested and following shows the confirmed used methods as well as their functionality. goto_... Methods are called when the instructor clicks on the corresponding node under the \"Manage\" menu (e.g. \"goto_quetionnaires\" is called when clicking on \"Questionnaire\" node.) and the user will get redirected to corresponding pages. confirm method is called when the instructor tries to delete a course/assignment/review and chooses \"yes\" at the confirmation page. folder_node_ng_getter functions to render json of the node. (e.g. Returning all the courses data when clicking on \"Course\" node.). 1. We found one unused method bridge_to_is_available and delete it. <image>. 1. We simplified the month string representation in file app/assets/javascripts/tree_display.jsx <image> 2. We found the goto_* functions in file app/controllers/tree_display_controller.rb are not necessary and can be replaced with the goto_controller(name_parameter). However, they are called outside of the files in our scope and we did not modify them for now. <image> 3. We found a confusing variable name \"res2\" in file app/controllers/tree_display_controller.rb and changed. <image> 4. We found two confusing method names \"update_is_available\" and \"update_is_available_2\" and that \"update_is_available\" is used for checking the accessibility of users who are tas/owners while \"update_is_available_2\" is used for checking the accessibility of user who are instructors. <code> is changed to <code> and <code> is changed to <code> 5. We found three confusing method names \"initialize_fnode_2\" and \"children_node_2_ng\" and that \"res_node_for_child_2\" for corresponding nested chidren nodes (the subfolders in the tree display). <code> is changed to <code> , <code> is changed to <code> and <code> is changed to <code> 6. We renamed a few variable and method names related to update_tmp_obj <code> is changed to <code> and <code> is changed to <code>. The tree_display.js and tree_display_controller.rb are mainly related to the \"Manage\" tab and its child nodes. Thus, the following steps are needed to test the functionality from UI: 1. Log in as an instructor. 2. Click on the \"Manage\" tab as well as its child node on the tool bar and to test if they are redirected to the correct page. (Child node means \"Users\", \"Questionnaires\", \"Courses\", etc. under \"Manage\" menu or \"Review Rubrics\", \"Metareview Rubrics\", etc. under \"Questionnaires\" menu. And the reason calling it \"child node\" is because it is the variable name used in code.) 3. Click on the displayed contents to test if the details can be displayed properly. We passed all Travis CI build and Codeclimate checks.", ["The writeup is very good, but The writeup could have been better if The writeup had more description of the changes made.", "The writeup would have been helpful to have more information about the changes, and to explain the changes.", "The code snippets are not explained well enough.", "The code snippets are not clearly explained.", "I would have liked to see more information on the changes to the code.", "Also, The code snippets should be shown in a more readable format."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "59": ["E1472: Connect changes to score model with changes to score views Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.1.1.1.1. <link> 1.1.1.1.2. <link> 1.1.1.1.3. <link> 1.1.1.5. <link> 1.1.1.6. <link> 1.1.1.7. <link> 1.4. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.5. <link> 1.1.1. <link> 1.1.2. <link> 1.6. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.7. <link> 1.8. <link> 1.1.1. <link> 1.1.2. <link> 1.9. <link> 1.10. <link> 1.1.1. <link> 1.1.2. <link> 1.11. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.12. <link> 1.13. <link>. One of the Expertiza features is to report scores to both students and the instructor. The student can see the feedback from other students, such as the max score, the min score and the average score. Current System (After Refactoring Grades_controller): <link> <code> Student: user1600 and user1601 Password: test Original System (Before Refactoring Grades_controller): <link> <code> Student: user1600 and user1601 Password: test All our test result based on the following test cases on expertiza, please follow these step to get it. <code> Student: <code>. <code>. <code> <code> <code> <code> <code> <code>. <code> <code>. <code> <code>. <code>. <code>. <code>. <code>. <code>. The view method reports everyone‚Äôs grades to an instructor, and the view_my_scores method reports peer-review scores to a student. The grades_controller class is responsible for displaying grades to students (via view_my_scores) and instructors or Teaching Assistant (via the view method). <image>. 1. view method : handle the functionality of viewing the assignments of the whole class. 1. view_my_scores : take care of displaying the scores pertaining to an assignment to a single user. <image> The figure above mainly illustrates the process of viewing scores for different actors. The instructor and teaching assistant are able to view scores of all the team and could see the reviews of a selected team. Student actor can see his own scores and reviews. For example, when a student want to view his/her grades, there must be something in the database (precondition). <image> The RScore class stores the variables maximum,minimum, average review scores. Create rscore class in models (rscore.rb): <code>. Before: (views/grades/_participant.html.erb) <code> After: (views/grades/_participant.html.erb) <code>. Before :(views/grades/_participant.html.erb) <code> After :(model/assignment_participant.rb) <code>. At the beginning of the final project, the function of viewing scores is very slow by students and instructor. 1. Modify get_assessments_for method in response_map.rb After doing this, the time cost of view function decreased by more than 90% Before Refactoring: <code> After Refactoring: <code>. <table> 1. Original Time for Instructor to View all scores <image> Original Time for Instructor to View all scores 1. Time for Instructor to View all scores after Refactoring <image> Time for Instructor to View all scores after Refactoring 1. Original Time for Student to View all scores <image> Original Time for Student to View all scores 1. Time for Student to View all scores after Refactoring <image> Time for Student to View all scores after Refactoring. <image>. <image>. <image>. <link> <link> <link> <link> <link>. We will stick to the UI design of the grades view and see what else we can do to further improve the performance of the system.", ["The writeup is very good, but The writeup could have been better.", "The writeup would have been helpful to have more detail on the changes to the code.", "The design doc is not very detailed, and the screenshots are not very large.", "the screenshots are not large enough to show the changes, and the changes would have helped to have a larger font size.", "Also, the screenshots of the code snippets are not shown in the UI.", "that Also, the screenshots of the code snippets are not shown in the UI is a shame."], [1.0, 1.0, 0.0, 0.0, 1.0, 1.0]], "60": ["Expertiza is a web application developed using Ruby on Rails that serves as a peer-review system. The application allows students to submit and peer-review learning objects (articles, code, web sites, etc)<ref> <link> </ref><ref> <link> </ref>. It is an open source project and it's codebase is maintained in GitHub. We are contributing to Expertiza as a part of our Object-Oriented Design and Development's Open-Source Software (OSS) Project. Our goal in this project is to refactor the assignment_participant model . In this Wiki Page, we will explain the changes that we have made for the same. Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.4. <link>. The assignment_participant model is subclass of Participant model and is used to maintain the list of students/users participating in a given assignment. The changes that are needed to be done are described as follows:<ref> <link> </ref> 1. Rename methods prefixed with ‚Äúget‚Äù. 2. Move methods to appropriate file helper classes. 3. Move methods to appropriate models. 4. Remove unused methods 5. Use good Ruby style guidelines in the code. <references/>.", ["The wiki page is very detailed, but The wiki page does not explain the changes that were made.", "The wiki page is not clear what the changes that were made are, and the changes that were made would be helpful to have a more detailed description of the changes that were made.", "The code is not described in any detail, and The code is just shown.", "that The code is not described in any detail, and The code is just shown is a good example of how to describe the changes, but not how to explain the changes that were made."], [0.0, 0.0, 1.0, 1.0]], "61": ["response.rb is the class that manages the response to all rubrics in Expertiza. if someone fills out a review form, the instance of the review form is a Response. If someone gives feedback (a ‚Äúrejoinder‚Äù) to an author, that is a Response too. Or if someone evaluates a teammate contribution, fills out a survey, or takes a quiz, they are creating a Response. Note: Method display_as_html writes the HTML for displaying a rubric. This would ordinarily be view code, but it is used by so many different views that it is done here. Questions are written out in the order of their sequence number (anyone who creates a rubric can specify sequence numbers for questions). After all questions are displayed, there is a blank for an additional comment. <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing. When the get_maximum_score() function is called it takes care of the weight of the question. It multiplies the weight to the score and adds it to the final score. <code>. All the email code has been shifted to the mailers. Comments have been removed. <image> Auto selected Reviewing. response_helper.rb contains helper methods that display the questionnaires and rearrange questions so that the most frequently answered questions are at the bottom while the less frequently answered questions are at the top. Method is no longer being used in Expertiza and has been removed. Method is no longer being used in Expertiza and has been removed. <image> Auto selected Reviewing.", ["Good description of the changes made to the code.", "It is clear that the code has been changed, but the code would have been helpful to have more detail on the changes.", "the code is not very readable, but the code is well organized.", "I would have liked to see more of the code snippets, but I think the code is good that they have been shown."], [0.0, 1.0, 1.0, 1.0]], "62": ["According to the existing code workflow, the assignment of topics to teams are based on FCFS (first come first serve) basis, where a team which first signs up for a topic gets the topic while other teams are waitlisted on the same topic. Factors such as team size are not considered which are important while assigning a topic to the team and potentially can reduce many issues faced by the current system. 1. One student can sign up only for a single topic. In cases where many topics are available, a student is forced to choose a single topic among many available topics which can be a difficult task. 3. If all the teams choose a handful of topics among many topics, it would also result in unnecessary additions in the waitlist queue for those few topics resulting in a situation where all the topics are not uniformly distributed among all the teams 4. Before, signing up, if more than one student forms a team and if each student belonging to the same team tries to sign up for different topics, than those topics are allotted to individual students resulting in a situation where a team can hold more than one topic. The algorithm works by considering every team as strength of 1, representing the student in the team. After sign up the topic would be allotted to the team based on a lottery system where a team is randomly selected for every topic. the intelligent assignment of teams. This approach is based on two important factors: 1. Team strength 2. Priority order of the topics submitted by the team. An added advantage of this approach is that, unlike the previous system, the intelligent team assignment system allows each team to bid for multiple topics which increases the chance of every team getting at least one topic that they placed their bid on. Each team can place their bids in priority order, the priority of the bids are also considered while assigning topics to the teams. For example: If TeamA is up to its maximum strength and bids for Topic1 , Topic2 , Topic3 where Topic1 has the maximum priority then TeamA has larger chance of being assigned Topic1 , but if Topic1 is already assigned (to a different team which had equal probability of getting the same topic based on team strength and bid priority) then Topic2 would be considered for assignment followed by Topic3 . Thus the priority mentioned by each team is also an important factor for assigning topics to teams. 1. Initially, every student is a team of 1 member. Before the sign up process takes place, students can merge their teams to form a larger team. 2. It is preferred that the number of members in the team should be as close as maximum strength allowed for each team to increase the chance of winning a topic. 1. Every team is allowed x bids that they can use during the sign up process to select the topics of their choice. [The value of x is decided by the instructor using class strength, number of topics created for an assignment and maximum team strength allowed for that assignment.] 2. During the sign up process, the team can place x bids on x topics of their choice in a priority order. 1. As each team can place their bids on the available topics based on topic priority. Hence every team gets to choose more than one topic of their choice. 2. The teams are assigned topics based on modified <link> <ref> <link> </ref> algorithm which considers factors such as team size and priority ensuring that the topics are no longer assigned based on FCFS basis. This approach addresses the most important issue where a topic is not assigned to the team just because the team was late to sign up for the topic as compared to the other teams. This flow chart illustrates the \"modified stable matching\" algorithm used to assign topics to teams based on the strength of the teams(bidder) and the priority in which they bid for the topic. This algorithm takes two parameters as input 1. A list of teams which are un-assigned any topic 2. A hash of team and topics which were assigned Algorithm 1. Sort the list of teams in descending order of team size 2. For each team a.Get the team_size and topics that the team placed their bid on b.Arrange the topics according to the priority order mentioned by the team i. For each of the topic, check which team is assigned this topic and store its team strength in assigned_team_size ii. If the team which is assigned this topic is not up to maximum strength and if the ( team_size + assigned_team_size <= max_strength allowed for each team) then assign this team the topic. They can associate each bid with a priority. This would in turn start assigning teams with topics based on their bid preferences. The table bid is supposed to store all the bids on the topics with their priority. Current requirement is to have only one bid per topic by an owner. When the instructor starts the intelligent assignment of topics to teams, IntelligentAssignmentController triggers the assignment algorithm. The students interact with AssignmentTopicView which lists down all the topics for the assignment and allows students to bid for topics with priority.", ["The writeup is very detailed, but The writeup does not explain the changes made to the code.", "The writeup is not clear how the code is organized.", "the code is not described in any detail.", "I would have liked to see more detail on the changes to the design doc.", "Also, the code snippets are not explained.", "the code snippets are just shown in a list of the code, and it would be helpful to explain what the code snippets do.", "For example of that the code snippets are just shown in a list of the code, and it would be helpful to explain what the code snippets do : the team_size and topics that the team placed the team bid on b are not mentioned."], [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0]], "63": ["Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.1.7. <link>. <link> is an open source project based on the <link> framework. Expertiza provides a platform for instructors to create assignments and for students to set up teams to facilitate early communication and teamwork in these assignments. Expertiza also provides an environment where students can peer review other students, allowing these users to view feedback on their assignments in a timely manner. Expertiza supports submission across various document types, including the URLs and wiki pages. The following items were improved in the refactoring of the given file: 1. Long blocks of code converted into separate methods 2. Ambiguous variable names changed to meaningful variable names 3. Macros added to replace hard-coded values 4. Code clarity 5. Test Coverage. The Review Mapping Controller handles mapping a given group's assignment submission to students working in other groups for peer review. The controller handles items associated with routing submissions to reviewers, handling permissions for instructor review calibration, and controlling drafts or uncompleted reviews. Included in this controller is the ability for the instructor to specify the number of required reviews per student or the number of reviewers per team in order to have group submission automatically sent to all students' review queues. in automatic_review_mapping method, the following bits of code were added to separate methods: <code> The above was moved into the team_assignment method that assigns users to a new team. <code> Again, the above is a unnecessarily large 'if' block that could be moved to another method, one that was named validate_review_selection The following is the final block of code moved to another method from automatic_review_mapping: <code> This block was moved to the maps_strategies_for_artifacts method. Next, the assign_reviewers_for_team method was evaluated for refactor. The following blocks of code were found that seemed to go past simply what the name of the method entailed, so they were moved to other methods: <code> The above performs its own standalone operation, it's not needed in an already long method that has its own priorities. As such, it was moved to generate_insufficient_review_collection. <code> The above creates a new hash table and performs standalone operations on it, and it is used nowhere else in the assign_reviewers_for_team method. It was moved to generate_teams_hash. <code> Although the above could stay as-is in assign_reviewers_for_team, there already seems to be too much functionality in this method, which is why it was moved to insufficient_assign_reviewers. There are existing RSpec tests (spec\\controllers\\review_mapping_controller_spec.rb) for the given file; we were tasked with ensuring that our changes did not break any of the existing tests, thus retaining the previous code's functionality. For the commit associated with our final submission, all existing tests pass according to travis-ci. 1. <link> 2. <link> 3. <link>.", ["The writeup is very good, and The writeup explains the changes well.", "The writeup is a good description of the changes, but The writeup could have been improved by showing the code changes.", "the code changes are not explained in any detail.", "the code changes are just shown in a list of code snippets.", "that the code changes are just shown in a list of code snippets is not a very useful way to show code changes, and the code snippets are not shown in any other way.", "I would have liked to see more code snippets, and I think the code is not very readable."], [1.0, 0.0, 1.0, 1.0, 1.0, 0.0]], "64": ["The Expertiza project is system for using peer review to create reusable learning objects. Students do different assignments; then peer review selects the best work in each category, and assembles it to create a single unit.<ref> <link> </ref>. Used on the admin side of Expertiza for creating/ editing questionnaires (rubrics, surveys and quizzes). It helps in add/removing questions, options, etc for a questionnaire. Very big controller that handles a lot more than the name suggests. Functionalities need to be moved to appropriate controllers. Quiz methods are should be treated the same as any other type of questionnaire; differences between quiz questionnaires and other questionnaires should be implemented in the model class, quiz_questionnaire Turn the questionnaire into a ‚Äúform object.‚Äù The ..._questions methods: save_new_questions, delete_questions, save_questions should be in a separate class. Other classes involved: questionnaire.rb quiz_questionnaire.rb questions_controller.rb What needs to be done: Move quiz related functions to quiz_questionnaire.rb . copy, update_quiz, valid_quiz methods, clone_questionnaire_details is too long. Debug output (print statements) should be removed. Understand the functions in the controller and comment them. Ensure that the code is understandable to the next programmer who works on it. What We Have Done Method Refactoring <table> Format Refactoring Case 1: Loop Condition Change all the looping conditions into one format Before <code> After <code> Case 2: If Condition Change all the if conditions into ruby format Before <code> After <code> Case 3: Name Change all the name from \"JAVA name\" to \"Ruby name\" Before <code> After <code> Refactoring Example In models/questionnaires.rb , we add copy_questionnaires method, as shown below: <code> References <references/>. <table>. Change all the looping conditions into one format Before <code> After <code>. Change all the if conditions into ruby format Before <code> After <code>. Change all the name from \"JAVA name\" to \"Ruby name\" Before <code> After <code>. In models/questionnaires.rb , we add copy_questionnaires method, as shown below: <code>. <references/>.", ["Very good description of the changes, and the changes to be made", "It would have been helpful to have more detail on the code changes.", "The code snippets are not explained well enough.", "The code snippets are not clearly described.", "I would have liked to see more detail about the changes."], [1.0, 1.0, 1.0, 1.0, 1.0]], "65": ["In this project, we have unit tested various methods in SignUpSheetController.rb and SignUpSheet.rb as well as refactoring these methods. We first wrote unit tests to ensure we had adequate coverage for our methods. Then, we refactored our methods with confidence found from our unit tests. We found that directly testing the functions that we refactored provided better assurances that our refactorings were correct rather than manual testing the user interface. For our unit testing, we used the RSpec framework. We choose this framework since legacy tests of our methods were implemented with RSpec<ref> <link> </ref> . We also utilized the RSpec-Mocks<ref> <link> </ref> to test functions related to the database without having to use fixtures. We wrote multiple controller tests and model tests for corresponding functions so as to test various scenarios and get 100% test coverage. We sought to obtain this high level of coverage to make refactoring more precise. We believe that highly tested code is resilient errors that could occur when refactoring. Before we started working on Expertiza<ref> <link> </ref>, running RSpec on the codebase resulted in 992 / 4184 lines of code (23.71%) covered. After our work, running RSpec on the codebase resulted in 1144 / 4278 lines of code (26.74%) covered. E.g. If you run the test in spec/controllers/sign_up_sheet_spec.rb by command \"rspec spec/controllers/sign_up_sheet_spec.rb\", then you can see the 100% line coverage for controller method save_topic_deadlines() in sign_up_sheet_controller.rb. For checking the coverage, open the index.html page coverage folder and go to respective controller. Similar, run the tests in Model and Controllers folder to see 100% test coverage for following functions. 1. Create() in SignUpSheetController 2. self.add_signup_topic() in SignUpSheet 3. save_topic_deadlines() in SignUpSheetController 4. self.confirmTopic() in SignUpSheet. We performed various refactorings on our code to increase the codes readability and remove redundancy. We extracted variable from complicated statements to increase the readability of the code. In the code base we were working with, there were a variety of lines of code that were more than 80 characters long. These lines of code were hard to read. So, we split them up into multiple lines of code by extracting statements found in function calls into their own variable. Example: <code> Became: <code>. We attempted to enforce good Ruby conventions while refactoring the code<ref> <link> </ref>. This entails doing things like correcting the formatting of the code to make it more readable. In addition to this, we converted a variety of iterators to follow good ruby conventions. For example, sign_up_sheet.rb had the function self.add_sign_up_topic(assignment_id) which contained an iteration through a set of topics while manually maintaining an index variable. Manually maintaining the index variable can be problematic for future maintenance. <code> We replaced these with the Ruby each_with_index iterator. This allows us to pass the responsibility of maintaining the count of the index to the iterator. <code> We replaced \"=>\" while passing parameter by colon (:) So that <code> became <code>. We have refactored the methods which were doing a lot of things into two or more methods so as to segregate the functionality and following the basic principal that one method should do only one thing. Also, this helped in making the methods more readable and easy to understand. E.g. In sign_up_sheet.rb Model, \"def sign_up_wailisted()\" is the new method extracted from original method self.confirmTopic(). There are many more such examples which are done as part of refactoring. 1. Clone the repo <code> 2. Change current directory to cloned repository 3. Run Command: <code> <code> 4. Check coverage: Open overage/index.html in browser and check line coverage for following methods 1.1. Create() in sign_up_sheet_controller.rb in Controllers 1.2. self.add_signup_topic() in sign_up_sheet.rb Models 1.3. save_topic_deadlines() in sign_up_sheet_controller.rb in Controllers 1.4. self.confirmTopic() in sign_up_sheet.rb in Models. We were not able to recreate the problem found in issue 580. After multiple attempts of trying to recreate the bug we began to examine the source code. We believe that someone else has already fixed the bug before we started working on the project. <references></references>.", ["The writeup is very detailed, and The writeup explains the changes well.", "The writeup is a good description of the changes, but The writeup would have been helpful to have more detail on the code.", "the code is not very readable, and the code snippets are not very long.", "I would have liked to see more screenshots of the code, and more screenshots in the code base."], [1.0, 1.0, 1.0, 1.0]], "66": ["This page provides a description of the Expertiza based OSS project for Fall 2017. Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.4. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.6. <link> 1.1.7. <link>. <link> is an open source project. It is based on <link> framework. Expertiza is a web application which allows instructors to create new assignments, list of topics which students can sign up for. Students can also form teams for various assignments and projects. The following tasks were required to be completed in this project: 1. Issue #80: Add past-due assignments to task list. 2. Highlight with specific colors current and next due dates. 1. Past Due assignments are not present in the task list. If a student is a participant of an assignment and has not submitted the assignment before the assignment due date/deadline, then the assignment is considered as a past due/overdue assignment for that student. These past due assignments are not present in the task list and we have added this functionality to the existing system. 1. Highlighting next due dates. Different To do tasks in the task list with different due dates are highlighted with different shades of red color. An assignment that has to be submitted earlier has a redder color than assignments that have later due dates. 1. The function overdue_tasks? is added in the model student_task.rb file to fetch those tasks with current stage set as finished and which were not started by the student. <code> 1. In the list.html.erb file we used the tasks not started section as a template to construct the past due assignments section. <code> 1. The past due assignments variable from the controller contains the list of past due assignments as its contents which are looped through with a do each loop. The participant, stage and topic_id are used to obtain the due date of the assignment. Then the assignment name and its deadline are displayed. <code> 1. To highlight with specific colors current and next due dates we made several changes to the currently existing list.html.erb file. <code> The rgb() style color attribute is used to set the color of a html tag. A variable r is used to set the red color parameter in rgb function. Initially it is set to 255 which is the Darkest shade of red that is possible. Then a variable step is used to determine by what value the r variable must decrease to lessen the intensity of the red color. The size of the task list is used to initialize the step value. An if condition is used to make sure that step is initialized only when there are tasks to be completed. The task list before and after the changes are shown below. <image>. <image> The student in the example above is a participant in 6 current assignments that are displayed in the task not yet started section of the task list. Each of those is highlighted with colours as described. The student has failed to submit 6 other assignments before their respective due dates and they appear in the past-due assignments section of the task list. Following are a few test cases with respect to our code changes that can be tried from UI: 1. Login as student and check if past due assignments section is present on the task list. 2. If no such section is present, the student does not have any past due assignments. 3. Log in as an instructor and create a new assignment. 4. Set the deadline for the assignment to a date and time few minutes from the current date and time. 5. Assign the student being tested as a participant to the created assignment. 6. Login as the student and check the task list after the due date for the assignment has passed. 7. The new assignment will be in the Past Due assignment section. To check if the Tasks not yet started section has assignments highlighted with colours: 1. Login as a student and check if there are any assignments in tasks not started section. 2. If no assignments are present, the student is not involved with any current assignments. 3. Log in as an instructor and add the student as a participant to few assignments. 4. Log in as the student and now see that the assignments in tasks not yet started section are highlighted with colours as described in the wiki. Edge Cases The edge case for when there are no past due assignments for a student has been handled. In this case, no past due assignments are displayed. The edge case for when there is only one assignment in the tasks not yet started section has been handled. In this case, the assignment is highlighted with a dark red colour. 1. <link> 2. <link>.", ["The wiki page is very detailed, but the code changes are not described.", "The wiki page would have been helpful to have a description of the changes made to the code.", "The code changes to the list.html.erb file are not explained.", "the list.html.erb file are just shown in the list of tasks, and the code is not explained in any detail.", "that the list.html.erb file are just shown in the list of tasks, and the code is not explained in any detail is a good description of what was done.", "But the code snippets are not shown in any format.", "I would have liked to see more detail on the code, and the code would have helped to have the code shown in a more readable format."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0]], "67": ["This means that refactoring projects, testing projects, and Mozilla projects need to use the same rubric. The feature concluded with allowing 4 rubric scenarios for an assignment: 1. Rubric does not vary by round or by topic. 2. Rubric varies by round, but not by topic. 3. Rubric varies by topic, but not by round. 4. Rubric varies by both round and topic. Our proposed solution keeps the previous implementation, but changes rubric filtering to allow instructors/TAs to use filters that are not theirs. Following the <link> footsteps, this diagram depicts the interactions between an instructor and an assignment. Alongside editing topics and due dates, the instructor can edit what rubrics are assigned to an assignment. The topics tab allows instructors to specify which rubric associates with each topic while the rubrics tab lets the instructor determine if the assignment will vary by topic or not. <image>. Now find questionnaire by assignment questionnaire and type rather than assignment/type/round_number/topic_id. 1.3. assignment_participant.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.4. feedback_response_map.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.5. on_the_fly_calc.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.6. self_review_response_map.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.7. tag_prompt_deployment.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1. Views 1.1. edit/_rubrics.html.erb : Modify to set assignment vary by round/topic fields instead of non persisted flags 1. Helpers 1.1. assignment_helper.rb : Refactor by moving function to find questionnaire / assignment questionnaire to assignment_form.rb. 1.2. grades_helper.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.3. summary_helper.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1. DB Migrate 1.1. XXXXXXXXX_add_vary_by_topic_to_assignments.rb : Migration to add ‚Äúvary by topic‚Äù field to assignment 1.2. XXXXXXXXX_add_vary_by_round_to_assignments.rb : Migration to add ‚Äúvary by round‚Äù field to assignment 1. All of the related test files to accommodate the above changes. <image> In addition to that, we will be adding two additional boolean fields to the assignment schema: vary_by_round and vary_by_topic . As discussed earlier, in the previous implementation, these were methods that were called to determine if an assignment varied by round/topic rather than a persisted value. It would always query for the AQs by assignment id, current round number, and current topic id. However, if the assignment did not have reviews that vary by round or topic, these values would be nil on the AQ, and the previous query would fail. This means that: 1. If an assignment does not vary by round or by topic, the query for AQs will be by assignment id only. 2. If the assignment varies by round but not topic, the query for AQs will be by assignment id and round number. <image>. Here we describe manual UI Testing steps to edit an existing assignment to allow it have to specialized rubrics for different topic types. 1. Login to Expertiza using instructor account (For testing, username: instructor6 , password: password ) 2. Click on Manage > Assignments 3. Click on Edit option for any assignment, you should get following view. <image> 1. Click on Rubrics tab. You will see 2 checkboxes ( Review rubric varies by round? , Review rubric varies by topic? ) 2. Check the box for Review rubric varies by topic? 3. Go to Topics tab and verify that there is dropdown menu beside each Topic. 4. Select a rubric from dropdown menu, and click Save <image> 1. Go back to Home, and select the same assignment to edit. When you click on Topics tab, you should see the rubric you had selected. 1. This was due to how questionnaires were retrieved/found for an assignment. Staggered deadlines also rely on finding questionnaires using topic id, which isn't handled until after an assignment is made. 1. Unresolved Another quality of life improvement is that staggered deadlines and topics cannot be added to an assignment until after the assignment has been created and saved.", ["The writeup is very detailed, but The writeup does not explain the changes made to the code.", "The writeup is not clear how the code is changed, and the code would be helpful to have a description of the changes.", "The code changes are described in the wiki, but not in the code snippets.", "I would have liked to see a more detailed description of what was done.", "Also, The code changes should be described in more detail.", "For example of that Also, The code changes should be described in more detail : the test plan should be explained."], [0.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "68": ["This page provides a description of the Expertiza based OSS project Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.1.1.5. <link> 1.1.1.6. <link> 1.1.1.7. <link> 1.1.1.8. <link> 1.1.1.9. <link> 1.1.1.10. <link> 1.1.7. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.8. <link>. These problems are as follows: 1. Unsafe reflection method const_get called with parameter value 2. Hardwired variables in add_new_questions and save_new_questions 3. Unnecessary checks for QuizQuestionnaire, checks can be removed 4. Use guard clause to enclose methods instead of conditional 5. Removed unnecessary method 'create_questionnaire' 6. Break up create method into new 'create_questionnaire' 7. Use each_key instead of keys.each 8. Split lines of code to fit within recommended 160 character length 9. Removed useless assignment of variable in save method 10. Resolved issues involving use of unsafe reflection. Problem Method(s) save_new_questions, delete, and save_questions used conditional to wrap code instead of guard clause. Using guard clause can reduce complexity and number of lines in code. Solution For example, we go from: <code> To: <code>. Problem Method(s) create and save_new_questions have unnecessary checks for if question type is QuizQuestionnaire. Solution We removed the check in both methods. We go from: <code> To: <code>. Problem Method(s) save_new_questions and add_new_questions used hardwired variables. We go from: <code> To our code which incorporates constants. <code> With our constants at the top of the code for easy accessibility: <code>. Problem Unsafe reflection method const_get called with parameter value Solution Remove the unsafe reflection through using a variable that checks for null values. We go from: <code> To: <code>. Problem Method create_questionnaire, had no apparent calls to it. We remove the method to make the code dry. Solution For example, we remove: <code>. Problem The create method itself was 49 lines long. Solution For example, we go from: <code> To: <code>. Problem The existing code uses keys.each to iterate through the hash. Solution For example, we go from: <code> To: <code>. Problem Some of the lines of code exceed the recommended 160 characters per line. Solution For example, we go from: <code> To: <code>. Problem The existing code included assignments of variables that were not used throughout the file. In any case, we remove the variable keep the code dry. Solution For example, in the following method: <code> We remove the unnecessary variables and comments, resulting in the following method: <code>. In order to remove repetition and make the code dry, this do loop was refactored into its own method 'save_question_hash'. Solution For example, in the following method: <code> We refactor the do loop into its own method: <code>. However, in order to ensure the code edits didn't cause any previously crafted test to fail an RSpec test was ran before each commit. The command utilized to test the questionnaires controller is as follows: <code> However, if a VCL was utilized for development this following command was used instead. <code> In one case the create_questionnaire method was removed, thus in order to keep the set of tests clean the following test block was removed from the testing file: <code>. Test Log in Website url: <link> Log in: instructor6 Password: password Test Create questionnaire 1. After logging in click the Questionnaires tab. 4. Select Create Test edit/add questions: 5. Change dropbox of question type to TextArea, select Add \"1\" more. 6. Change dropbox of question type to Criterion, select Add \"2\" more. 7. Edit question content: \"Test question Textarea\", \"Test question Criterion1\", and \"Test question Criterion2\" in that order. Test Delete Questionnaire 18. Select Back. 1. Code Refactoring Best Practices <link> 2. Expertiza on Github <link> 3. Expertiza Project Fork <link> 4. Expertiza Website <link> 5. RSpec Documentation <link>.", ["The writeup is very detailed, but The writeup could have been better described.", "The writeup would have been helpful to have a bit more prose describing the changes.", "The code snippets are not explained in any detail.", "The code snippets are just shown in black and white, and it would have helped to have more prose.", "Also, The code snippets should have been explained in more detail.", "It would be helpful to show the code changes, and also the code that was refactored."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "69": ["It allows the instructors to create new assignments and customize new or existing assignments. Each assignment should have its own unique auto-generated submission directory, which is named based on the assignment name entered by the teacher. In the current implementation of Expertiza, there are following issues need to be addressed: Issue #1: The directory name should be auto-generated from the assignment name. Issue #2: It should be done by changing spaces in the names to underscores. E.g., the directory for Program 1 is by default \"Program_1\". Issue #3: A check should be added to prevent two assignments in the same course from having the same name. Issue #4: Verify or add if not present - a check to stop two assignments from sharing the same directory. Issue #5: On changing name of an assignment while creating it, the code shouldn't throw a NoMethodError. Fix #1: Submission directory is successfully being generated after the assignment name is typed in. If needed, the submission directory can be changed, however any modifications to the assignment name will just auto-generate it to match. Fix #2: A check was added to ensure that assignments in the same course do not share the same name. When creating a course, if the assignment name is a duplicate, it will reset the entire form. Fix #3: A check was added to ensure that assignments in the same course do not share the same submission directory. When creating a course, if the submission directory is a duplicate, it will reset the entire form. Fix #4: These checks were also put in place when modifying an existent assignment. The controller, helper and spec were modified for this project: 1. Assignments Controller - assignments_controller.rb 2. Assignments View - _general.html.erb 3. Assignemnts Controller Spec - assignments_controller_spec.rb 4. Assignments Model - assignment.rb. This is a controller that helps instructors create, modify, copy new assignments. Each assignment can be associated with specific Rubrics, Review Strategy and Due dates. This the view for creating the new assignments and editing the existing assignments. Tests and bug fixes pertaining to assignments controller. The ruby code which defines how the assignment model functions. The project primarily deals with the AssignmentsController and AssignmentsView, and changes made are as follows: The directory name is auto-generated from the assignment name typed in by the instructor. This is achieved by replacing all spaces in the names with underscores, and removing all special characters like '/','\\','$', etc from the auto-generated submission directory name. If any two assignments of the same name under the same course are attempted to be created, it is prevented and an error message is displayed to the user stating the the submission directory name already exists. The odd case of a teacher editing the name of an already existing assignment to one that already exists is also handled. Expertiza will display a similar error message stating that the assignment couldn't be saved. Most changes were made in the assignments_controller.rb file. Checks were added to ensure that an existing assignment name or submission directory did not exist when creating a new assignment. If the assignment was not created due to an error, the code would render new which would cause the assignment to be created even though it did not pass all of the checks. The following function was added to app/views/assignments/edit/_general.html.erb , to generate submission directory names with underscores replacing spaces: <code> Changes were made to the create function in assignments_controller.rb , such that it only creates the assignment directory if the one with the same name doesn't already exist: Before <code> After <code> Changes were made to the update_feedback_assignment_form_attributes function in the same file to flash an error if an edited file has the same name: Before <code> After <code> The following validations were added to app/models/assignment.rb , without these validations the user was allowed to change the assignment name or submission directory to one that already exists. <code>. The following steps must be performed to test the project UI: Step 1: Log in as an Instructor, with Username - instructor6, Password - password <image> Step 2: Create a new assignment. In this case our assignment is called \"E2054 Test Assignment\", under course CSC 216 Fall 2009 <image> Step 3: To save the assignment, the Review and Author Feedback rubrics need to be filled in <image> Step 4: On completion, the assignment will be saved <image> Step 5: If another assignment of the same name under the same course is created, the following error is displayed <image> Step 6: On editing an already made assignment to match the same details as \"E2054 Test Assignment\" <image> We get the following error: <image>. The following RSpec tests were added to the assignments_contoller_spec.rb file <code> <link>.", ["The document is very detailed, and the changes are described in a very readable way.", "The document is a good description of the changes made, and The document is clear that the changes were made to the controller, helper and spec.", "The code snippets are not explained in any detail, and The code snippets are not shown in the code.", "The code snippets are just shown in a list of the code changes, and not in the prose description.", "This is a very good description, despite that The code snippets are just shown in a list of the code changes, and not in the prose description, and I would have liked to see more detail on the changes.", "For example of that This is a very good description, despite that The code snippets are just shown in a list of the code changes, and not in the prose description, and I would have liked to see more detail on the changes : The code snippets should be shown in prose, and should be explained"], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "70": ["Expertiza allows the instructor to create new assignments and customize new or existing assignments. It also allows the instructor to create a list of topics the students can sign up for. Students can also peer review other students' submissions. The process is detailed below: 1. Steps to install Redis: <code> Run the redis-server using: <code> 1. Steps to install NodeJS on CentOS: <code> 1. Run the expertiza Rails server <code> 1. For logging in as an instructor:- Username: instructor6 Password: password 1. For logging in as an student:- Username: student17 Password: password. At present the calibration functionality is limited, the following points present the scenarios where the current implementation is lacking: 1. No support for varying rubric by round feature. 2. From the perspective of the student, lack of differentiation of review - whether its from an expert or otherwise. 3. A student is not notified once an expert submits a review. 4. Additionally, a student should be able to see how an expert rated his/her assignment - similar to how it's done in calibration results for calibrated assignments( As seen when Show Calibration Results is clicked. ). Tasks are broken down into sub-tasks as follows: 1. Refactoring: 1.1. a checkbox in the \"General\" Tab from ‚ÄúCalibrated peer-review for training?‚Äù to ‚ÄúAdd expert peer review?‚Äù 1.2. a tab name for instructor from ‚ÄúCalibration‚Äù to ‚ÄúExpert review‚Äù on the assignment setting page 1.3. partial file from ‚Äú_calibration.html.erb‚Äù to ‚Äú_expert_review.html.erb‚Äù 1.4. the link title on student side from ‚Äúshow calibration results‚Äù to ‚Äúshow expert peer-review results‚Äù 1.5. the file ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to ‚Äúresponse/show_expert_review_results_for_student.html.erb‚Äù 1.6. title in ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to start with ‚ÄúExpert review comparison report for‚Äù 2. Functionality changes 1.1. Vary-rubric-by-round - Currently, the functionality of calibration is limited. 1.2. Both TAs and instructors could do expert reviews - need to modify ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to make it support multiple expert reviews. This diagram shows the Assignment Setting page in the General tab. <image> This diagram shows the Assignment Setting page in the Calibration tab. <image> The following diagram shows the flow of control in case of peer reviews. <image>. <image>. Hence, we will also be writing test cases for the new functionality - added as a result of this project. We would also need to add additional fixtures in spec/feature to be used in the testcases. There are three main actors that interact with the new functionality, these are: 1. Instructors 2. Teaching Assistants 3. Students Hence, we would have to write tests for each of these types of users and test the expert review functionality. Some of the tests that we have in mind as of now, are as follows: 1. Instructor 1.1. Login as instructor using pre-configured credential. 1.2. Go to \"General\" tab 1.1.1. Verify \"Add expert peer review?\" present instead of \"Calibrated peer-review for training?\" 1.3. Verify whether the instructor can see \"Expert Review\" on the assignment setting page. 1.4. Perform Expert Review, based on values declared in Fixtures available to Instructor. 1. Teaching Assistant 1.1. Login as TA using pre-configured credential. 1.2. Go to \"General\" tab 1.1.1. Verify \"Add expert peer review?\" present instead of \"Calibrated peer-review for training?\" 1.3. Verify whether the TA can see \"Expert Review\" on the assignment setting page. 1.4. Perform Expert Review, based on values declared in Fixtures available to TA. 1. Student 1.1. Log in as Student using pre-configured credential. 1.2. Verify if student can see \"Show expert peer-review results\" 1.1.1. When a new expert-review is available. 1.1.2. Show nothing when nothing is available. 1.3. Testing to check if the reviews show up. 1.1.1. If added by TA. 1.1.2. If added by instructor. 1.1.3. If multiple reviews from either TA or instructor show up as a list.", ["Very good description of the changes made", "It would have been helpful to have more detail on the changes.", "The code snippets are not explained well enough.", "The code snippets are not clearly described.", "I would have liked to see more of The code snippets.", "Also, the code is not described in any detail.", "that Also, the code is not described in any detail is a good thing.", "There should be more detail about the changes, and the code changes."], [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0]], "71": ["2. A confirmation email is sent to a user of the system when they reset their Expertiza account password. In this project we have first identified all the set of scenarios where the user of the system will get an email. We have implemented tests for the following scenarios: There are various ways to create a new user account in Expertiza. Irrespective of the user creation method, the newly added user should get notified via email when his account is created in the system. This email states the username and a randomized password to allow the user to login for the first time. Below given are the ways to create new user to system. 1. By filling a user creation form An instructor can add a new user to the system by filling up a user creation form 1. By importing a CSV file The instructor can add new users to the system by importing a CSV file with user information <image> 1. By importing a CSV file to add participants to an assignment Instructor can add participants to an assignment by importing the users from a CSV. If the user listed in the CSV does not already exist in the system, then the a new user account is created and the user is added to the assignment. <image> 1. User requests an account A user can request an account by filling up a form with his details. If the superadmin approves a request, a new user account is created in the system and the user receives an account creation email notification <image>. The following features were checked for all cases as part of the email functionality when a new user is created 1. Mail delivery count increased by 1 after the mail triggered by the scenario is sent 2. Sender email-id is verified. 4. The subject is checked to be equal to 'Your Expertiza account and password has been created' We considered the following cases while testing specific to the scenario where user requests an account: 1. No email should be sent if new account requested with invalid email address 2. Super admin should receive email about new account request with a valid email address 3. Email notification should be sent to requester when super admin approves account creation request 4. No email notification should be sent to requester when super admin rejects account creation request. We used Capybara to model the scenario as follows: 1. Create user through instructor filling up the form: Admin user is created using factory class. 1. User requests a new account and account is created upon approval from superadmin Super admin is created using factory class. 1. User creation by instructor: Instructor creates new user by filling sign-up form <image> 1. User creation by user request Email count should be zero when user requests new account with an invalid email <image> Email count should be one when user requests new account with a valid email <image> 1. User creation by importing csv files Import CSV to add participants to assignment <image> Import CSV from manage users <image>. When the user tries to login, and the password entered is wrong, the user is redirected to reset password page. <image> Here the email-id entered is searched through the database, If such user account is found: url for reset is generated, with random token set as password is sent to the user. Flowchart: <image>. 1. User enters email id which is not associated with any account 1. No e-mail should be sent 1. User enters email id that's present in the user database The following features were checked inside 'it blocks' as part of verifying email functionality 1. Mail delivery count increased by 1 after the mail triggered by the scenario is sent 2. The sender mail-id is verified to be 'expertiza.development@gmail.com' 3. Receiver email id is checked to be equal to 'expertiza.development@gmail.com' . If the email id is not associated with any existing account, then email count will be zero <image> If the email id is associated with an existing account, then email count will be one <image>. However, if an account is created by adding them as participants to an assignment when they don't already have an account, e-mail notification is not being sent. The issue here was that an already existing user in the system will not get added as a participant on the assignment. Now that we have enabled the email functionality irrespective of where a new user is created from, we don't need to explicitly call the mailer from each location where new user is created. The email body was inconsistent across different scenarios. If the user does not exist in the system, new user account (if there is sufficient information about the user to create a new Expertiza account) is created If the user already exists as a participant on the assignment, do nothing Add the user to the assignment as a participant; otherwise. This way, the user(whether newly created or already an Expertiza user) gets added on the assignment as a participant. Also, the instructor should receive an email about the same. This method calls the email function to notify the reviewee <image>. <image> <image>.", ["The writeup is very detailed, and The writeup explains the changes well.", "The writeup is a good description of the changes, and the code snippets are well organized.", "the code snippets should be shown in a more readable format.", "I would have liked to see more of the code snippet, and a description of what was done.", "Also, the code is not very detailed.", "For example of that Also, the code is not very detailed : the test plan is not described, and there are no screenshots of the tests. "], [1.0, 1.0, 1.0, 1.0, 0.0, 1.0]], "72": ["<link> is an <link> <link> application which is used by instructors and students for creating assignments and submitting peer reviews. Expertiza allows the instructor to create and customize assignments, create a list of topics the students can sign up for, have students work on teams and then review each other's assignments at the end. The Source code of the application can be cloned from <link> . Files involved: popUpController.rb participantsController.rb What they do PopUpController displays a review when a user (instructor or student) clicks on a list of reviews. ParticipantsController handles participants in an assignment. What's wrong with them: PopUpController contains only two prominent methods, but they are very big. ParticipantsController contains redundant code. What needs to be done: 1 popUpController.rb 1.1 Action_allowed method always returns true. It needs to be fixed. 1.2 Team_user_popup method needs refactoring. @teamId is assigned but never used. Add comments to make code more readable. Rename variables based on their usage 1.3 Refactor Participants_popup and team_users_popup methods into smaller private methods. 2 participantsController.rb 2.1 In add and update_authorization methods, permissions collection object can be used to reference its elements without assigning each element to individual private variables. 2.2 Inherit and bequeath_all methods are similar. Common statements can be migrated to private method. Add comments in code to make it easy to understand. 2.3 Cluster all the flash messages under one private method to make the code more manageable 2.4 Fix email_sent method. It contains a dummy email address. Modified Action_allowed method to return true only if... <table>. Local variables like can_submit, can_review, etc removed and permissions object referenced directly <table>. Moved common functionality of Inherit and bequeath_all to private method populate_copied_participants <table>. <table>. <table>. Login as a instructor \"instructor6/password\". Click on Assignments -> review report -> and on a team. <references/>.", ["This is a very good description, and I would like to see the code.", "The writeup is very readable.", "The writeup is very detailed, but The writeup could have been improved by adding more code.", "the code is not very readable, and the code would have been better to have a few more comments.", "Also, the code is too long.", "I would have liked to see more code snippets."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "73": ["<link> is a software development process that relies on the repetition of a very short development cycle, requirements are turned into very specific <link> , then the software is improved to pass the new test cases only. The TDD sequence can be can be summarized in following steps: 1. Add a Test 2. Run all tests and see if the new test fails 3. Write the code 4. Run tests 5. Refactor code 6. Repeat Advantages of using TDD: 1. Narrowing Problem Focus 2. Tidier Code 3. Not worrying about dependencies 4. Easier refactoring 5. Better Test coverage and fewer bugs. <link> is a software testing method by which individual units of source code are tested to catch errors early in the development process. For a model it involves testing the interface and on how it responds to commands and queries from outside. Model testing is bounded to the functionality of only the model under test and doesn't test how its collaborating models get affected based on this query. Unit Testing provides several benefits which can be summarized in the below points. 1. Finds problems early: Unit testing finds problems early in the development cycle. In test-driven development (TDD), which is frequently used in both extreme programming and scrum, unit tests are created before the code itself is written. When the tests pass, that code is considered complete. 2. Facilitates change: Unit testing allows the programmer to refactor code or upgrade system libraries at a later date, and make sure the module still works correctly (e.g., in regression testing). Unit tests detect changes which may break a design contract. 3. Simplifies Integration: Unit testing may reduce uncertainty in the units themselves and can be used in a bottom-up testing style approach. By testing the parts of a program first and then testing the sum of its parts, integration testing becomes much easier. 4. Documentation: Developers looking to learn what functionality is provided by a unit, and how to use it, can look at the unit tests to gain a basic understanding of the unit's interface's API. 5. Design: When software is developed using a test-driven approach, the combination of writing the unit test to specify the interface plus the refactoring activities performed after the test is passing, may take the place of formal design. Each unit test can be seen as a design element specifying classes, methods, and observable behavior. The goal of the project is to test the Menu.rb, i.e. the Menu model by writing unit tests, which are written using <link> . The unit tests are to be written such that the path coverage of menu.rb is greater than 90% and achieve the highest possible branch coverage. The goal is to test the menu model file. 4. Creating dummy entries for testing different functionalities. 5. Writing testing conditions for different functions and cross-checking with the expected outputs. Menu is a model which gives the functionality to the top menu bar in the Expertiza website. It links the menu items associated with each tab in the menu using a tree. The following Menu is displayed for the Student role : <image>. Mock/dummy objects are needed to be created for any unit testing criteria. These objects are loaded newly and deleted after every testing condition. Several methods exist for creating such objects, whose parameters need to be designed to satisfy the conditions under test. We have used factories and created the mock objects that we need to execute the tests. Menu model require several other mock objects to be created namely Node(this is a subclass in the menu class), menu_item, site_controller, controller_action,etc. A total of 21 testing conditions were required to be performed for testing all the functions in menu model file. The conditions that needed to be tested are as below: Node class 1. initialize <code> 2. setup <code> <code> <code> 3. site_controller <code> 4. controller_action <code> <code> 5. content_page <code> 6. add_child <code> Menu class 1. initialize <code> <code> <code> 2. select <code> <code> 3. get_item <code> 4. get_menu <code> 5. selected <code> 6. selected? <code> <code> 7. crumbs <code>. A screenshot of the tests passing is shown here: <image>. <image> <link>. After writing the test cases we used SimpleCov to measure the C0 coverage of our rails application. After running rake spec to run the test cases, SimpleCov creates a directory called coverage in our rails application folder. These are the learning outcomes after performing this project: 1. Writing tests using the Test Driven Development approach. 2. Writing unit tests for models and controllers in RSpec. In our case, before writing the test cases for the menu.rb we had the understand how different models interacted with each other and how each action by different users would make changes in the database schema. 1. <link> 2. <link> 3. <link> 4. <link>.", ["The writeup is very detailed, and the screenshots are very good.", "The writeup is a good description of the changes made, and it is easy to follow the code.", "The only thing that could be improved is that the description of what was done is not clear.", "I would have liked to see more detail on the changes that were made.", "Also, the description is not very detailed.", "For example of that Also, the description is not very detailed : the test plan is not explained, and there are no screenshots of the code changes.", "that For example, the test plan is not explained, and there are no screenshots of the code changes is a shame."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "74": ["Expertiza allows the instructor to create new assignments as well as edit new or existing assignments. This issue is not a bug but an additional feature to the existing import topic functionality. Issue 329 : When importing teams there are different options to handle conflicting team names Issue 328 : When importing teams, and a conflict exists there is an option to merge the two teams by inserting the new members into an existing team. we tried to import a team and selected 'Insert any new members into existing team'. No new team members were in fact inserted into the team. <code> <code>. Problem : When importing teams, and a conflict exists there is an option to merge the two teams by inserting the new members into an existing team. Solution : This was an issue to fix the functionality of Insert any new members into existing team. Problem : When importing teams there are different options to handle conflicting team names as shown in the screenshot below. We‚Äôd like to add another option to rename EXISTING team when a conflict exist. Solution : This was a request to add an option to rename existing team if there was a conflict in the team name. New code introduced was as follows: In start.html.erb In this file, the new option as displayed to the user is added <code> In team.rb In this file, the handling of the new tag \"rename_existing\" is added wherein, the old team is updated with a new name. Solution : We have modified the existing implementation for import topics to assign the teams to the topics. We have changed the files to handle another column where the teams have been assigned to topics. The column is optional because there might be topics that have not yet been assigned to any teams Expectations from the import file: 1. Assigned team name should exist in the system, otherwise the import will fail. Instructor has to make sure that the teams which are assigned in the import file should exist with same names in the system or database. 2. Instructor also need to ensure that the topic for which the team is being assigned should not be full or can accommodate new team assignment to the respective topic. We are just adding another column so the best way is to extend the existing select tag with a new option for the teams assigned. All the select tags has been changed with an additional option \"Assigned Team\". <code> model/sign_up_topic.rb The existing import function in the model import the topics to the topic table. As per the requirement and validations, topic should be imported first and then only the team can be assigned to the topic. So the existing import method has been modified to assign the team once the topic is imported in the database table. As per the edge case mentioned in the requirement document that few topics may not have any team assigned to it, so we first check if topic has any team assigned, then only it tries to map the topic with the team. <code> Changes in the application with new implementation An option column checkbox (Teams Assigned) has been added to the UI <image> A new column Assigned Team is added where the columns are being mapped. As our additional functionality is to have another column to assign team to the topic. We have to have the import test case and the assigned team change could be applied to the same test case. We use it to check if the older team gets the new name and the new team gets the requested name. 5. Click on Topic Description checkbox and import the following file. 7. Import topics. 2. Select Manage >Assignments > Edit Assignment > Topics 3. Scroll down to the screen and click on import topics 4. Upload a file with the topic details and a team assigned to topic 5. Check the Teams Assigned optional column 6. Click on import and map the columns in the mapping page 6. After submitting, team will be assigned to appropriate topic [Problem 3 (329)] 1. Login to Expertiza using username: instructor6 & password: password. 2. Select Manage > Courses or Assignments > Add Teams button > Import Team 3. In the screen that loads, select \"rename the existing team and import\" in the handle conflicts section. 4. Upload a file with the team details and select the appropriate delimiter. 5. Click on Create 6. Verify that the new team got created with the assigned name and the older team's name got changed. 2. Select Manage > Courses or Assignments > Add Teams button > Import Team 3. In the screen that loads, select \"Insert any new members into existing team\" in the handle conflicts section. 4. Upload a file with the team details and select the appropriate delimiter. 5. Click on Create 6. Verify that the existing team got updated with the new team members. Also, if there's no team in the system and instructor has used it in the import file so a new pop up can be displayed where the new team can be created or the import can be extended to create teams while assigning the topic.", ["The writeup is very detailed and explains the changes well.", "The writeup is a good description of the changes, and the changes to the UI.", "The code snippets are not explained, but The code snippets do explain the changes.", "I would have liked to see more of the code changes, but it is clear that the code is not a bug.", "Also, the code snippet for the UI is not explained.", "that Also, the code snippet for the UI is not explained is a very good description."], [1.0, 1.0, 0.0, 0.0, 1.0, 1.0]], "75": ["Students can also review their teammates, making use of the teammate review questionnaire, based on their contribution to the projects. When we use these questionnaires for reviews, for example the teammate review assessment we encounter a few problems. We add in a new Question type ‚ÄòCake‚Äô, which will be extended from the Scored Question model [cake < scored question < choice question < question]. Potential ways of displaying the Cake question on the UI: 1. Stars: Existing design for teammate reviews uses stars to symbolize the contribution provided by each student. We can implement the cake type using the same. The questionnaire for reviewing teammates includes the question asking the cake (contribution) factor. Ideally, the cake should include the reviewer himself as well. But after considering code that also involves teammate reviews, what we have observed is that every assignment has the option to render reports to the instructor - showcasing different types of reports such as Review Reports, Teammate Review Reports, Self Review Reports, Answer Tagging reports. If the existing self-review feature were to be implemented, the view for the Self Review reports would also contain self-teammate reviews, which would cause inconsistencies in rendering Self Review Reports, and does not help serve the purpose of a legible report. Consider Student8529, who has reviewed himself and his teammate Student8663. With the design approach taken for this project, when Student8529 reviews himself, the review would appear under the Teammate reviewed, under the Teammate review report. 1. Student: Fills out the reviews, and chooses answers in accordance with the Cake question type imposed restrictions, if there is one. The screen for the same when a cake type question is added to the teammate review is as shown below: <image> The cake type question will always have a green circle in the background, rending the score on top of it. In order to enable a student to review him/herself as a teammate we have implemented self reviews for teammate assessment. For example: In teammate review assessment, let there be a cake type question about the amount of contribution provided by each team member. After enabling self reviews, cake has to include the author as well. In order to implement the self review feature for teammate reviews we have added a column \"is_self_teammate_review_enabled\" to the assignments table. 1. Self reviews enabled 2. A student logs on to expertiza and clicks on an assignment 3. Then he clicks on your team link 4. He should be able to see his teammates and himself (for self review) under team members 5. Total contribution for a cake type question in a teammate review should include the contribution provided by the student in the self review as well. 6. If the contribution is exceeded, a warning should appear 1. Self review disabled 1. The link for a reviewer to review himself as a team member should not show 2. The cake type questions in the teammate review should include only contributions provided by the other team members 1. Context: If self review is enabled after the assignment has been created and a few students have already given reviews, then it should give a warning. 1. Self review enabled in the middle of the assignment 2. Add teammate review for teammate1 3. Add teammate review for teammate2 (make sure it adds upto 100%) 4. Enable self review as an instructor 5. As a student, notice that a new review button is visible in the ‚Äúyour team‚Äù page. 6. Click on review, try to add contribution for self and make sure a warning appears that says that the cake is already at 100% 1. Context: If self review is disabled after the assignment has been created and a few students have already given reviews. 1. Self review disabled in the middle of the assignment 2. Enable self review as an instructor 3. Add teammate review for teammate1 4. Add teammate review for teammate2 5. Add self review (make sure it adds upto 100%) 6. Disable self review as an instructor 7. As a student, notice that the review button is NOT visible in the ‚Äúyour team‚Äù page. The test cases pass, on creation of a review questionnaire and on creation of a questionnaire with different types of questions, including the cake type questions to the questionnaire rubric. In the current implementation of cake type questions, answer objects are tracked on the basis of teammate reviews or any other review, meaning, if the cake type question is part of a Teammate Review questionnaire, then instances of answer are tracked with respect to answers given by team members, otherwise all the responses for that specific question are fetched without any correlation between answer instances and team members. As part of future scope, if there are reviews other than teammate reviews that would need to keep a track of answer objects with respect to team members, then the implementation would have to also include that specific review scenario. With the current implementation, reviews that track answers round-wise, would not be accommodated with cake type question and can be extended for the same.", ["The design doc is very detailed, and explains the design approach well.", "The design doc would have been helpful to have more detail on the design, and to explain the changes made to the code.", "The design doc should have explained the changes to The design doc, and how The design doc were made.", "Also, the design docs should have been more detailed, so that the reader could see the changes and the code changes.", "The design doc should have described the changes, and the changes that were made to The design doc."], [1.0, 1.0, 1.0, 1.0, 0.0]], "76": ["For users intending to view the deployed Expertiza associated with this assignment, the credentials are below: 1. Instructor login: username -> instructor6, password -> password 2. Student login: username -> student4340, password -> password 3. Student login: username -> student4405, password -> password. It‚Äôs an open source project developed on Ruby on Rails platform and it‚Äôs code is available on Github. It allows students to review each other‚Äôs work and improve their work upon this feedback. It focusses on refactoring some of the more complex methods, modifying some of the language to make it more Ruby friendly, removing some redundant code. A couple of long and complex methods were refactored from this controller along with removal of some non-functional code and a few language changes to make it Ruby style. Three methods in particular, namely conflict_notification ,calculate_all_penalties and edit were found to be too long and were in need of refactoring into smaller, easier to manage methods. Few more compact methods were created for this purpose. There were no existing test cases for the controller. This is a helper class which contains methods for constructing a table(construct_table) and to check whether an assignment has a team and metareveiw(has_team_and_metareview). We worked on the following work items(WIs) WI1 : Refactor calculate_all_penalties method into smaller methods WI2 : Move the repeated code in conflict_notification & edit methods to a separate method list_questions. WI3 : Refactor the code as per the Ruby style guidelines and incorporate the good practices WI4 : Test the conflict_notification method to test the changes made. WI5 : Move the repeated code in view and view_my_scores methods to a separate method retrieve_questions. 1. Refactoring calculate_all_penalties method This is used to calculate various penalty values for each assignment if penalty is applicable. The following changes were made: 1. This method was very complex, performing too many functions within a single method and had to be broken into 3 smaller methods each having a more well defined function. 2. The following 3 methods were created after splitting the first method <code> 3. Changes were also made to make the code follow ruby style.The language was made more ruby friendly. 4. Finally some redundant code was commented out as it was non-functional. Refactoring into smaller more specific methods: <image> Removal of non-functional code : <image> Change of language to make it more Ruby friendly: <image> 1. Move the redundant piece of code from conflict_notification & edit methods to a new method list_questions The conflict_notification method is used to help the instructors decide if one of the reviews are unfair or inaccurate. This was again split into 2 methods with some part of the code which is repeated in another method refactored into a new method. <image> Refactored #Created a method which was a duplicate in conflict_notification and edit methods <image> edit method: This method is used to edit the questionnaires. This method again has code which is repeated in the conflict_notification method and thus the repeated section was split into a new method. <image> New method: Refactored #Created a method which was a duplicate in conflict_notification and edit methods <image> Similar refactoring was performed to obtain the retrieve_questions method: <image> This is the new method created after the above refactoring: <image>. There were no existing test cases for the GradesController. We have added a new spec file 'grades_spec.rb' which covers testing scenario for the newly added method. As the model was not changed, no test cases were added for the model. Following steps needs to be performed to test this code from UI: 1. Login as instructor. Create a course and an assignment under that course. 2. Keep the has team checkbox checked while creating the assignment. Add at least two students as participants to the assignment. 3. Create topics for the assignment. 4. Sign in as one of the students who were added to the assignment. 5. Go to the assignment and sign up for a topic. 6. Submit student's work by clicking 'Your work' under that assignment. 7. Sign in as a different student which is participant of the assignment. 8. Go to Assignments--><assignment name>-->Others' work (If the link is disabled, login as instructor and change the due date of the assignment to current time). 9. Give reviews on first student's work. 10. Login as instructor or first student to look at the review grades. 1. The construct_table method in GradesHelper is not used anywhere. It has no reference in the project. method in GradesHelper can be broken down into separate methods, one each for team and metareview.", ["Very good description of the changes made.", "It is very detailed, and the code snippets are well organized.", "the code snippets should be shown in a more readable format.", "I would suggest that the code should be broken down into sections, rather than just one or two lines.", "This would be a good way to show the changes.", "Also, the code is not very detailed.", "There are no screenshots of the code changes."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "77": ["The goal of this project was to add RSpec tests for the functionality added for project <link> . The changes submitted by project E1948 can be found <link> . See the Test Outline section to see the specifics of our testing work. For this project, our plan was to write new RSpec tests for new methods added in project E1948 for ReviewMappingHelper. In total, our team wrote 34 tests to cover the 8 new methods created or altered methods. These 8 methods are listed below. See the Test Outline for more details on the RSpec tests written these methods. This section shows the RSpec test we created for each of the methods defined in Relevant Methods above. The full test file can be found <link> . This method gets review and feedback responses for all rounds for the feedback report. Before testing this method, RSpec sets up an assignment, a review, and a reviewee. Then it creates 2 responses from the reviewer (one for each of the initial 2 rounds). During testing, these RSpec tests assures this method returns the correct amount of responses for each round. In this scenario created, each round should return 1. There is an additional two tests in this RSpec feature, testing to see if a 3rd round returns nothing if there was no response created (which there is not a 3rd response pre-setup. Likewise, there is an additional test where it creates a third response and assures that this method returns 1 for round 3. Setup <image> Tests <image>. This method gets the review score awarded based on each round of the review. Before testing this method, RSpec sets up an assignment, a reviewer, and a reviewee. Then it assignments 3 scores (one for each round) given by the reviewer. During testing, these RSpec tests check to see if this method returns the correct awarded score for each round requested. Setup <image> Tests <image>. This method checks the submission state within each round and assigns team color accordingly. The check_submission_state method calls the submitted_within_round? method to check if the submission was made in the current round and if yes then the purple color will be assigned to the team. One of the test cases tests this feature that purple color is being set or not. If no link was included by the team in the submission or the link is not a wiki link or the assignment was not submitted within the round, then the team will be assigned green color. These conditions are also being covered in the tests below. Setup <image> Tests <image> <image>. This method is a helper method for get_each_review_and_feedback_response_map. It sets the instance variables @review_responses_round_ and @feedback_response_maps_round_ after calculating the number of responses received by the team after each round. This method should return the corresponding response map associated with each round of review. The initial setup to test this method includes creating a reviewer, creating responses and review_response_map_ids. The tests check if the correct response map is returned or not for each round. Setup <image> Tests <image>. This method is a helper method for _team_score.html.erb view. It sets the metrics, namely min, max and avg score value for all reviews for a particular round and team. In the setup for the Rspec test, we create assignment, due dates for 3 rounds, student, reviewee, reviewer and user. We have 3 test cases each for round 1, round 2 and round 3. Setup <image> <image> Tests <image>. This methods checks if the link submitted for evaluation has been updated or not since the last round. The method takes in parameters round, due date and link updated time and compares the dates to check whether the latter for before the former time. The method returns false if it's not updated and true otherwise. The setup for this rspec test included creating an assignment and creating 2 rounds with corresponding due dates along with a reviewer and reviewee for the same. The first test case asserts that the method returns false when link is not updated. The second test case asserts that the method returns true when the link is updated within the due date. Setup <image> Tests <image>. 34 out of 34 tests in the review_mapping_helper_spec.rb test file. URL link of video of review_mapping_helper_spec.rb tests running and passing:- <link>. 1. We refactored get_review_metrics to get_review_volume, as per request from the professor <image> 1. We refactored get_team_colour & obtain_team_colour to read get_team_color & obtain_team_color, as per request from the professor <image> 1. We refactored calcutate_average_author_feedback_score to calculate_average_author_feedback_score, as per request from the professor <image>. <image> <image>.", ["The writeup is very detailed, but The writeup could have been better if The writeup had more detail on the tests.", "The writeup would have been helpful to have a more detailed description of the tests, and a more thorough explanation of the changes made.", "The test plan is not described well, and the tests are not described in any detail.", "This is a good start, despite that The test plan is not described well, and the tests are not described in any detail, so The test plan should be explained more clearly."], [1.0, 1.0, 1.0, 1.0]], "78": ["Description of the current project This project is intended to make Bookmarks more user-friendly, credible and valid. Bookmarks in expertiza are created by reviewers and can be used by authors for their work on any project. On each line of the signup sheet are two icons, one for adding a bookmark to the topic, and another for viewing bookmarks on the topic. If the instructor allows the participants to create bookmarks, then only a participant has access to create and view them. He should be able to create a new Bookmark only if he enters a valid one. Problem 1 : When a user after logging into expertiza wants to add a new bookmark or view existing bookmarks for the available projects, he will click on the buttons against the specific title. Once he goes to either 'Create New Bookmark page\" or \"View existing bookmarks page\", he's not able to go back to Sign-up sheet using \"back\" button. <image> Enhancements to this problem : We can go back to Sign-up sheet after clicking on \"back\" button. <image> Problem 2 : If a user clicks \"Add Bookmarks\" button, he will be navigated to a \"Add a new bookmark page\" where he can give details of new bookmark (like URL, description etc ). <image> After creating an empty bookmark, we are displayed this message as below in the figure. <image> Problem 3: When the instructor doesn't give access for participants to add/view bookmarks, the participants are still able to access them. He un-checks \"Allow participants to add bookmarks\" button and participants are still able to access them. <image> Enhancements to this problem : Now,if the instructor un-checks the button \"Allow participants to create bookmarks? \", the actions View and Add Bookmarks are no longer visible/accessible. <image>. 1. app/views/bookmarks/list.html.erb : This file is a view for listing the existing bookmarks of a particular Title of the project. 2. app/views/bookmarks/new.html.erb : This file is a view for creating a new bookmark - (A valid one). 3. app/views/sign_up_sheet/_actions.html.erb : This file is a view for showing the actions against the title of the bookmark. 4. app/controllers/bookmarks_controller.rb : This file has the code regarding the access that instructor gives to students regarding Bookmarks. a) Back button for the page \"View Bookmark\" and \"Create Bookmark\" was resolved. 1. Login with the credentials to expertiza. 2. Go to 'My assignments' and select OSS Project/writeup. 3. Select 'Signup sheet'. Select a title and choose either 'View Bookmark' or 'Add Bookmark' button 5. If you choose 'View Bookmark', after viewing, press the back button to go back to Signup sheet. 6. You will land up in Sign-up sheet page. 7. If you choose 'Add Bookmark', you can add by giving Bookmark details and save it. 8. Now press back button. 9. You will land in Sign-up sheet page. b) Creating Blank(Empty) Bookmarks problem was resolved. 1. Login into the expertiza with the credentials. 2. Go to 'My Assignments' 3. Select OSS Project/writeup 4. Now choose the \"Sign-up sheet\". 5. You will be displayed with titles to all available OSS projects. 6. Choose the one for which you want to create/add a bookmark. 8. You should be given a warning saying \"Error occurred while creating bookmark. 9. You will still remain in the same page unless you press 'Back' button. c) Issue of having the access to create the bookmarks even though instructor denied the access was resolved 1.Login to expertiza as instructor. 3. Select OSS Project and to edit. 4. Click on 'Topic' button and see if the 'Allow participants to create bookmarks' is checked or not. 6. Now login into expertiza as student and select 'My assignments' 7. Click on OSS project/writeup. 8. Select 'Sign-up sheet' and you see all titles available for OSS projects. 9. Against each title, you can't see any buttons to either add/view bookmarks. 10. You can now repeat the process by checking in the button and see if the add and view button against the titles are accessible/not. 1. A questionnaire can be built to grade a bookmark. Questions maybe like \" How helpful was this bookmark? \", \" Did you use this bookmark for your work? 2. A reviewer should be recognized or credited if he added useful bookmarks i.e if the author has made use of the bookmark. 3. A function to add extra credits automatically if a participant had submitted more than threshold number of useful bookmarks.", ["The document is very detailed, and The document explains the changes well.", "The document is very readable.", "The only thing that I would have liked is that the description of the changes is not explained.", "I would like to see more of the code snippets, and the code changes.", "Also, the code is not described in any detail.", "that Also, the code is not described in any detail is a good example of how the code should be explained."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "79": ["If one respond to the advertisement, a join team request will be created and the topic holder can see it on ‚ÄúYour team‚Äù page. After a student gets a team and the team is not full, (s)he should also be able to send invitations to others. Fix Issue #227 : If user 'A' got a topic and user 'B' got no topic, then if A join B‚Äôs team, A‚Äôs topic is dropped and A and B end up with a new team with no topic. A user who is enrolled in an assignment and has a topic, can advertise for more team members. When another user goes on the 'your team' link, who is enrolled in the same assignment but doesn't have a team and topic yet, he will be able to see the team advertisements by other teams. This request goes to the team who had posted that advertisement. The request can be approved or denied by the team members. If there is an entry in the \"join_team_requests\" table for a user, then (s)he can only see advertisements if the corresponding \"status\" is \"D\", which implies that this user is not yet part of a team. If a user has an assignment and a topic only then (s)he will be able to advertise for team members to join their team. If a user doesn't have a topic (s)he won't be able to advertise. The scenario in which A, B were two users, A with a topic, B without a topic, A joins B's team but A's topic gets dropped; A,B become a team but with no topic. Such cases are now avoided as we have ensured that without first selecting a topic a user cannot advertise for team members nor can he send invitations to other users to join his team. If (s)he has a topic then he'll be able to see the option for advertising for teammates. If the assignment doesn't have a topic then the user will be able to send out team invitations. 1)Login as Admin, create an assignment with all the necessary details like maximum no of users per team, add topics for the assignment, enroll users(students) in the assignment. 2)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. You should be able to see the assignment now in the Assignment section. 3)Since A doesn't have a topic yet, so you won't be able to see the advertise link. 4)Go to the sign-up sheet for the assignment, select a topic. A now has a topic, so now A can advertise for team-members. 6)Login as another user(Student) or impersonate another student, say student B, whom you have enrolled in the assignment. 7)Since B doesn't have a topic yet, so you won't be able to see the advertise link. 8)Go to the sign-up sheet for the assignment, you'll be able to see a trumpet icon next to the topic that has an ad posted. 9)Click on the icon, you'll see the ad posted by A. Click on request to join A's team. 12)Login as user A or impersonate A, now you'll be able to see the team join request sent by user B. And now if you login as B or impersonate B, you will no longer be able to access the trumpet icon which is a link to all ads pertaining to topics the concerned assignment. 14)Had user A declined User Bs join request, the status in the table \"\" would change to \"D\", that means user B still doesn't have a team. So, now if you login as B or impersonate, you'll be able to see the ads again. 1)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. 2)You should be able to see the assignment now in the Assignment section. Since A doesn't have a topic yet, so you won't be able to see the advertise link. 3)Go to the sign-up sheet for the assignment, select a topic. A now has a topic, so now A can advertise for team-members. 4)This ensures that for an assignment with topics, a user can send out advertisements only if (s)he has a topic. 5)Login as Admin, create an assignment with all the necessary details like maximum no of users per team, do not add topics for the assignment, enroll users(students) in the assignment. 6)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. You should be able to see the assignment now in the Assignment section. 7)Since the assignment doesn't have any topics, therefore, you will be able to see the advertise link. You won't see a sign-up sheet since the assignment has no topics.", ["The writeup is very good.", "The writeup explains the changes well.", "The writeup is very readable.", "The writeup is a good description of the changes made.", "The only thing that could be improved is that it would have been better to show the code snippets in the code.", "Also, the description of what was done in the test plan is not clear.", "that Also, the description of what was done in the test plan is not clear is a very good description.", "I would have liked to see more detail on the changes."], [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0]], "80": ["<link>. The instructor needs to watch teams being formed, and every time a new team is formed, a new mentor needs to be assigned, outside of Expertiza. This leads to a lot of work for the instructor, as well as sometimes long delays before a team is assigned a mentor. 3. When a team reaches a target size of greater than 50% of the maximum teammate capacity, then: 1.1. A mentor will be assigned to this team and notified via email. 1.2. Participants in an assignment will be identified as mentors via their participant permissions ( <link> ). Anyone with ‚Äúmentor‚Äù permission for an assignment is eligible to be automatically assigned to mentor a team when a new team is formed. Develop a trigger that: 1. Is activated when any team has been formed that has k members, where k is greater than 50% of the maximum team capacity 1.1. ex: max members = 4, trigger activated when the team size reaches 3 2. Assign a mentor to the team 1.1. Mentors should be evenly assigned to teams, so a good strategy is to assign the mentor who has the fewest teams to mentor so far. 3. Notify the mentor via email that they are now assigned to a specific team, and provide the email addresses of the team members. 4. Possibly notify the team members that they have been assigned the mentor with contact information (further discussion here). The mentor assignment feature has a few preconditions and assumptions which have been outlined below. 1. An instructor has already added an assignment without topics. 2. ‚Äúmentor‚Äù permission exist 3. There are users in said assignment with mentor permissions. 4. A mentor has yet to be assigned to said assignment. 5. Mentor assignment is done only once, does not take into consideration drop offs. <image> <link>. The value will be only present if the mentor has been automatically assigned. <image> <link> The instructor view will also need to have visibility of what mentors the teams have. <image> <link>. 1. <link>. <image> <link>. 1. <link> <image> <link> 2. <link> <image> <link> <image> <link> 3. <link> <image> <link> 4. <link> <image> <link>. This will allow for the auto assign mentor feature to be disabled if the instructor does not want the work flow executed for the assignment. One trigger had to be added to invitation.rb so when users accept invitations to join a team the mentor management logic can execute. 1. <link> <image> <link> 2. <link> <image> <link> 3. <link> <image> <link>. Two views were updated in the Expertiza application to allow the user to see who the mentor is on their team. This also had to be done in two places, since the instructor view of a team is different than the student's view of the same team. 1. <link> 2. <link>. <image> <link>. 3. Impersonate the student account you found.If there is no team, create one by inviting other student to your team, or create a team using the admin control. 4. By toggling the Auto assign mentors when team hits > 50% capacity? in the assignment configuration page you will be able to: 1.1. Enable the functionarities and logics that our team implemented. 1.2. Disable the functionarities and logics that our team implemented to allow an admin to assign mentor manully. 1. Add team members to any team under the Rock on Assignment using any following way: 1.1. Invitate/Accept the team invitation using impersonated student accounts. 1.2. Add student to team by using the admin control. 2. Observe that when the member size passing the capacity (3 for this Rock on assignment), a mentor called Student6801 will be added to the assignment team. 3. Remove the mentor and the added students of the assignment team using the admin control. the second team member added), a mentor will not be added to the assignment team. 5. You should also be able to see that mentor is showing on the team list. 1. By doing similar step as we mentioned above, you should not see any of the following: 1.1. A mentor is added to the team after the team size changed. 1.2. A mentor is displaying on the team list unless this mentor account: Student6801 is manually added or invited. 1. A team will have a mentor after addMentor is called. 2. A team will have a mentor removed after removeMentor is called. 3. The mentor with lowest number of team assigned will be return after selectMentor is called. 4. The selectMentor except not to receive any message if a team already has a mentor. 5. The selectMentor except not to receive any message if a team has size < 50% of the maximum size.", ["The document is very detailed, but The document does not explain the changes made to the code.", "The document is not clear how the code is changed, and the code would be helpful to have a description of the changes.", "the code is not described in any detail, and the code snippets are not shown.", "This is a good thing, as it would have been helpful to explain the code changes."], [1.0, 1.0, 0.0, 1.0]], "81": ["The student_task/list page is the page displayed to a student after logging in into expertiza. 1. Show the record of each group collaborator(s) for each course. Another div is to display all the assignments and their information, include Assignment, Course, Topic, Current Stage, Review Grade, Badges, Stage Deadline, Copyright Grants and Make Public. Original page before modifying showing below, all the courses and all the assignments are displaying in the same table, and badges have own column. <image> <image>. Here are some existing problems and unclear parts of the pageÔºö 1. Problem1 : Consider the cases where a student might be enrolled in assignments from more than one course. In this case, assignments should be grouped by course, with the course name given before the listing of the first assignment. 1. Problem2 : Remove the column for Review Grade because it makes no sense, change Review Grade to Submission Grade. Show the actual score and show the blue button. 1. Problem3 : Delete the badges column, and if the Assignment has a badge, mark it directly next to the assignment name under the assignment column. Fixing app/views/student_task/list.html.erb original code of how to display course are showing below <code> In order to group the courses, we added a group_by method to find out which courses does this assignment belongs to, and group the assignments that has the same courses name at one table. The modified code is showing below. <code> We will print out the course name as each table head, group the assignments, and we take down Course coloum from table content since the course name is already showing as table head. Also, for the assignments that have not assigned to a course, we will print out No Course Assigned Yet . 1. Fixing app/views/student_task/list.html.erb 1. app/helpers/student_task_helper.rb For this problem, first, we change Review Grade to Submission grade, which only need to modify <code> to <code> on list.html.erb. Second, we change how we display the score. Original code is showing below <code> In the original code, each grade is assigned to /100, which is not correct because not every assignment has 10 reviews (one review count for 10 point). Since we need to display the current score on the page, we need an array to carry the current score and display it on the result. The modified code showing below. <code>. Fixing app/views/student_task/list.html.erb Since not too many assignments are able to get badges, that make badges column barely have contents. Therefore, we display it after the assignment name and delete Badges coloum. If one student gets a badge, it will display a small picture after the badged assignment. Hover over your mouse on it, and it will display the information about this badge. <code>. <code> <code>. Page showing right now <image> <image>. Since when no assignment was assigned to the student, it should not show the table content on the page. Change from <code> to <code> 1. Second, we modified spec/features/assignment_submission_spec.rb . In order to use the content inside of the original test file, we added a def function. The function is able to set up the database for testing needed, and test the necessary function from the student_task/list page. - The def function we added is showing below. <code> - Later on, we will use this list_page function on our test cases. It will show if the student_task/list page has the assignment name( Assignment1684 ) that we putted on the database. Also, since there are an assignment assigned to the student, we will expect page to have course table information ( eg. Assignment, Submission Grade, Topic, Current Stage, Stage Deadline, Publishing Rights ). Since the assignment was not being graded yet, on the submission Grade column it will show a N/A . We are using student student2064 as our user. Therefore, the page should show student2064 . We also assigned the student to team up with CSC517, test ( student_id, user type. user type will be test #random number ), and on the page it should show Students who have teamed with you CSC517, test#{n} . Next, the page should not contain other course name. Testing code is showing below. <code> 1. Next, we added a new file spec/features/student_task_spec.rb . However, instructor_interface_helper did not help us to sign up an assignment to the user. Therefore, we will testing if the user have not been signed up for an assignment, and the student_task/list page will only show the first div part. The course information table will not appear on the page. <code>. <image>.", ["The writeup is very good, but The writeup could have been better.", "The writeup would have been helpful to have more detail on the changes made.", "The code snippets are not very detailed, and The code snippets should be shown in a more readable format.", "Also, the code is not very readable.", "I would have liked to see more of the code, and more of the code in the code.", "For example of that I would have liked to see more of the code, and more of the code in the code : the test plan is not explained, and the test plan would have helped to have a description of what was done.", "This is a good description of the changes, but not a very detailed one."], [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0]], "82": ["For testing the changes made, the following credentials are recommended: 1. Instructor Login: username: instructor6 password: password This project does compile. It provides a platform to view assignments, manage teams, select topics and work on improvement through anonymous peer reviews. Expertiza allows the instructor to define different topics that students or teams could choose from as their assignment. Each topic can have 0 or more slots that indicate the number of students or teams that can be signed up for that topic. To improve the user experience when managing topics, the following tasks were identified: 1. Issue #971: Change create topic UI into AJAX 2. Issue #926: We need a way to sort topics by topic number in assignment#edit page 3. Issue #718: We should allow instructors to give feedback when accepting or rejecting topic suggestions. Currently, when instructors manually enter topics, they have to go back and forth between the list of the topic page (views>sign_up_sheet>_add_signup_topics.html.erb) and the create topic page(views>sign_up_sheet>new.html.erb). Adding a new topic can be done through an editable grid (see js-grid) without leaving the list of topic page, by making use of AJAX. The list should be automatically updated when a new topic is entered. <code> On the View ' app/views/sign_up_sheet/_add_signup_topics.html.erb' the following was added: <code> The content of the above tag is completely rendered via Javascript, where we use JSGrid for dynamically allowing users to Add, Delete and Update Topics on the same page. In ' app/assets/javascripts/signup.js ' file, the following was added: The following content shows how AJAX calls are handled/made to our signup controller so that the CRUD operations on the topics page is dealt with <code> The Preview View for Topics Management : <image> After Our Implementation using JS Grids : <image>. This task is to do with sorting the Topics according to the topic number. This functionality is taken care by Js-Grid by itself, where clicking the topic# will toggle the topics in the ascending/descending order. Sorting in Ascending Order: <image> Sorting in Descending Order : <image>. Instructors should be allowed to give feedback when accepting or rejecting topic suggestions. Earlier, feedback on topics suggested by students can be given only when the instructor wants the topic to be revised, not when (s)he is approving or rejecting it. In app/controllers/suggestion_controller.rb Including the text provided in the comment field, while approving the topic. This ensures that comments are saved when an instructor accepts a topic suggestion in the backend. <code> Including the text provided in the comment field, while rejecting the topic.This ensures that comments are saved when an instructor rejects a topic suggestion in the backend. <code> Only an instructor should be able to approve or reject a submission. Therefore, only for instructor role, approve and reject submission options will be provided. <code> Comments can be added even during topic approval or rejection. <image> Comments during approval or rejection get reflected in the feedback list. <image>. 1. Issue #971: Change create topic UI into AJAX 1. Login as an instructor. It will automatically go to the manage courses page 2. Click Assignments tab next to Courses 3. Select the assignment for which a new topic has to be added 4. Click the edit icon for the assignment and go to Topics tab 5. You will be able to see the topics list in a grid format. Click on add icon on the right side corner of the grid 6. You can also edit an existing entry by just clicking on that row in the grid without being redirected to a new page 1. Issue #926: Sort topics by topic number in assignment#edit page. 1. Log in as any user or instructor. 2. Go to the assignments list. Note: this is not the manage assignments for instructors. 3. Click into a finished assignment. 4. Click into a current assignment. 1. Issue #718: 1. Login as an instructor. It will automatically go to the manage courses page. 2. Click on the \"Manage Notifications\" link above the \"Courses\" and \"Assignments\" links. 3. You will be directed to a creation page for notifications. The notification will display on the first page the user is shown. It will disappear when they change or reload the page. Note: instructors on the management page will retain the notification if they switch between Assignments, Courses, and Questionnaires. This is because the JavaScript does not actually reload the page. If the assignment is found, it loads all the topics and checks if the rendered format is json along with a http status 'OK'. If the assignment is not found, an empty json is rendered.", ["The document is very detailed, and The document explains the changes well.", "The document is not clear how the code is changed, but the code is clear that the code has been changed.", "the code is not in the right order, and the code snippets are not shown in the UI.", "that the code is not in the right order, and the code snippets are not shown in the UI is a good example of the need for more detail.", "I would have liked to see more of the code changes, and more of them."], [1.0, 1.0, 1.0, 1.0, 1.0]], "83": ["Currently we have a few classifiers that can detect useful features of review comments, such as whether they contain suggestions. The suggestion-detection algorithm has been coded as a web service, and other detection algorithms, such as problem detection and sentiment analysis, also exist as newer web services..but they need to be integrated properly using API calls in expertiza code. But later on we faced many issues such as: 1) The API call links were outdated 2) The new link that we found were incompatible with the previous work 3) The planned task of adding new API calls as per Carl Colglaizer's Framework turned out to be irrelevant or not required for this project, so we dropped it. So we decided to start with integrating these API Calls from scratch. Features we added in this project 1. Setting up a config file 'review_metric.yml' where instructor can select what review metric to display for the current assignments 2. Based on the selection made by professor, API calls (sentiment, problem, sugegstion) are made and a colorful table is displayed below the review form for student to review 3. The total time taken for making these API calls will be displayed below the table. This design pattern helped us achieve the decoupling and abstraction of implementation code base (makeARequest Function) of API call from the calling function (getReviewFeedback function). Later, refactoring of _response_analysis.html.erb partial further decoupled the implementation. Thus, in a nutshell, application of facade pattern along with some refactoring lead to a decoupled implementation of integration of all 3 API calls. <image>. In the partial view file _response_analysis.html.erb file, we added new javascript functions to make, process and display output of API calls. 1. review_metric.yml config file <code> <image> 1. response_controller.rb <code> <image> 1. response.html.rb <code> <image> 1. _response_analysis.html.erb - fetch_response_comments() function <code> <image> 1. _response_analysis.html.erb - getReviewFeedback() function <code> <image> 1. _response_analysis.html.erb - makeARequest() function <code> <image> 1. _response_analysis.html.erb - combine_api_output() function <code> <image> 1. _response_analysis.html.erb - generateTable() function <code> <image>. 1. <link> for problem metrics only 2. <link> for sentiment metrics only 3. <link> for suggestions metrics only. In order to make the API call, the partial view \"_response_analysis.html.erb\" is rendered in \"response.html.erb\" view file which will be responsible for sending a JSON input to the web service. The input will contain the review comment written by the user and when the student hits the \"Get review feedback button\" the comments will be sent to these api calls in the following json format: Below is a sample input <code> Once the request is sent, we expect the output to be in the following format: Sample Output: (for sentiment analysis API call) <code> Sample Output: (for problem detection API call) <code> Sample Output: (for suggestion detection API call) <code> These outputs (which is a JSON) will be parsed and the concerned metrics such as the sentiment, problem and suggestion will be extracted so the user will be able to view a summarized result of how well their review comments are. In addition, the result will be presented in a colorful tabular format to the user after they hit the \"Get Review Feedback\" button. Also, the total time taken for making these API calls will be displayed below the table. Rspec tests for the same have been written in response_controller_spec.rb <image>. 1. The functionality was written on the client side in javascript solely in _response_analysis.html.erb 2. To test this view, any type of review must be accessible as a student. 3. There is a button at the bottom of the review called 'Get Review Feedback'. 4. When pressing button, API calls are issued and the metrics will show up within the table (a sample of which is displayed below). 5. API calls are slow and will take time to process until the 'Loading...' text disappears. 6. You can modify the comments and click the 'Get Review Feedback' button again to get new feedback, that too can be achieved without the need of saving the review, but still saving the review first is a better option to approach this. 7. All the review feedback for the comments will be displayed in a colorful table. <image>. 1. <link> 2. <link> (the link is mentioned here for records. 3. <link> 4. <link> (make sure you change branch to 'beta' branch if the page doesn't load by default to beta branch) 5. <link>.", ["The writeup is very good, but The writeup could have been better structured.", "The writeup should have included more detail on the changes made.", "Also, The writeup should have explained the changes to the code base.", "The code snippets are not shown in a clear format.", "The code snippets are just shown in the code.", "that The code snippets are just shown in the code is not good enough.", "I would have liked to see more detail about the changes."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "84": ["1. Renaming done on the UI as well as on the backend 2. Varible names refactored appropritely 3. Flash messages changed accordingly. The error which is raised is due to the following validation present in the model late_policy.rb. 1. After discussing with professor we have decided to increase the max penalty limit to 100 2. Added a flash error message in the create function of late_policies_controller.rb <code>. 1. Added a back link in which redirects the user to edit assignment page. 2. Saved the assignment object in a session variable when the user clicks on the the edit asignment icon 3. We also added a back button on index page since there was no direct way of going back to edit assignment page once a late policy was created. 4. We also added padding between the edit and delete links on index page <code>. While testing this issue we noticed that the functionality was working perfectly fine, however, it was not user friendly. 1. We decided to add a tooltip icon explaining how this functionality works 2. We also inproved its UI by adding the alignment and padding. 1. Added test file late_policies_controller_spec.rb with appropriate test cases 2. Added test file late_policies_spec.rb with appropriate test cases. 1. <link> 2. <link> 3. <link> 4. <link>. 1. <link> 2. <link>.", ["The wiki page is very detailed and explains the changes well.", "The wiki page is very readable.", "The design doc is very well organized.", "I would have liked to see more screenshots of the code.", "Also, the test plan is not explained well enough.", "This is a good example of a design doc, but the test plan would have been better to show the code in a larger font."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "85": ["<link> is a large project developed as a combined effort of students and faculty using the <link> framework. 0536558. Additional funding from the <link> <link> (LITRE) program, the NCSU <link> , the NCSU <link> Initiative, and the Center for Advanced Computing and Communication. Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.4. <link> 1.1.1. <link> 1.1.2. <link> 1.5. <link> 1.1.1. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.1.2. <link>. The goal of this project is to use both Bootstrap and AngularJS to improve the look of the entire Expertiza including the representations of buttons, tables, and other elements. Certain changes in design will also improve the efficiency of the web app when it comes to the amount of time it takes for a page to be loaded. We plan to improve the user experience by replacing the plain html buttons with stylish bootstrap buttons. To make the design of Expertiza consistent, our goal is to replace this plain-styled text with color coded Bootstrap buttons. The new design of Expertiza will include the fixed menu bar on the top of the page. As it can be seen on the screenshot, the user has scrolled down the page, but the menu bar is still visible on the top of the page, making it convenient for the user to navigate throughout the website. <image>. Please refer to the later part of this article: <link> for viewing the current design Now, when trying to open manage-courses, all records are loaded before rendering them onto the page, which takes too long time to load and is not responsive at all. Better practice is on Virgin American‚Äôs website: <link> When the website is representing the calendar, the price for each day is not actually loaded. <image> So in Expertiza, we can create several buttons for course semesters in the page. And if the list is still too long and takes a long time load, we can use a ‚Äòshow more‚Äô button ,or automatically load more data when the scroll bar reaching the end of the page, to minimize the content we need to load after one single mouse click. <image>. We will need to reduce the number of buttons. So we can replace them to 5 buttons with responsive design, that is, no redirecting happens after clicking on the buttons. <image>. Please refer to the later part of this article: <link>. That takes a long time to load and the length of review list is too long. <image>. As an assignment with a goal of improving the graphic design and responsiveness of Expertiza web application, this project mainly follows design patterns from two design pattern groups: structural and behavioral. Another structural design pattern that will be seen in this project is Front Controller pattern. While this pattern suggests that there is a single controller that takes all the requests, when we have both Rails and AngularJS coexisting, we can think of Rails framework as being the \"single bridge\" to the database from AngularJS's stand point. AngularJS, being an outstanding front-end framework, will interact with the user and pass all the request to Rails framework. Rails framework then queries/updates the database and provides AngularJS with the data. Finally, the third structural design pattern that this project follows is Module pattern. Modules are one of the essential constructs in the skeleton of AngularJS framework and, hence, this project is bound to follow module pattern. <image>. Since the large part of this project is to iterate through the database query and show the data to the user with a reduced delay, this project follows the well known Iterator pattern. This approach greatly improves the user experience since it does not leave the user waiting empty-handed until Rails framework completes the full query of the database. <image>. 2. Bootstrap will be applied for better user interfaces. <image>. 2. The database should not be executed before the user clicks on the button. 3. Bootstrap will be applied for better user interfaces. <image>. 1. The list is too long: if there are 20k users in the database, there will be 20k rows in this table in a one page! 1. Load only a given number of records to the view, such as 100 records, when accessing into this page for the first time.", ["The writeup is very good, but The writeup could have been better if The writeup had more description of the changes made.", "The writeup would have been helpful to show the changes that were made, and to explain the changes to the code.", "The design patterns are not explained, and The design patterns should be explained.", "I would also like to see a screenshot of the code, and a description of what was done."], [1.0, 1.0, 0.0, 0.0]], "86": ["This project works on improving the search functionality of Expertiza, by adding search bars if not present, introducing advanced search feature where user can search on the basis of more than one parameters and making the search functionality appear more elegant. 1. An instructor or administrator can search for a user by name, user-ID, or other characteristics. 2. An instructor should be able to search for assignments by name, due date, or other characteristics. 5. An instructor or administrator should be able to search for all the assignments that a particular user has participated in. In the current system workflow, we found that the user is unable to search in the Manage Users view. In the proposed workflow, we plan to enable the user to search by all the columns in the UI viz. The user will be able to apply multiple filters at a time and the output of the query will match all filters applied. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. However, the search is case sensitive. In the proposed system, the user will be able to search for an assignment using additional filters such as Creation Date and Updated Date along with Assignment Name. The user will also be able to apply multiple filters at a time and the output of the query will match all filters applied. To search for an assignment by Creation Date, the user will be prompted with a calendar where he can select a date and all the assignments created on or before the selected date will be displayed. To apply multiple filters, user can tap on the Advanced Search button available, adjacent to the Search button; a hidden div will then be rendered below containing textboxes for all the columns. All assignments that were created before the selected date for Creation Date or Updated Date columns and the ones that match other filters will be returned. A empty list will be returned if the search criteria doesn't match any records in the database. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. The existing system does not have a search functionality under Questionnaires. The user will be able to apply multiple filters at a time and the output of the query will match all the filters applied. To search for an assignment by Creation Date, the user will be prompted with a calendar where he can select a date and all the assignments created on or before the selected date will be displayed. To apply multiple filters, user can tap on the Advanced Search button available, adjacent to the Search button; a hidden div will then be rendered below containing textboxes for all the columns. All assignments that were created before the selected date for Creation Date or Updated Date columns and the ones that match other filters will be returned. A empty list will be returned if the search criteria doesn't match any records in the database. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. The existing system does not have a search functionality under Reviews. The user will be able to apply multiple filters at a time and the output of the query will match all the filters applied. The user will be able to apply multiple filters at a time and the output of the query will match all filters applied. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. 1. Search by user name 2. Search by user name that does not exist 3. Search by user email 4. Search by user email that does not exist 5. Search by user email containing a substring 6. Search by user full name 7. Search by user full name is empty 8. Search by user name and email 9. Search for assignments participated. 1. Search by user name 2. Search by institution 3. Search by creation date 4. Search by updated date. 1. Search by name 2. Search by courses used in 3. Search by assignments used in. 2. Search by score 3. Search by text comment length 4. Search by reviewer and reviewee.", ["The document is very detailed, and the design doc is very readable.", "The document is very well organized, and The document is easy to follow the changes.", "the design doc does not explain the changes that were made, and does not show the changes made to the existing system.", "The document is also not very detailed."], [1.0, 1.0, 1.0, 0.0]], "87": ["The scores for different users, participants and teams for several assignments belong to different courses are calculated for multiple views. This code needs to be made faster. Requirement: Participant.find(participant id).scores # should return a Hash or new object, with a single database query. This method should return the scores of a participant from all the assignments in which the participant has submitted. 1. Participant already has its own participant id. Each user has a different participant for each assignment so we do not need to take participant id as the parameter. 2. This also means it should return a hash that will contain the scores of all the assignments in which this user is a participant since participant id changes each time. A new view was required since this view did not exist previously. A new link has been added to the user's homepage: <image> On clicking on this link, the user will be able see his scores for all the assignments he/she has participated in. This is a new view and will look as below: <image>. We needed to write a method and add a view that computed and displayed the scores of a user across all the assignments user has participated in. We added a new method all_scores in the grades_controller.rb. This method executes the following steps: 1. :Executes the below sql query: <code> The user_id is of the current user is passed as a parameter to this query. Once the hash is created and populated accordingly, this hash is used by the view to display to the user. Requirement: assignment.scores # should return a Hash or new object, with a single database query. This method should return scores of all the participants in an assignment. Instead, we get the scores in the query itself thereby reducing the complexity of the code. 2. The previous code was calling several methods that computed the different parts of the score in a loop. We tried to reduce this by having the database query (wherever possible) do most of the work for the method and the method just populate the hash. 3. Even though the single query approach works faster, for assignments that have a lot of responses, we noticed that the code still took some time to complete. The query in itself runs fast (when executed directly on the SQL server). The scores are computed in the get_scores method of the assignment.rb. For all quiz questionnaires taken by the participant, get all the quiz responses. Create a hash and store the score computed by calling Score.compute_quiz_scores. The total score is then calculated and stored in the hash by calling compute_total_score for each participant. 2. For all teams that participated in this assignment, get the scores into the hash by calling Score.compute_scores for each assessment and questions. Each of them might query the database adding to the time taken. We refactored this code to have the following steps: 1. Created an empty hash before hand. 2. Run a single SQL query that will return all the data required by the hash. 3. Loop through the result set to populate the hash. This speeds up the code since there is only a single SQL query that will get executed. The query is outside the loop and hence reduces the time required. The old code and the new code were tested against the same database, on the same machine and network and it was observed that there was a significant reduction in time taken to get the scores. Snapshot of the time taken for the previous method: <image> Snapshot of the time taken for the method after the above changes: <image> As can be observed, the improvement is significant. Requirements: Add a method course.scores which should return a Hash. This method should return scores of all the participants enrolled in a course. 1. We needed to get the scores of all users for all assignments for a given course. A new view was required since this view did not exist previously. This view will be displayed on clicking on the View Scores option in the Actions panel of the courses as highlighted below: <image> On selecting the highlighted option above, the following page will be displayed: <image>. We needed to write a method and add a view that computed and displayed the scores of all users that have enrolled in a course. This method does the following steps: 1. Creates an empty hash. 2. Runs a single SQL query as below: <code> The course id is passed as a parameter to this query. 1. The result returned from the query is used to populate the hash. This hash is then used to display the different parts of the view. 3. Avoided method calls where values could be obtained in the same SQL query itself. 2. The SQL queries could be compiled into database views. However, if such is required, the query can be made into a database view. 3. The view_my_scores method in the grades_controller can also be made similarly fast by replacing multiple database queries and loops with a single query.", ["The writeup is very detailed, but The writeup could have been improved by showing the code snippets and the changes made to the code.", "The writeup would have been helpful to show the code changes, and to explain the changes to the wiki page.", "the code snippets are not explained well, and the code is not described in any detail.", "I would have liked to see a screenshot of the code, and a description of the changes."], [1.0, 1.0, 1.0, 1.0]], "88": ["<link> is an <link> <link> application designed to support team/individual student projects which involves team creation, project sign up, project submissions, document upload (almost any format), and carry out multiple peer review processes for learning and educational purpose. This Open Source application can be cloned from <link> , the latest active branch is <link> . <link> supports email functionality within a Rails application, which involves sending and receiving emails from and to an application. Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.4. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.6. <link> 1.1.7. <link> 1.1.8. <link>. Another major issue is the migration issue from <link> to <link> as a result of which many of the unsupported features for Rails 4 have stopped working. Expertiza has two different Mailer implementations based on type of <link> : Synchronous events and Asynchronous events.<ref> <link> </ref> The synchronous events refer to events that should be immediately notified. All synchronous events are triggered by <link> and the call is made to app/mailers/mailer.rb (formally as model in /app/models/) via the sync_message() method call. Here mailer.rb extends <link> class. The required email template has been added for both generic_message and sync_message method calls. They are sync_message.html.erb and sync_message.text.erb <code> 3. Correct <link> and <link> codes have been added to app/views/mailer/generic_message.html.erb 4. The following line in the sync_message(defn) method has been commented out from app/mailers/mailer.rb in order to encode email correctly.<ref> <link> </ref> <code> 5. The following method calls in the following files have been changed. a) app/controllers/grades_controller.rb b) app/models/courses_users.rb c) app/models/participant.rb Original: <code> Changed: <code>. The asynchronous events are registered to <link> object and a <link> server must be activated to carry out the task. The DelayedMailer class acts as a wrapper class (i.e., adapter pattern <ref> <link> </ref>) to the Mailer class in the /app/mailers/mailer.rb via the delayed_message() method call. These events are added to the <link> by Delayed::Job.enqueue() command. Each event as record is stored in the delayed_job table, which can be browsed on <link> . Most of them are database migration files. To eliminate future table creation issues with <link> gem, we have also changed the integer byte length of <link> tables from 10 to 8 and have revised the <link> methods inside the migration files to improve efficiency. <code> Changes to data migration files are illustrated as follows: Original: <code> Changed: <code> Detailed code changed can be found at <link> . The <link> implementation was done via <link> gem <ref> <link> </ref> but it has not been parsed correctly. 2. The following lines have been added to Gemfile <code> 3. The following parsing errors in app/controllers/assignment_controller.rb have been corrected. Original: <code> Changed: <code> 4. The following code in ap/views/assignments/edit/_rubrics.html.erb has been changed. Original: <code> Changed: <code>. <link> is a <link> framework for <link> programming language. Inspired by <link> , it resembles a <link> specification. To test the emailer features, we have restored <link> test cases for both delayed_mailer.rb (asynchronous maier) and mailer.rb (synchronous mailer). Currently, the fixture<ref> <link> </ref> files are not completed and loading them into the test database may cause failure for the test, so we recommend to comment out the following line in the /spec/rails_helper.rb <code> Future developers must take extreme care to make sure all fixture files work before enable this option. <code>. 5. Enter your <link> server account settings in config/environments/production.rb file. 6. Start the rails server by entering <code> 5. Start the delayed_job server by executing <code>.", ["The documentation is very good, but The documentation could be improved by showing the code snippets and code snippets.", "It would be helpful to show the code changes, and the code snippet in the code.", "The code snippets are not explained in any detail.", "The code snippets are just shown in the text.", "I would have liked to see more prose describing the code changes.", "Also, the code is not described in prose, and the code would be better to show code snippets in prose."], [0.0, 0.0, 1.0, 1.0, 1.0, 1.0]], "89": ["Student should be able to navigate to that page through the link provided in timeline. <image> 1. Viewing the timeline 1. Use case id:1 2. Use case description: View timeline in 'Your work' page of selected assignment 3. Actor: Student 4. Precondition: Student should be logged into Expertiza 5. Post condition: Student can view the due dates and timestamps of the activities, if any. 2. Viewing the due dates 1. Use case id:2 2. Use case description: View due dates only when no submissions have been made 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment 5. Post condition: Student will view only dues dates in timeline when no submissions are made. 3. Viewing hyperlink submissions in timeline 1. Use case id:3 2. Use case description: View hyperlink with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have made a hyperlink submission 5. Post condition: Student will view hyperlink of the submitted link with timestamp in timeline 4. Viewing files uploaded in timeline 1. Use case id:4 2. Use case description: View file name with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted a file 5. Post condition: Student will view file name with timestamp in timeline and would be able to download the file upon clicking on filename. 5. Viewing links to submitted reviews with round number 1. Use case id:5 2. Use case description: View review links with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted a review 5. Post condition: Student will view review link with timestamp and round number in timeline and would be redirected to the review submission upon clicking on the link. 6. Viewing links to author feedback 1. Use case id:6 2. Use case description: View author feedback links with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted an author feedback 5. Post condition: Student will view author feedback link with timestamp in timeline and would be redirected to the author feedback submission upon clicking on the link. Currently when a student logs into Expertiza, he could see the student task list page. In this project, a timeline in the student task list page would be added to navigate student to the due dates and the necessary links easily and keep a track of them. After the addition of the functionality, the student task list page would have the timeline as shown below. Timeline feature is used to display timeline with due dates, submitted links, submitted files, self review, reviews performed(multiple rounds) and Author Feedback. 1. When the student doesn't submit the assignment on time , due date passed would be shown in the timeline. 2. If the hyperlink submitted by student doesnt get submitted properly, it would not show any link to hyperlink on timeline. <image> <image> <image> Testcase 1: A hyperlink is submitted and expect to find 'submit Hyperlink' in the student task page. Testcase 2: A file is submitted and expect to find 'submit File' in the student task page. Expect to find 'round 1 review' in the student task page. Check timeline for 'submit Hyperlink', 'submit File' and 'round 1 review'. <image>. 1. Step1 : Login to Expertiza as Student 2. Step2 : Click the Assignments Tab 3. Step3 : Select an Assignment of choice 4. Step4 : Select 'Your Work' Link and the Timeline would be displayed with only due dates <image> 1. Step5 : Submit a hyperlink in 'Your Work' 2. Step6 : The hyperlink submitted would be refelcted in the Timeline along with the Timestamp. <image> 1. Step7 : Click on the hyperlink displayed which would redirect to the submitted link page. 2. Step8 : Upload a File in 'Your Work' 3. Step9 : The uploaded filename would be reflected in the Timeline along with the Timestamp. <image> 1. Step10 : Submit a review 2. Step11 : The submitted review link would be reflected in the Timeline along with the Timestamp and Round number page. <image> <image> 1. Step12 : Click on the review link displayed to be redirected to the submitted review link page. 3. Step14 : The submitted feedback link would be reflected in the Timeline along with the Timestamp. <image> 1. Step15 : Click on the round review link displayed to be redirected to the submitted feedback link page.", ["The writeup is very detailed, and the design doc is very readable.", "The writeup would have been helpful to have more detail on the tests, and to explain the changes made.", "the design doc does not explain the tests well, and the design doc would have helped to have a more detailed description of the changes.", "Also, the design docs are not very detailed.", "the design docs should have explained the changes, and how the design docs would be implemented.", "For example of that the design docs should have explained the changes, and how the design docs would be implemented : the test plan would have shown the changes that were made, but not the tests.", "This is a good description of what was done."], [1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0]], "90": ["Once someone has peer reviewed a project, the authors of the project can also provide feedback for this review, called ‚Äúauthor feedback.‚Äù While grading peer reviews, it would be nice for the instructors to include the author feedback, since it shows how helpful the peer review actually was to the author of the project. Expertiza allows instructors to view kinds of reports of assignments in their courses such as submissions, scores, and review reports. To improve the report views, some table columns such as team name, score, the average should be made sortable by using the same existing sort library. Workflow <image>. We have to sort ‚ÄúReview done‚Äù, ‚ÄúTeam reviewed‚Äù, ‚ÄúScore awarded/Avg score‚Äù. in the ‚Äúview review report‚Äù table. <image>. We will be using tablesorter function of jQuery to sort the table.To sort the columns that have constraints, custom scripts will be created. Tablesorter supports custom sorting. By default the sorting is disabled on the columns, we must enable sorting on those columns in order to make it sortable. Three types of scenarios may arise: 1. Sorting by columns alphabetically - To sort the columns alphabetically, the table-head attribute must include sorter-true class with it. 2. Sorting by date - Sorting by date includes creating a generic format for all dates(mmddyyyy). This generic format will be used to parse dates and sorting will be done based on this format. For ‚ÄúAuthor feedback report‚Äù table, we have to change the header name ‚ÄúReview response rejoined‚Äù to ‚ÄúReview responded to‚Äù and ‚ÄúLast rejoined at‚Äù to ‚ÄúLast responded at‚Äù. Then, sort ‚ÄúRejoinder‚Äù and ‚ÄúReview ‚ÄúReview responded to‚Äù as string (alphabetically), sort ‚Äú# author feedbacks done‚Äù by the first number then the second number (same as ‚ÄúReview done‚Äù in the ‚ÄúView review report‚Äù table) and sort ‚ÄúLast responded at‚Äù as date. We will use tablesorter function of jQuery to sort the table. To sort the columns that have constraints, custom parser will be created and used on top of tablesorter. <image>. Add a header, ‚ÄúReports for [name of assignment]‚Äù at the top. We will add header on top of Dropdown menu. <image>. For Author feedback reports, when no feedback has been submitted by any student, the names of the participants appear in a strange horizontal format. Fix this so that the formatting is correct, regardless of how many participants have done author feedback. <image>. <image>. We added jquery tablesorter in the script section to sort the columns. We had to enable the sorting on various columns so we added \"sorter-true\" in class of all the table headers. <image> <image> <image> <image>. We used jQuery tablesoter to sort the data in app/views/reports/_feedback_report.html.erb. We created custom parser to sort the dates in the last column and placed it tablesorter script. Due to blank columns the tablesorter threw an error. When the sorting is done based on rejoinder column, student data in rejoinder column will be hidden. While sorting on other columns, data in rejoinder column will be made visible. <image> <image> <image> <image> <image> <image> <image>. We added a header on top of Dropdown menu. <image> <image>. For Sorting Review Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select Review Report from Drop-down menu. 5. Sort the columns by Clicking on it. For Sorting Author Feedback Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select Author Feedback report from Drop-down menu. 5. Sort the columns by Clicking on it. For Sorting Teammate Review Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select teammate review report from Drop-down menu. 5. Sort the columns by Clicking on it. For Missing Header on View Reports 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. For Rendering Proper Format in Author Feedback Report 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. From drop-down menu select Author Feedback Report.", ["The writeup is very good, but The writeup could have been better if The writeup had explained the changes made to the code.", "The writeup would have been helpful to have a description of the changes, and how they were made.", "Also, the code is not very readable.", "The code snippets are not shown in the right order.", "The code snippets are shown in a different order, and The code snippets should be shown in different order."], [1.0, 1.0, 1.0, 0.0, 0.0]], "91": ["It uses <link> Framework. 1. Refactor automatic_review_mapping method 1.1. Write failing tests first 1.2. Split into several simpler methods and assign reasonable names 1.3. Extract duplicated code into separate methods 2. Refactor response_report method 1.1. Write failing tests first 1.2. Use factory pattern to create a corresponding report according to the switch condition 1.3. Create corresponding helper classes for different report types. Review mapping controller handles the review responses that are done on every assignment. It assigns reviews to different teams or individual student depending on the type of assignment(team project or individual project). As this method was long and complex it needed to be broken down into smaller methods with specific functionality. Original: <code> After Refactoring: <code>. This method automatic_review_mapping was very long and complex. A few methods in the controller were acting as private methods for this method and were being called only in this method. So this automatic_review_mapping method was split into smaller methods. All these small methods and the private methods were shifted to a helper class: AutomaticReviewMappingHelper. Methods 1. initialize(created) 2. automatic_review_mapping_strategy(updated) 3. execute_peer_review_strategy(updated) 4. peer_review_strategy(updated) 5. assign_reviewers_for_team(updated) The common parameters that are used in the automatic review mapping method are defined here so that they can be used as instance variables throughout for better flow of the code. <code> <code> <code> <code> <code>. This method consisted of long case statements making it a long and complex to understand. So this method was refactored using Factory Design Pattern. Original <code> After Refactoring <code>. As seen, the controller method originally was sharing a lot of instance variables with the corresponding views, and it has the long switch statements. Each switch condition is corresponding to a different type of report. Thus, different report helper classes are created for different types of report. These helper classes are grouped in the helper module: ResponseReportHelper. <code> <code> <code> <code> <code> <code> <code> <code> <code> The <link> is used to create a corresponding type of report, according to the switch condition. <code>. 1. Tests for these methods already existed. We altered them according to the refactoring that needed to be done. 2. Additional tests were added for the corner cases that weren't being tested. 4. After Refactoring the tests pass for all the test cases. 5. Test cases for automatic_review_mapping for which tests are run: 1.1. all the parameters are 0 1.2. all parameters except student_review_num are 0 1.3. calibrated parameters are 0 review_num are non-zero 1.4. Team is empty, max team size is 1 and when review_num parameters are not zero 1.5. Create Teams when team is empty 1.6. when artifacts num are non zero it should set the instance variables and call methods. 1. Test cases for response_report for which tests are run: 1.1. when type is SummaryByRevieweeAndCriteria 1.2. when type is SummaryByCriteria 1.3. when type is ReviewResponseMap 1.4. when type is FeedbackResponseMap 1.5. when assignment does not have varying_rubrics_by_round feature 1.6. when type is TeammateReviewResponseMap 1.7. when type is Calibration and participant variable is nil 1.8. when type is PlagiarismCheckerReport Tests for automatic_review_mapping: <code> Test for response report: <code> Additional Tests in the Controller: <code> Additional Tests in helper_spec: <code>. Tests passed for Revised Code: 1. Test for helper <image> 1. Test for Controller <image>. git clone <link> 1. go to expertiza folder cd expertiza 1. run bash setup.sh bash setup.sh 1. run bundle install bundle install 1. run rails server rails server 1. Use firefox in the image and test response_report method 1.1. Type in <link> 1.2. If you need to log in, use account name ‚Äúinstructor6‚Äù, and password ‚Äúpassword‚Äù. 1.3. In order to view different reports, select different types of report and click ‚ÄúSubmit‚Äù button. <image> 1. Use firefox browser in the image and test automatic_review_mapping method 1.1. Type in <link> 1.2. If you need to log in, use account name ‚Äúinstructor6‚Äù, and password ‚Äúpassword‚Äù. <image> <image> <image>. 1. <link> 2. <link> 3. <link>.", ["The writeup is very detailed, but The writeup could have been better if The writeup had more description of the changes made.", "The writeup would have been helpful to have a description of what was done, and why.", "The code snippets are not explained well enough.", "The code snippets are not very readable.", "I would have liked to see more description.", "Also, The code snippets should be shown in a more readable format."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "92": ["Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.4. <link> 1.5. <link> 1.6. <link> 1.7. <link> 1.8. <link> 1.9. <link> 1.10. <link> <link> <link>. Questionnaire Controller interacts with the user to create and edit questionnaires such as review rubrics, teammate-feedback rubrics, quizzes, and surveys. This page provides a detailed description of Open Source Project on Expertiza for refactoring the questionnaire controller. Why is Refactoring Required 1. It helps in making the code more understandable 2. It makes the code more maintainable 3. To remove repetition of code. The scope of the project is to refactor Questionnaire Controller which is very huge, in order to follow the standard principle of Fat Models and slim controllers. 1. questionnaire_controller.rb 2. questionnaire_helper.rb 3. advice_controller.rb. 1. Functionality moved to quiz_questionnaire.rb. 2. edit_advice method was not being used, so it was removed. 3. save_advice moved to the advice_controller. 4. copy, update_quiz, valid_quiz methods were long and have been broken up. clone_questionnaire_details was also broken up and renamed. 5. Added comments to select_questionnaire_type 6. Debug output (print statements) have been removed. 7. Changed code to follow the global rules. 8. save_new_questions, delete_questions, save_questions have been moved to a separate class. <link> <link> <link>. A Subset of the UML class diagram including only the related classes for this project can be drawn as shown below. <image> Questionnaire Controller is the superclass of QuizQuestionnaire and all the other classes - User class, Advice class and Questionnaire classes are related model Classes to the controllers that we have modified. Several methods in Questionnaire Controller class required refactoring to ensure that the change is reflected in the entire project. The names were changed to follow method naming conventions in Ruby. Deprecated code was removed and re-coded to ensure that the code worked in future version of Rails as well. Methods that are more general in the sub classes were moved to the parent class. Some methods that calculate that were colliding with other files were moved to a helper method questionnaire_helper.rb . 1. The quiz questionnaire related methods such as view_quiz, update_quiz, new_quiz and validate_quiz are moved to questionnaire_helper.rb to make the questionnaires_controller thin and follow global rule of thin controllers and fat models . <image> 2. Non Restful method names changed accordingly to make them Restful. Before <code> After <image> 3. edit_advice method is evidently not used, and removed. This edit function is already implemented in advice_controller.rb. 4. save_advice has been moved to the advice_controller. 5. Global rule changes for using Hash - value key pair implemented [Use key: ‚Äòvalue‚Äô, not :key => ‚Äòvalue‚Äô] accordingly. <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> 6. \".eql? <code> 7. Removed duplicate and redundant code making the code DRY. <code> 8. Removed unnecessary debug prints present in the code. <code> 9. Used `&&` and `||` rather than `and` and `or` to keep boolean precedence as per global rules. <code> 10. More global rule changes. <code>. The following object oriented design principles were followed during refactoring: 1. Single Responsibility Principle : The single responsibility principle states that every context (class, function, variable, etc.) should have a single responsibility. It was maintained that each method should be involved with a single responsibility and the code that was not related to that particular functionality was moved to other method. This was also taken care of in terms of classes. The repetitive and redundant code was removed from the associated classes and methods. We tested the functionality of the questionnaires controller before and after refactoring by manually creating and listing the questionnaires, there is no change in behavior observed. After Refactoring, the questionnaire controller is working as before. <image> <image> <image>. 1. Refactoring was performed as per requirements in the files questionnaire_controller.rb, and advice_controller.rb. 2. The code from models cannot be moved directly to controllers, so the code was moved to the helper class questionnaire_helper.rb. 3. Some methods with confusing method names have also been renamed. <link> <link> <link> <link> <link>.", ["The writeup is very detailed, and explains the changes well.", "The writeup is not clear what the changes are, but the changes is clear that the code is being refactored.", "the code is not described in any detail, but the code changes are described.", "I would have liked to see more detail on the code.", "For example of that I would have liked to see more detail on the code : the code for the test plan is not explained.", "that For example, the code for the test plan is not explained is a good example of a design doc, but not a good description of the changes.", "Also, the description of what was done is not very detailed."], [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "93": ["Expertiza has a functionality that allows students and instructors to receive and give grades, respectively. This functionality is implemented in the grades_controller.rb file. This controller currently violates some essential Rails design principles including having too much calculation and having methods' names that violate Ruby naming convention. Here are the refactoring steps needed to be taken in order to fix the grades_controller.rb . 1. Create a new private method to encapsulate the population of the view model for all the necessary data (lines 102-107). 2. Simplify the logic surrounding the error flashing. The nested logic seems unnecessary (lines 190-192). 3. In line 300: 1.1. Increase readability by fixing whitespace according to the common Ruby Programming guidelines. 1.2. Return is not needed here. 1.3. Remove space between ‚Äò!‚Äô and its argument. 1.4. Use meaningful variable names and break up the expression. 4. Move these functions into grades_helper.rb and change their names to be more Ruby-like: 1.1. calculate_all_penalties 1.2. calculate_penalty_attributes 1.3. mean (also cease the usage of the assignment) 1.4. calculate_average_vector 1.5. build_score_vector 1.6. Remove_negative_scores_and_build_charts 5. The previous programmer used update_attribute, which is concerning, as validations are ignored (Line 153 and 219). 1. Comment changed that was wrong (\"head\" into \"heat\") <image> 1. Line 102-107 (New Private Method made to encapsulate this) <image> <code> <image> <code> <image> 1. Line 190-192 <image> <code> <image> 1. Line 300 <image> <code> <image> 1. Lines 153/219 <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image>. To test this controller, run the following command to verify the changes do not break any core functions. <code> <image> <image> When you run the program and get to login page. Use credentials below for instructor. <code> <image> A good student to impersonate for testing is <code> <image> <code> <image> <code> <image> <code> <image> <code> <image> 1. To Do: Add Rspec tests to grades_helper.rb Important views for using refactored functions <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code>.", ["The writeup is very good.", "The writeup explains the changes well.", "The code snippets are well organized.", "I would have liked to see more of The code snippets.", "The code snippets are not very detailed.", "Also, the code is not very readable.", "There are no screenshots of the changes.", "that There are no screenshots of the changes is a good thing."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0]], "94": ["Expertiza is an Open Source Software project developed by NCSU. It allows the instructor to create assignments as well as modify existing assignments. Students can signup for topics in an assignment and can submit articles, codes, web-sites etc. It is a web application built on Ruby on Rails framework. It also allows students to review the submissions that have been made other students. In the current implementation only the students can sign up for topics. Because of this, no higher authority (e.g instructor) can control the signups in a straightforward manner. If the instructor wishes to assign a particular topic to a team or remove a team from a particular topic then the instructor has to impersonate that student and sign up for the topic. Due, to the current implementation, you can neither handle the mistakes in signups , nor make modifications to the existing signups without impersonation. The new implementation allows an instructor to assign a particular topic to a team as well as remove a team from a topic.This functionality has been added in views/sign_up_sheet/_all_actions.html.erb which now has a '+' sign to assign a topic to a particular user. If the instructor clicks on this, then a view will appear which takes in the username of a student to be added. When the box is filled out and the ‚Äúadd‚Äù button clicked, then the indicated user‚Äôs team is signed up for the topic. If there are no slots available for that topic then the team will be put on the waiting list. There is also a 'X' sign that will help the instructor to remove a team from a topic. Some of the scenarios where the instructor might wish to add a team would be if the sign up deadline has passed, or if the instructor has decided to update the maximum number of teams allowed to choose a particular topic. The instructor might want to drop a team from the topic if the team doesn't want to proceed with the same topic for the assignment. With the new implementation, Instructors/Teaching Assistants do not need to go through the trouble of impersonating a student in order to add or drop their team from topics. We have chosen the nested if-else approach because there were many scenarios , all of which required us to take different actions. Changes were made in the following files - 1. controllers/sign_up_sheet_controller.rb 2. views/sign_up_sheet/_all_actions.html.erb 3. views/sign_up_sheet/assign_topic.html.erb 4. views/sign_up_sheet/remove_topic.html.erb Functions added to implement functionality :- 1. update_team 2. assign_topic 3. remove_team 4. remove_topic In the sign_up_sheet controller, two major methods were added: <image> <image> Two additional icons have been added in the Actions column. The ‚Äògreen plus‚Äô icon allows you to add a team to the current topic. Clicking on the icon redirects you to a form, where the admin is required to enter the username of the person whose team he wishes to add. <image> Clicking submit then redirects back to the original page, with a flash message containing the status of the operation. <image> In case the topic has already been assigned the maximum number of teams, the new team is added to the waitlist. <image> The 'red cross' icon is used to remove a team from the given topic. Clicking on it takes the admin to a form, where he is required to enter the username of one of the team members belonging to the team that is to be removed. Submitting the form redirects the user back to the original page, with a flash message indicating the status of the remove operation. <image>. The system can take in individual users who don't have a team or topic and can add him/her to the existing teams that are enrolled for the topic. 1. <link> 2. <link> 3. <link>.", ["The document is very detailed, but The document could have been improved by a bit more prose.", "The document would have been helpful to have a more detailed description of the changes made.", "The code snippets are not explained well enough.", "The code snippets are not clearly explained, and The code snippets should be explained in more detail.", "Also, the code snippet for the test plan is not explained.", "that Also, the code snippet for the test plan is not explained is a good example of how the code is not described."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "95": ["3. In the DB the default number of meta-reviews allowed and required should be null. 6. When a user requests a new meta-review, the field which says the number of meta-reviews left ( refer to above image ‚ÄúNumbers of Meta-reviews left:‚Äù) does not change and the button to request a new meta-review disappears. The code below shows the conditional used to display the \"Request new meta-review\" button. Currently, the number of required and allowed meta-reviews is always being set to 3 in the database. When the checkbox for setting meta-review limits is unchecked, the values of number of meta-reviews allowed and required should be null. The \"Request new a meta-review\" button should be hidden when: 1. The number of meta-reviews in-progress is greater than the maximum allowed outstanding reviews. 2. The number of reviews allowed is limited AND the total number of meta-reviews completed or in-progress is greater than the number allowed. The code below shows the conditional used to display the \"Request new meta-review\" button. The user should NOT be able to see the 'Request a new meta-review to perform' button when there are no reviews available. 1.1.1. A student should NOT be able to request a meta-review on their own review. 1.1.2. When the meta-review limit on the assignment is set to 1 then a student should NOT be able to request a second meta-review. 1.1.3. The user should not be able to see the 'Request a new meta-review to perform' button when they have performed all valid reviews. 1.1.1. The user should be able to click the 'Begin' button and still see the 'Request a new meta-review to perform' button. 1.1.2. The user should NOT be able to see the 'Request a new meta-review to perform' button when they have reached the meta-review limit. 1.1.3. If the user requests two meta-reviews but has not submitted, then they should not be able to request a new meta-review. 1.1.4. The user should be able to request a meta-review if they are above their required but below the allowed number of meta-reviews. Number of meta-reviews left should decrement when a user requests a meta-review. 1.1.1. The user should see the number of meta-reviews left decrement after a new meta-review is requested. 1.1.2. The user should see the number of meta-reviews left decrement after a new meta-review is completed. All meta-review tests make meta-reviews allowed only during the meta-review round. 1.1.1. The user is able to SUBMIT a simple meta-review. and set the number of allowed and required meta-reviews. 1. User should NOT be able to see 'Request a new meta-review to perform' button when there are no reviews available. 1. User is able to SAVE a simple meta-review. 2. User is able to go BACK during a simple meta-review since this functionality is available for reviews. 3. When the limit and required number of meta-reviews on the assignment are equal, then a student will see they need to submit exactly that number of meta-reviews. 4. When there are more meta-reviews allowed than required, then a student will see they need to submit between the two numbers of meta-reviews 5. When the meta-review limits for an assignment are unset then a student will see that the number of meta-reviews aren't limited 6. A student should not see a number of required or allowed meta-reviews when there are no limits on meta-reviews 7. A student should see the number of meta-reviews decrement after a review is requested 8. A student should see the number of meta-reviews decrement after they complete a review 9. A student should not be able to request a meta-review on their own reviews 10. If the meta-review limit on the assignment is set to 1 then a student should not be able to request a second meta review 11. User should not be able to see 'Request a new meta-review to perform' button when they have reviewed all valid reviews already. 1. User should be able to request more than one meta-review before completing any 2. User should not be able to see 'Request a new meta-review to perform' button when they have reached the meta-review limit 3. User should not be able to request more than two meta-reviews without completing at least 1 4. A student should be able to request a meta-review if they are above their required but below their allowed meta-reviews <image>.", ["The code is very readable, and the code snippets are well organized.", "The code would have been helpful to have more detail on the code changes, but The code is not clear what the code changes are.", "The code is not very detailed, and The code would have helped to have a more detailed description of the code changes.", "Also, The code is too long, and I think The code would be better to have the code in the code doc, rather than just the code."], [1.0, 0.0, 1.0, 1.0]], "96": ["A response is the object that is created when someone fills out a review rubric, such as when one writes a review, gives feedback to a reviewer, or fills out a survey. It is not the worst controller in the system, but it would be much clearer if its method names were more descriptive of what they do. This project tries to modify and refactor the response_controller.rb in a more clear way. response_controller.rb response.rb. 1. def assign_instance_vars 2. def scores 3. def new 4. def set_questionnaire 5. def set_questionnaire_for_new_response 6. def show_calibration_results_for_students. Since most of the method involved in our project is private methods and all of the public methods in response controller were already tested. Thus, we will focus on testing methods we created in the model class: response.rb spec/models/response_spec.rb will be edit in order to test our methods. We did the following refactor to make this method more clear: 1. the instance variables are actually action handles to the views from controller including \"new\" and \"edit\", thus refactoring method name to assign_action_parameters would be better to understand what this method is trying to do. 2. This method is a private helper method and is used in new and edit methods to set the action parameters for the new and edit actions <image> 1. After renaming, the method became more clear of what it's doing <image>. 1. This method was already defined in other classes and is useless in the current class, thus remove it would be a reasonable choice. <image>. 1. In the method set_content in response_controller.rb, there is one line of code that \"new_response ? set_questionnaire_for_new_response : set_questionnaire\". Thus, we can tell the method set_qustionnaire will called when new_response is false, which means that the object was triggered by an existing response. In the method set_questionnaire, the line of code that ‚Äú@questionnaire = @response.questionnaire_by_answer(answer)‚Äù, which is looking up the questionnaire answered by this existing response. Therefore, refactoring the method name to find_quesetionnaire would be better to understand. <image>. 1. In the method set_content in response_controller.rb, there is one line of code that \"new_response ? set_questionnaire_for_new_response : set_questionnaire\". Thus, we can tell the method set_qustionnaire will called when new_response is true, which means that the object was triggered by a new response. In the set_questionnaire_for_new_response method, the \"cast\" statement informs us that the new questionnaire are created based on the types or Reviewers, such as Review, Metareview, Teammate Review and so on. Therefore, refactoring the set_questionnaire_for_new_response method to create_new_questionnaire would be better to understand. <image>. 1. This method shows the result of expert review for reviewer after teacher or TA submit the calibration by editing the assignment. 2. The method makes about five database accesses and the code is quite messy and thus break it into 2 methods with the business logic moved to response.rb would be a good way to make the code in controller cleaner. <image> 1. The method get_questions_from_assignment is the part that's inside the model class and contains logic of mapping reviews with assignments in the questionnaire and return questions in the joined table <image>. <image>. <image>. <image>. 1. This method contains a complicated condition that determines whether the submission has been updated since the last time it was reviewed. If it has not, then the reviewer can edit his/her previous review. If there has been an update, then the reviewer gets a new review form to ‚Äúupdate‚Äù the review. 2. So we break the new method into two methods: new and get_most_recent_response and put the logic into the response controller class. 3. The method get_most_recent_response in the model class tests whether there has been a review since the last file or link was submitted and in the controller this method was called to get the newest response. <image> 1. The new method after refactoring, now the code is quite clear and with only one appearance of variable \"@response\" <image>. <image>. <image>. Most of the method involved in our project is private methods and all of the public methods in response controller were already tested. Thus, we will focus on testing methods we created in the model class: response.rb spec/models/response_spec.rb will be edit in order to test our refactored methods <image>.", ["The writeup is quite good, but The writeup could have been better to explain the changes in more detail.", "The writeup would have been helpful to have a list of the changes, and a description of what they are doing.", "Also, the code snippets are not very clear.", "the code snippets are just a list, and it would have helped to have more prose describing what the code snippets do."], [1.0, 1.0, 1.0, 1.0]], "97": ["<image> This button takes the student to the create/edit Review Questionnaire page. The student then can create a new rubric. Added a new field called 'supplementary_rubric' to the 'teams' table so that the supplementary rubric could be stored. Supplementary rubric questions are visible along with instructor generated rubrics. <image> ‚ÄúView‚Äù function for a rubric displays answers submitted for the Supplementary rubric questions along with Review Questionnaire for Reviewer. <image> ‚ÄúYour Scores‚Äù function for the Reviewee displays answers submitted for the Supplementary rubric questions along with Review Questionnaire. <image> \"Alternate View\" for \"Your scores\" should also include Supplemenraty Rubric questionnaire. 3. Polymorphism 4. Inheritance Use Case Here SRQ is used for newly added field supplementaryReviewQuestions in the Teams table and it is initially set as null for all the table entries.Once a student adds a specific Questionnaire to his project this field stores the id of that Questionnaire which is stored in the Questionnaires table. <image> Use Case to Add Questionnaire Functionality: In the \"Your Work\" section, Student will be shown a button \"Manage Rubric\", when clicked, if the supplementaryReviewQuestions column in Teams table is null for that team, Questionnaire will be created and SRQ in Teams table will be updated to contain the Questionnaire ID. The student will be directed to the Edit Questionnaire page with exsiting logic. <image> Use Case for Show Questionnaire Functionality: When the student orders for new reviews, if the supplementaryReviewQuestions column in Teams table is not null for the assigned team, extract the questionnaire for supplementary reviews and append in a new section below normal Questionnaire. <image> Use Case for Show Review( and Scores) Functionality: When the Student or the Instructor checks the reviews and scores on rubric, if the supplementaryReviewQuestions column in Teams table is not null for the team, extract the questionnaire review for supplementary questions and append in a new section below normal Questionnaire Reviews. To provide the view for the scores of a team we will add one more partition containing the scores for the supplementary questionnaire and implement the already build logic to get and display the scores. 2. To check if clicking on \"Manage Supplementary Rubric button\" creates a questionnaire id in Supplementary rubric column of Teams Table. 3. To check if a reviewer creates a Rubric, the assigned student is able to see the Supplementary Review Questionnaire whenever he/she logs in and tries to review it. <code> <code> <code> <code> end. Here SRQ is used for newly added field supplementaryReviewQuestions in the Teams table and it is initially set as null for all the table entries.Once a student adds a specific Questionnaire to his project this field stores the id of that Questionnaire which is stored in the Questionnaires table. <image> Use Case to Add Questionnaire Functionality: In the \"Your Work\" section, Student will be shown a button \"Manage Rubric\", when clicked, if the supplementaryReviewQuestions column in Teams table is null for that team, Questionnaire will be created and SRQ in Teams table will be updated to contain the Questionnaire ID. The student will be directed to the Edit Questionnaire page with exsiting logic. <image> Use Case for Show Questionnaire Functionality: When the student orders for new reviews, if the supplementaryReviewQuestions column in Teams table is not null for the assigned team, extract the questionnaire for supplementary reviews and append in a new section below normal Questionnaire. <image> Use Case for Show Review( and Scores) Functionality: When the Student or the Instructor checks the reviews and scores on rubric, if the supplementaryReviewQuestions column in Teams table is not null for the team, extract the questionnaire review for supplementary questions and append in a new section below normal Questionnaire Reviews. To provide the view for the scores of a team we will add one more partition containing the scores for the supplementary questionnaire and implement the already build logic to get and display the scores. 1. Created a migration script to add a new column 'supplementary_rubric' to the Teams table 2. To add supplementary rubric: In submitted_content_controller.rb: created a new function 'manage_supplementary_rubric' <code> In the view, submitted_content/_mail.html.erb: Created a button 'Manage Supplementary rubric' to be shown in 'your work' tab <code> After this, the same functionality of adding a rubric and questions is used as before. 2. To check if clicking on \"Manage Supplementary Rubric button\" creates a questionnaire id in Supplementary rubric column of Teams Table. 3. To check if a reviewer creates a Rubric, the assigned student is able to see the Supplementary Review Questionnaire whenever he/she logs in and tries to review it. <code> <code> <code> <code> end.", ["The document is very detailed, and the design doc is very readable.", "The document is very well organized, and The document is easy to follow the code.", "The only thing that I would have liked to see is a description of the changes to the code, and how they were made.", "Also, the description of how the tests work is not explained.", "This is not explained is a good example of how to show the tests, despite that Also, the description of how the tests work is not explained, and I would like to see a description.", "I would also like to know how the test plan is implemented."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "98": ["Review \"tags\" are a form of feedback on Expertiza where students \"tag\" (classify) text from peer reviews, using Yes or No answers to questions chosen specifically for each tag deployment. <image>. It can be difficult for students to find a tag they missed on the Team View page, and other teams are working with ML algorithms to \"pre-tag\" as many reviews as possible, leading to a granular field of completed/incomplete tags. At this time, the only tagging feedback students see are the tag prompts and a Javascript counter with a numeric representation of how many tags have not been completed. In order to find a missed tag, students have to scroll the page and manually search for tags that aren't done. In order to help students complete all the tags for an assignment, we propose a new, dynamically generated heatgrid on the \"Your Scores\" view that breaks down reviews and tags by round, question, and review, which uses visual cues to help students find incomplete tags. The heatgrid shows both a total count of \"complete\" out of \"available\" tags, and individual tags with color-scaled feedback for completeness. The new heatgrid must handle these requirements, and display visual feedback accordingly: 1. Single and multiple round reviews 2. Reviews with and without tag prompts 3. Dynamically update as tags are completed 4. Different tag deployments will use different numbers of tags per review 5. Use of existing review row-sort functionality 6. Not rely on the database for tag data, as AnswerTag database rows may not exist until tags are clicked. For example, if there are 370 tags in total on this page and 10 of them have already been tagged, then 10/370 will be displayed. This element will also be updated dynamically when users make tag changes on this page. A simple JS function to count all the tag elements on current page. It will be invoked when the page first being rendered and also when any tags are changed by users. A simple JS function to count the number of tagged tags on the current page. It will be invoked when the page first being rendered and when any tags are changed by users. This JS helper dynamically render the page when any tags are changed by users. <image>. For manual testing purposes, we logged in as instructor6 in order to: 1. View the tagging report as an instructor/TA (Instructor tagging is permitted, and tags are separate from Student Tags) on view_team 2. Impersonate a student to view the tagging report on view_team as a student 3. View the mini-report on Alternate View both as students and instructors 4. Ensure that changing of tags updates the Tagging Report 5. Ensure that the Tagging Report interacts well with the existing layout 6. Ensure that the Tagging Report is hidden/shown when \"Hide Tags\" is clicked 7. Ensure that the Tagging Report accordions as expected when clicked 8. Confirm that mouseover events display the expected tooltips, including color scheme for the \"10 out of 250\" cell as well as color scheme for the main report body, and the Expand/Collapse tooltip 9. Ensure that the Tagging Report is hidden when there are no Tags available for a view_team page 10. Ensure that the Tagging Report was compatible with different tag deployments containing different numbers of tags A good example of functionality for a project with reviews and one with reviews can both be found with student7856. Program 2 has plenty of reviews that can be tagged and untagged and checked that the heatmap functionality is working. Program 1 does not have any reviews to tag and was checked to ensure that nothing broke due to not having any reviews to tag. Many recent assignments (2017-present) which have reviews have tag deployments. <image> 3. Both instructors and students can enter tag data. To view the instructor view, tags, and tagging heatgrid, click \"Assign Grade\". <image> 5. Click \"Your Scores\" to view the main View Team page which includes most of the functionality, including the tag heatgrid. On the main View Team Page, click a question row and change one or more tag prompts, to ensure the heatgrid and fraction are updated. c. Click \"Hide tags/Show Tags\" to show and hide all tag-related data. e. Click the row-sorter for question or average, and change one or more tag prompts to ensure the heatgrid is still updating the correct tags <image> 7. To view the \"Alternate View\", navigate back and click \"Alternate View\". This view should show a small counter near the top of the page with tag completion data. 9. We suggest now impersonating student7856 and navigating to Program 2 , then Your Scores to view a series of reviews with all tags completed so you can see how the interface behaves. 10. Finally, we suggest viewing an assignment which has reviews, but does not have a tag deployment assigned, to ensure none of the heatgrid materials related to tagging are displayed.", ["The writeup is very detailed, but The writeup does not explain the changes made to the design doc.", "The writeup is not clear how the code is changed, and the code would be helpful to have a description of the changes.", "The code snippets are not explained, and The code snippets should be.", "The code snippets are not shown in the UI, and The code snippets are not described in any detail.", "This is a good example of what the design docs should do.", "I would have liked to see a description, and a link to the code, to show the changes that were made."], [0.0, 0.0, 0.0, 0.0, 1.0, 1.0]], "99": ["The quality of the reviews can be improved if students are shown some example reviews while they peer review. These example reviews can either be taken from the assignment of current semester or from the same/related project of previous semesters. The objective of the project is to add a feature to show some good sample reviews while the students peer review other teams work. To enable this, students while submitting their peer review give a consent on whether their reviews can be shown as an example to others. Instructors then select a subset of these reviews to be posted as an example reviews. These example reviews are shown in the peer review page (Other's work link) to the entire class. 3. The student can remove their consent anytime, and the sample review should no longer be visible to other students. In the order of flow, 1. Student's Consent: In each review assignment, there will be a checkbox that says \"I agree to share my review as a sample for others\" then students can decide to check this box or not just before they submit reviews. Sequence Diagram: <image> 2. Instructor's Selection: The instructor can select from among the \"public\" reviews and decides which to make visible to other students doing a particular assignment, i.e. all participants in that assignment. If this review has already been shown as an example, the button should be ‚Äúremove this review from examples‚Äù instead. Sequence Diagram: <image> 3. List of Sample Reviews: A participant can see these \"exemplary\" reviews by going to \"Others' work\" for the assignment in question, and clicking on one or more links that say, e.g., \"Sample review\". And it should be shown just below the title ‚ÄúReview for ...‚Äù. 1) Add 'visibility' column to responses 2) Add new Table 'sample_reviews' 2. Mapping of Reviews and Assignment: The example reviews can either be taken from an assignment of the current course or it could be from an assignment from a previous course. One idea is that when clicking to ‚Äúmake this review an example‚Äù, it will link to a page where you can select an assignment to which you have access (the same as the list of ‚ÄúAssignment‚Äù in the tree_display), then the example review will be shown to all participants of that specific assignment. 5. To allow instructor to select among the public reviews to shown as examples to all students a button 'Mark as an example' in the popup views. Changes corresponding to this is made in /app/views/popup/team_users_popup.html.haml 5. To enable students to see the example reviews, a link Sample reviews is added in the Other's work page. As a Student (Scenario 1): Student giving consent to make their review public 1. Log in. 4. Click on any assignment for which the review has to be submitted. 5. Assignment task page is displayed. 6. Click on \"Other's work\" to open the reviews summary page (at /student_review). 7. Chose to review any of the teams' assignments that are displayed. 8. Select a team for review and fill in the review. 9. Before submitting the review, select the checkbox that says \"I agree to share this review anonymously as an example to the entire class\". 10. After clicking on the submit button, the review submitted has been made public. As a Student (Scenario 2): Showing all the available sample reviews for respective assignment 1. Log in. 4. Click on any assignment for which the review has to be submitted. 5. Assignment task page is displayed. 6. Click on \"Other's work\" to open the reviews summary page (at /student_review). 7. Below the heading \"Reviews for ...\", click on the \"Sample reviews\" link. 8. This opens a page where the student can view all example reviews for that assignment. 5. Displays a list of reviews submitted by students. 7. Displays the summary of reviews submitted by that student, with a \"Make as an example\" button on the right of every review. 8. Click on \"Make as an example\" for the intended reviews, which opens a popup that displays a list of all assignments that are a part of the instructor's courses. 9. From this list select all assignments for which the review has to be shown as a sample. 10. Click on 'Publish Sample Reviews' after selection (this closes the popup). 11. Navigate to view reviews of that particular assignment and click on \"Sample Reviews\". 12. A new page is opened that lists out all the sample reviews of the assignment. The first set of tests are for testing scenario of i) a student making his review public/private and i) student viewing the sample reviews. The second set of tests are for testing i) instructor marking a review as an example and ii) selecting the assignments to which the reviews has to be shown.", ["The document is very detailed, and The document explains the changes well.", "The document is a good description of the changes made, and the changes are described in detail.", "The design doc is very readable, and explains the design patterns and the rationale for the changes.", "However, the code snippets are not explained in any detail.", "the code snippets should be explained in more detail."], [1.0, 1.0, 1.0, 1.0, 1.0]], "100": ["Keeping this in mind our code is set to work under the following conditions: 1. Assignment teams created for an assignment without topics 2. Mentors ( Instructors and TAs ) are only assigned to assignment teams if they have been added to an assignment as participants We've created the following <link> to demonstrate the added functionality. As well as the following <link> which demonstrates what happens when teams are created when no mentors have been added as participants to an assignment. 1. Assign a TA or instructor as a mentor for a team created for an assignment without topics. Do not put email code in the Team class). <link>. Our implementation begins when an assignment team is created. If the assignment is associated with a topic, the created team will not be assigned a mentor. This hash is created from the TAs and instructors added to the assignment as participants. The keys of the hash correspond to the mentor's participant id while their values are the number of times the mentor has been assigned to mentor teams. The mentor with the lowest number of assigned teams will be the next mentor assigned to a newly created team. Once the team is assigned a mentor, an email is sent out to the mentor and students in the team to notify them of their mentor assignment. First Design: <image> Ultimately we were able to implement the following design: Final Design: <image> We created the following assignment_teams_mentors table with the following connections to existing tables. The new table created is responsible for storing all the mentors assigned to the various teams created. This column will help determine what TAs and instructors can mentor for a specified assignment. Currently instructors see the corresponding view when looking at teams associated with an assignment: <image> Our team proposed adding an additional \"Mentors\" column in the instructor view: <image> Currently students see the corresponding view when looking at their team for an assignment: <image> Our team originally proposed to add an additional \"Mentors\" section in the student view: <image>. The assignment_team_mentors table is responsible for storing all the mentors assigned to the various assignment teams created. 1.2. Created a can_mentor column for the participants table in order to be able to know who was a mentor and who was a student. <image> Models 1. assignment_team_mentor.rb 1.1. Responsible for ensuring mentor with the least number of teams mentored, gets assigned to the next team created. 1.2. Started to add mailer functionality for notifying the mentor assigned. This ensures a team only has one team mentor. This provides the flexibility of a potential mentor added as a participant to an assignment, to mentor multiple teams created for an assignment. <image> Controllers 1. teams_controller.rb 1.1. The following code was added within the create method. 1.2. Calls on AssignmentTeamMentor to assign mentor for instructor created teams. Will generate notice if unable to assign mentor to recently created team. <image> 1. 1.1. The following code was added within the list method. 1.2. A hash is generated with the assigned mentor of each team. <image> 1. student_teams_controllers.rb 1.1. The following code was added within the create method. 1.2. Calls on AssignmentTeamMentor to assign mentor for student created teams. Will generate notice if unable to assign mentor to recently created team. <image> 1. 1.1. The following code was added within the view method. <image> 1. teams_user_controller.rb 1.1. added code to send the email when a user is added to a team to the mentor. <image> 1. views/tree_display/_row_header.html.erb 1.1. displays either mentor assigned or \"No mentor assigned\" for team level. <image> 1. views/student_teams/view.html.erb 1.1. responsible for displaying to a student the mentor assigned to their team for an assignment. <image>. This button is how we decide if we need to assign mentors to a team. As an instructor we were able to confirm the following UI changes after mentors were assigned to teams: <image> As a student we were able to confirm the following UI changes when a mentor has been assigned to their team: <image> The following <link> further expands on this UI testing. As an instructor we were able to confirm the following UI changes after teams were created when no mentors had been added participants: <image> As a student we were able to confirm the following UI changes when a team was created without mentor participants for the assignment: <image> The following <link> further expands on this UI testing. 1. Providing ability to manually select the mentor for a team created. <image> 1. Refactor email functionality code and continue to develop to allow for the assignment team members to be notified of new assigned mentor or any other added members. <image>. <link> <link> <link> <link> <link>.", ["The writeup is very detailed, and The writeup explains the changes well.", "The writeup is not clear how the code is implemented, but the code is clear that the code has been changed.", "the code is not described in any detail, but the code snippets are shown.", "that the code is not described in any detail, but the code snippets are shown is a good description of the changes that were made.", "I would have liked to see more detail on the code changes."], [1.0, 1.0, 1.0, 1.0, 1.0]], "101": ["Expertiza provide the function for user to request an account, but the function is not perfect. It will enable Expertiza to handle the pending request for super-admin and add institution for user. 1. Currently, a new user can only choose institution from the dropdown. The new user should be able to add a new institution. 2. A place where a new user to write a brief introduction is needed in this page. 1. After super-admin or admin approves the request, make sure the record does not disappear on the page. And there should be an email send to email address offered by requester. 1. Modify the test of request new user method. 2. Add a new option for the drop-down bar of institution in the new user request page. 3. Add a new textarea in the new user request page, to input a new institution and introduction. 4. Add validation for new institution new institutions and introductions. 6. Add a new button on the layout. 8. Enable the system will send an email after the request is processed. So we need to add a new column for request_user table. The new table will be shown below. <image>. <image> <image> 1. Name: Instructor or Teaching Assistant request a new account 2. Actor: Instructor or Teaching Assistant 3. Other Participants: None 4. Precondition: None 5. Primary Sequence: 1. Click on ‚ÄúRequest account‚Äù. 3. Fill in a user name. 6. Select an institution. 8. Click on ‚ÄúRequest‚Äù. 2. Fill in the institution name. 1. Name: Admin or Super admin view list of new account requests 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza. 3. View the list of new account requests. 1. Alternative Flow: None 1. Name: Admin or Super admin accept a new account request 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza. 3. Select a request. 1. Alternative Flow: None 1. Name: Admin or Super admin reject a new account request 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza 2. Click on the link ‚Äú/users/list_pending_requested‚Äù. 3. Select a request. 1. Alternative Flow: None 1. Name: Admin or Super admin send an email to applicant 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza 2. Click on the link ‚Äú/users/list_pending_requested‚Äù. 3. Select a request. 4. Click on the email address. 1. Alternative Flow: None. <code> <code> <code> <code> <code>. <code> <code> <code> <code>. Below are the mock-up screens that explain ‚Äúnew account acreation‚Äù functionality in Expertiza. 1. 1.New user should click ‚Äúrequest account‚Äù for requesting a new account, then redirect to the ‚Äúrequest new ‚Äù page. <image> 1. 2.After redirect to ‚Äúrequest new ‚Äù page, new users should enter their information, includes role, name, e-mail and institution. We can enter our new institution in this textbox. The email address is clickable. <image> 1. 5.If we click the email address, the email editor will pop out. <image>. In the first part, we test the request account feature. Finally, we test if the new user can signin with new account and password. 1.Now in the new user request page, the user can add a new institution by choose 'Other' and input their own institution. <image> 2.The new institution is able to saved into institutions table as a new record. <image> 5.The administrator can access the '/users/list_pending_requested' url via ‚ÄúAdministration > Show‚Ä¶>new requests‚Äù menu <image> The admin can access the '/users/list_pending_requested' url via ‚ÄúAdministration > Manage>new requests‚Äù menu <image> 6.‚ÄúEmail Address‚Äù column in /users/list_pending_requested page clickable. <image> <image> 7.After super-admin or admin approves the request, the record does not disappear on the page. <image> 8.There is be an email send to email address offered by requester.And for super_admin and user. <image> <image>.", ["The writeup is very readable.", "The writeup is not clear what the tests are, but the tests is clear that the code is being tested.", "The test plan is not described in any detail.", "I would have liked to see more detail on the tests.", "Also, The test plan does not explain how the tests work.", "that Also, The test plan does not explain how the tests work is a good thing."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "102": ["It also makes it easy for the instructor to add a new topic to an assignment/project, create a new project and add students to it. This helps in improving the existing work and also provides a new way to learn. In Expertiza, user and instructor accounts are currently created by existing super administrators, instructors or TAs. For new users to access the system and experiment the features offered by Expertiza, a ‚Äúdemo-like‚Äù feature needs to implemented. The following are the set of requirements that needs to be catered with this feature: 1. Allow people to request instructor accounts over the web. This feature should also have security features such as Captchas to help avoid account creation by bots. 2. When a user account is created over the web, the super-admin should get e-mail regarding the same and also the user should be notified upon approval/denial (if denied, then reason should be specified). 3. Currently, Expertiza consists of a lot of entities that can be made publicly visible to all other users in the system. 4. A user who creates an account over the web should be pointed to an instruction page and/or video on how to create an assignment and register students for it, etc. Once a user wants to register and try the features of Expertiza, upon opening the website, one can register by filling up the form and click the register button. Once the user requests for an account creation, the super admin receives a mail informing about the request with the name of the requested user. The super admin shall then, look for the details of the user in the Review Requested Users tab and can either approve/decline the request. Once the super admin approves the user request, the user gets a mail notifying that they now have the permission to access the features of Expertiza. A temporary password in clear text is also sent in the mail for login. If the request is rejected, then the reason should be mentioned in the reason column of the form. But there is no mail sent to the user regarding that. Needs permission from super admin‚Äù that can be seen on the login page if an unregistered user tries to access the features of Expertiza. Once the user requests for an account, upon clicking the request sign up , he/she is automatically redirected to the instructions page with the video tutorials explaining various features of Expertiza and on how to access them. In _login.html.erb a new button called Request Sign Up was added for the new users to register. The register page will look as above. On clicking Request , a user will be redirected to a page like below: <image> User will have to fill up all the required details and request a signup. When a super administrator logins to his account he can go to Manage/users/review requested users menu as shown below. We have put the review requested users in the menu, rather than a separate tab, making it more flexible to integrate some more features under the users option later. <image> Super Admin can either approve/reject a user. The view for this page would be as shown below. This is an entirely new page wherein, the super admin can also mention the reason for a rejection of a request and view the entire list of requested users. <image> In addition to the above files a new file in instructions, named home.html.erb is created which will have all the videos explaining how Expertiza works. This is to the new user to request for an account in Expertiza and also mail all the super admins about the new user request. Upon the request, this method uses the user parameters (fields entered in the request sign-up form) and a status of 'Under review' is assigned by default. On verifying the captcha, the super admin(s) gets a mail regarding the request with the user name and the requested user is redirected to the instructions page. This is for the super admin to either approve or reject the user request and send a mail to the requested user if his/her account is created. The mail also contains a password for the user to login. We have created a new table called requested_users with table description that is similar to users . The status column, which isn't present in the users tables indicates the approval/rejection of the request of the user. Though the description of this table is similar to the users table, we thought it was better to go with a new one, keeping in view of the following advantages: 1. The users table had lot more entries which weren't needed for the requested user scenario and also vice-versa. The entries like status and reason of the requested_users table weren't necessary once the user request has been approved. 2. The users table was accessed at many places in Expertiza, so any change in that would have to be reflected at all places. It was comparatively easier to manage with a new table rather than using the existing one. The description of the table is as follows: <image>.", ["The writeup is very good, and The writeup explains the changes well.", "The writeup would have been helpful to have a more detailed description of the changes, but The writeup is not clear what the changes are.", "The screenshots are not very large, and the code snippets are not clearly separated from the code.", "the code snippets are not separated from each other, and are not shown in the same way.", "I would have liked to see more of the code, and I think The screenshots would have helped."], [1.0, 0.0, 0.0, 0.0, 1.0]], "103": ["Students submit their work and review other‚Äôs work and provide feedback. Wiki link: <link> Github link: <link>. 1. The current Expertiza UI for reviewing uses a simple html text area for each criterion, which starting to look dull for the users. 2. Moreover, the current form still uses plain old HTML form that sent the text entered in several text areas to the controller only after the user clicks the submit button. Moreover, we found that the review text contains misspelled words and incorrect use of English grammar that makes the review hard to understand. Updates in requirements as of 11 November, 2017 4.Replace the text area with a rich text editor that allows user to customize the fonts, bold, insert link to images / videos (possibly generate a thumbnails of the links). Approach: We have replaced text area in the review form with <link> rich text editor. There are many rich text editors available like <link> , <link> , etc. Usage 1. Gem used: <link> 2. Behaviour of TinyMCE can be modified by making changes in config/tinymce.yml 1.1. Plugins embedded: 1.1.1. Link : Allows a reviewer to link external resources such as website URLs 1.1.2. Media : Adds the ability for reviewers to be able to add HTML5 video and audio elements to the editable area. 1.1.3. Code Sample : Lets a reviewer insert and embed syntax color highlighted code snippets into the editable area. 3. Initializing TinyMCE: To initialize tinyMCE in the new text area add the \"tinymce\" class as mentioned in the below example and ensure it has a unique ID. <code> Then invoke the tinymce helper to initialize TinyMCE: <code>. Approach: We have replaced drop-down used for giving scores in the review form with <link> . Now reviewer has to select a number of stars for each review questions instead of selecting a value from drop down. 3. No logical changes have been done to embed this feature in the form. Usage 1. bower install <link> . 2. Initializing star rating: To initialize star rating in the new select box apply the javascript as mentioned in the below example and ensure it has a unique ID. <code>. Approach: The current design of the system clears all the data in the text fields once a session for the user has been ended. We are making an AJAX call to save user entered text from the current text box as soon as user switches to next text box. This AJAX call is made every 10 seconds to save the content, also the user gets to see the green tick showing the last time when his user entered text has been saved. UTF-8 :To solve UTF-8 encoding problem, we can make a form accept only UTF-8 characters by using an attribute of the form tag. But most of the characters, including a lot of characters from languages other than English, are present in UTF-8 character set so the application will work perfectly fine on just allowing UTF-8 characters in the text box. Below is the code snippet on the same. <code> Spellcheck : Since we have used rich text format, spellcheck is being handled by the same and we have just enabled the spellcheck option for the browser. Below screens are for criterian based review forms. We have used DRY principle, we have made changes in the existing code and even used the same javascript functions. Manual test cases plans: 1. Field Widths ‚Äì If the screen contains text boxes that allow data entry and the width of data entered does not exceed the width of the form. 2. Save and Submit Review ‚Äì If the screen has the save and submit review buttons. 3. Cosmetic Inconsistencies ‚Äì The screen look, feel and design should match the other screens in your application. 4. Spelling ‚Äì Ensure that you have test cases that look for spelling errors. 6. Screen Font Type - Ensure that the screen font family matches from screen to screen. 7. Backlink - Ensure that backlink is present on the screen. 8. Review draft is saved - Ensure that user draft version is saved automatically in every 30 seconds. 9. Star rating- ensure that rating stars are displayed on the screen in place of the select dropdown. Automation testing: We are keeping the same test cases since as per our implementation to improve the review UI, we have not changed anything on the id and the class elements of the javascript, we have just changed the CSS elements, so basically, we have not broken the existing test cases. 1. Embedding more plugins in TinyMCE like inserting images, special characters, tables, etc. 2. Embedding code snippets from GitHub to enable the reviewer to link authors code using 'permalink' feature of GitHub. 3. Using multi-step review form having one review question per step. This will improve the user experience while reviewing others work. Demo <link> .", ["The writeup is very readable, but The writeup does not explain the changes made.", "The writeup is not clear how the code snippets are changed, and The writeup would be helpful to explain the code changes.", "the code snippets should be shown in a larger font size, and the code should be pasted in with the code.", "This is a good way to show the changes that were made."], [0.0, 1.0, 0.0, 1.0]], "104": ["Expertiza has two kinds of review strategies, as specified in the Review Strategy tab of assignment creation: Auto-selected Reviews are not preassigned, but when a student comes to do a review, (s)he can select from the reviews that are available at that point. Instructor-selected Instructor decides in advance who reviews whom.Until now, when the strategy is auto-selected, there has been no maximum on the number of reviews a student could select. So students can review as many topics as they want. Set a maximum on the number of reviews a student can choose with auto-selected reviewing. This requirement needs changes to the instructor view and student‚Äôs review page. Instructor view changes While creating the assignment, instructor should be able to specify maximum on the number of reviews done by each student. We added checkbox for this selection under Review Strategy tab of instructor view. If the instructor selects this checkbox, he‚Äôll be prompted to enter the value for the maximum reviews allowed for each student. There are no changes to assignments controller. Instructor view looks as shown below. <image> Requirement 1 - Instructor View Changes Student Topic Review page changes Students review topics page is displayed by list method of Student_review_controller . <image> Requirement 1 - Student View Changes. If the student selects some topic and want to drop for some reason, he/she need to contact instructor to drop that review. Student Topic Review page changes Students review topics page is displayed by list method of Student_review_controller . <image> Requirement 2 - Allow students to drop reviews <image> Requirement 2 - Allow students to drop reviews only if Review has not been submitted. While creating the assignments instructor can allow students to see their teammate score by selecting Show teammate reviews? But this option shows both the scores and teammate reviews on the grades/view_my_score page. Instructor view changes General tab of assignment creation has \"show teammate reviews ?\" option. \"show teammate scores ?\" , \"show teammate reviews?\" . \"Show teammate reviews ?\" This is how instructor view will change after implementation. <image> Requirement 3 - Instructor View Changes Changes to students view score page Code to display teammate reviews and scores is present in the /views/grades/view_my_scores file. If the instructor only selects show teammate scores? student will be able to see aggregate teammate score as shown below. <image> Requirement 3 - Show aggregate teammate scores Students will be able to see only reviews if the instructor selects show teammate reviews ? during assignment creation. <image> Requirement 3 -Show only teammate reviews Students will be able to see both the score and teammate reviews if the instructors checks both boxes from assignment configuration page. There is no option that lets reviewers see others‚Äô reviews of the same work after they submit their review of that work. Instructor view changes While creating the assignment, instructor should be able to specify if students should be allowed to see reviews done by other students for the same work. <image> Requirement 4 - Instructor view to allow students to review others work Changes to student_response controller and views The View link displays the submitted/in progress reviews of the student and is handled by the list action of the StudentReviewController (student_review_controller.rb) and the associated list view is \"/views/student_review/list.html.erb\" file. We plan to add another link Other Reviews to the partial _reponses view. This link would be visible only if the show_other_reviews option has been enabled by the instructor and the review for the topic has been submitted by the student. This link would be next to each of the Review Topics submitted by the student of that assignment. <image> Requirement 4 - Student view - link to view other submitted reviews <image> Requirement 4 - Student view - Reviews submitted by other reviewers for the same work. The existing implementation of expertiza doesn‚Äôt provide a student the option to not see review scores or the text feedback. Sometimes a student might just want to see the scores and not the reviews and other times might want to see the reviews and not the scores. If the value is set to 0 then the student can view both scores and feedback, if the value is set to 1 then the student can view only the scores and if the value is set to 2, then the student can view only the feedback. Student View Task page changes In the student task view, the page where the student can submit work, view scores, review others, etc. we added a new option for the student to change review settings. Clicking on that link takes the student to the change_reviewsettings page where the student can choose to either view both scores and feedback or just scores or feedback. Review page changes In the partial to view the reviews _review.html.erb, conditions have been added to check the value of the reviewsetting variable. Based on the value of the variable, either both the scores and feedback or just the scores or just the feedback is displayed to the student.", ["The document is very readable.", "The document explains the changes well.", "The only thing I would have liked to see is a description of the changes to the code.", "I would also have liked a description on how the code is displayed.", "This is not a very useful description of what is being done.", "Also, the code snippets are not clearly described.", "the code snippets are just shown in the code, and it would be better to show the code in a larger font."], [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]], "105": ["Expertiza uses the jquery‚Äôs date-time picker widget for setting dates and times on various views. Over the years, different developers used different version and formats of the date-time picker due to which there are inconsistencies across the expertiza project. The main problem with the date-time picker is that the widget and the date-time formats used across the expertiza project are not consistent. Moreover, the JQuery based date-time UI widget itself is on version 0.8 which is extremely old and no longer consistent with expertiza's looks and feel. The primary task of the refactor was to find, refactor and make the date-time picker consistent at all places while exploring the possibility of updating the date-time picker to a newer version or completely replacing it by another better widget which works in conjunction with modern javascript libraries. The first step in the approach was to explore the current functionality of existing date time picker. According to our solution, the existing library needed to be replaced by the new gem. Further, necessary syntactical changes were made respective to the new gem. 1. <link> Moment.js is a lightweight javascript date library for parsing, manipulating, and formatting dates. The existing date-time picker widget was replaced by the new date-time picker in the following views: 1. Edit and create assignments - app/views/assignments/edit/_due_dates.html.erb This contains fields to set the submission and review deadlines for different rounds. The existing JQuery call to the date time picker was replaced by the call to the new widget. The form includes a selection of start date and end date for signup. Following changes were made to the file: Before: <code> After: <code> 3. New survey creation - app/views/survey_deployment/new.html.erb The page contains the form to allow the creation of new surveys. The survey start and end dates can be set using the form. The old code used two separate inline onClick event to call the same DateTime picker. Before: <code> After: <code> 4. Version logs - app/views/sign_up_sheet/_due_dates.html.erb The version logs file which is only accessible to the admins uses the date tie picker to filter the search results using the start and the end date. Following changes were made to the file: Before: <code> After: <code>. The old jquery based date-time picker was replaced by a new modern bootstrap based date-time picker as shown in the pictures below. The new bootstrap date-time picker widget also has different styles which can be implemented by changing the code as per the documentation <link> . Old Date-Time Picker <image> New Date-Time Picker <image>. This refactor was mainly concerned with the date-time picker widget UI. Thus most of the testing was done manually as automated testing cannot be used to test the widget. After refactoring each of the pages using the date-time widget, rigorous testing was done to check if the date-time picker selected the right date in appropriate formats. Automated testing was performed to test the models and controllers which relied on the date-time picker for its correct functioning. The new date-time picker widget was manually tested for correctness using the following manual steps: 1. Create and edit assignments Login into instructor account -> Select Manage Assignments -> Click on the plus sign to the right -> Fill in the relevant details -> In the 'due dates' enter the submission and review deadline using the new date time picker widget -> Save -> Check if assignment with proper deadline is being created. 2. New survey creation Login into instructor account -> Select Manage assignments -> From the list of assignments select an assignment and select the 'assign survey' action-> Fill in the relevant details -> Enter the survey start and end date using the new date time picker widget -> Save -> Check if the survey is created with proper deadline. Also the datetimepicker feature with start date and end date detection should work for both admins and super-admins. <image> <image> <image>. <image>. ( <link> ) 2. GemFile.lock ( <link> ) 3. application.js ( <link> ) 4. application.scss ( <link> ) 5. assignments/edit/_due_dates.html.erb ( <link> ) 6. sign_up_sheet/_due_dates.html.erb ( <link> ) 7. survey_deployments ( <link> ) 8. _row_header.html.erb ( <link> ) 9. search.html.erb ( <link> ) 10. factories.rb ( <link> ) 11. versions_search_spec.rb ( <link> ) 12. list.html.erb ( <link> ). Github Repo: <link> Pull Request: <link>.", ["The writeup is very readable.", "The writeup is a good description of the changes made.", "The screenshots are very good, and the code snippets are well organized.", "However, the code changes are not described in any detail.", "the code changes are just shown in the code.", "I would have liked to see more detail on the code, e.g., what was changed, and why.", "Also, The screenshots are not very large, and The screenshots would have been helpful to have a link to the code in the Github diff view."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "106": ["The Expertiza project is software to create reusable learning objects through peer review. Expertiza is an open source project and is based on ‚ÄúRuby on Rails‚Äù framework. Expertiza should be able to distribute surveys to the users. The survey can be one of the following: 1. Course survey (all the participants of the course can take it). 2. Global survey (all the users in Expertiza can take it). The survey can also be targeted (the admin can specify a group of people who will receive this survey). The three kinds of surveys in this project are: 1. 1. Assignment Survey questionnaire 2. 2. Global survey questionnaire 3. 3. Course evaluation questionnaire. 1. Survey questionnaire should be a subclass of questionnaire. 2. The creation, editing, filling in, and checking that all the questions have been answered survey should be similar to the procedure used for other types of questionnaires (e.g. peer-review questionnaires). 4. We should use the same controller method to take the survey as to fill in the peer-review, namely, response_controller. 5. We should use the same code to display the existing survey responses as to display the responses in peer reviews. 6. For each course or assignment, the admin/instructor should be able to create a survey and have some (or all) of the participants receive the survey. Assignment Survey questionnaire, Global Survey questionnaire and Course Evaluation Questionnaire are the existing models which are subclasses of questionnaire. Their display types are survey, global survey and course evaluation respectively. <image>. 1. There is a constraint that the survey has to be filled in using the same controller method as used for filling in peer review, namely response_controller. Also, the same code has to be used to display the existing survey responses as to display the responses in peer review. 2. The response_controller can be used to make sure that the survey can be taken only once by each user, depending upon the survey type and the users who are allowed to access (can be listed using 'action_allowed?'). The answers can be saved using the 'saving' method. Also, the responses can be viewed once, the survey is submitted. 1. Instructor or admin both can add survey for any course or assignment 1. The creator would be able to select the participants based on the scope of the survey, that is, all the students or all the Expertiza users or specific group of people. 2. These questions will be by default added to every survey the user creates. 4. Or, there can be option of separating the global survey and course survey. The quiz taker will take the global survey first and then the course survey. 3. In our part of project implementation, there is no need to incorporate any changes to the Assignment Questionnaire. 1. Adding columns to the 'Assignments' table: survey_id and global_survey_id. 2. Adding columns to the 'Course' table: survey_id and global_survey_id. 1. We update 'survey_id' and 'global_survey_id' in the 'assignments' table. 2. This requires checking if any entry for 'survey_id' is already present: Case TRUE: Warning to user 'Update to an existing survey'. 1. The survey is mapped to participants through 'participants' table. 2. In 'participants' table: <code> 1. Using the 'type' we can get the type of object i.e. assignment or course, and then using parent_id the particular instance of that object can be mapped to the survey and listed for the user/participant. 1. There is no explicit assigning of surveys to participants. Updating the new columns in 'assignments' and and 'courses' table is sufficient for assigning the surveys. submitted or not submitted, the user/participant can view or update, respectively, the surveys. 1. Checking the 'assignments' or 'courses' the participant has enrolled in. 2. Checking if the 'assignments' or 'courses'have active surveys (survey_id != NULL). 3. If participant has already responded to the survey, only 'View' option is available. 1. There is a global table for all the responses in Expertiza-'response_map'. All the responses in expertiza are saved in this table. 2. When participant responds to the survey, based on the survey type, the entry in the response_map is: <code> 1. The other entries are: <code> <image>. 2. Click on Manage -> Questionnaires-> Survey / Global Survey/ Course evaluation. 3. Create a new Survey/ Global Survey/ Course evaluation filling in the parameters asked for. <image> Login as student: 1. The course survey is for all the students, whereas the global survey is for a few random students using Expertiza. 2. Take the survey visible through your account.", ["The writeup is very good, but The writeup could have been improved by showing the code changes, and also by showing what was changed.", "The writeup would have been helpful to show the changes to the existing models, and to explain how they are implemented.", "The code snippets are not very detailed, and The code snippets should be shown in a larger font."], [1.0, 1.0, 0.0]], "107": ["A staggered-deadline assignment is an assignment in which different topics have different deadlines. It can be pretty useful if different topics within an assignment can have different deadlines for submission as well as reviews. Problem 2: Manual submission and review deadline entry required for all topics Currently system requires instructor to enter submission and review deadlines for all topics. Currently this is happening, but only in case of assignments which do not have staggered deadlines. If the assignment is not a staggered deadline assignment and if its submission deadline has passed, then we prevent students from signing up for any topic in that assignment. <code> We will have to replicate a similar logic for staggered deadline assignments. The problem here is that for staggered deadline assignments, different topics might have different deadlines. <code> First we check if the topic has a specific different deadline set by the instructor, and if not, then its deadline will be the same as the common deadline for the assignment. We do this only for staggered deadline assignments as for the other assignments, this check has already taken place. Our requirement is to provide the instructor with the option to select a relative date for the submission review deadlines based on the Round1 submission deadline. The instructor would however like the ability to manually enter a custom date according to his needs. One way of dealing with the above problem would be to provide an option for the other date fields for a given assignment to chose a relative date based on the initial submission date in addition to the ability to override and manually enter a custom date. Example: 3 days after Submission deadline, 6 days after re-submission deadline. The first step will be to make this assignment a staggered deadline assignment. For doing this edit the assignment and under the General tab, make this a staggered deadline assignment. Part1: Instructor wants to assign default deadlines to a staggered assignment In this case, the default deadlines for the assignment will be filled automatically based on the submission date for Round 1. In this case no further input from the instructor is required apart from selecting the round 1 submission deadline 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. Part2: Instructor wants to enter custom deadlines for a staggered assignment In this case, the instructor has two options. He can either chose a deadline from a list of other relative deadlines from the dropdown menu for a particular round or all rounds, or he can decide to override the system enter a date manually by selecting the ‚ÄúCustom Date‚Äù option. 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. 6. Change all the deadlines for the other rounds according to your requirements by choosing the \"Custom Date\" option Part3: Instructor wants to enter a custom deadline only for a particular round In this case, the instructor can set the submission deadline for round 1. This would result in all deadlines being populated relatively according to the pre-set values. The instructor can then, if need be, modify the deadline for a particular round by either selecting a different relative date or by entering a custom date manually. 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. 6. Change all the deadlines for the necessary round by either entering a manual date or by choosing a different relative date from the dropdown. 1. Login as instructor6 2. Go to courses tab 3. For CSC/ECE 506, Spring 2014, go to edit assignments and choose New problems B 4. Edit this and make it a staggered deadline assignment. Also change the review due dates for the first round to any date beyond today 5. Now go back to assignments page and go to view review report for this assignment 6. We focus on student 5059 for this case. 7. This student has one review, go ahead and grade this review. 12. Now revert back to instructor6 and again go to view review report for this assignment. 3. Revert back to instructor6 and again go to view review report for this assignment. We created 4 new topics for this assignment. Testing for modification of dates in staggered deadlines. Case 1: Attempting to enter a date for a round that was before the previous round. Case 2: Attempting to enter a date for round1, round2 or round 3 that is out of invalid (Deadlines being before current date). Case 3: Entering an incorrect date when manually entering a deadline for a particular round for a staggered deadline.", ["The writeup is very readable, and The writeup explains the changes well.", "The writeup is not clear why the \"Issue\" section is not titled \"Issue #1\" or \"Issue 2.\"", "the \"Issue\" section could be \"Issue 3\" or simply \"Issue 4.\"", "The section on \"Issue 5\" is not explained, but The section on \"Issue 5\" could be described in more detail.", "The test plan is not described in any detail."], [1.0, 0.0, 0.0, 0.0, 1.0]], "108": ["Expertiza is an online web application for educational purpose, and is developed using Ruby on Rails. Instructors are able to create, modify, delete and view assignments and students are able to form teams, submit assignments and make reviews using this application. The tree-display.js and its tree_display_controller.rb files are designed to allow Expertiza users to view their Assignments, Courses and Questionnaires at one place. This is the primary control page, as well as the home page for instructors on Expertiza which allows them to create, modify, delete and view Assignments. The primary problem with this is that both the files, due to their bulky and unoptimized methods, slow the rendering of UI on screen. The methods in these files can be studied and refactored to improve the overall performance of this controller and its corresponding UI. Moreover, any obsolete or unused methods can be removed and DRY principle should be implemented. This project mostly revolves around these 2 files, and would involve refactoring JavaScript more than Ruby on Rails. There may be unused methods in the controller or java script file due to previous development, maintenance and refactoring. Loading speed of the web page is slowed down by repeated interface with database regarding to same variables but by different methods. To find out unused methods in dynamically typed language like Ruby is difficult, thus our team is focusing on the suspicious methods which have neither comments nor references showing in github. All suspicious methods are tested and following shows the confirmed used methods as well as their functionality. goto_... Methods are called when the instructor clicks on the corresponding node under the \"Manage\" menu (e.g. \"goto_quetionnaires\" is called when clicking on \"Questionnaire\" node.) and the user will get redirected to corresponding pages. confirm method is called when the instructor tries to delete a course/assignment/review and chooses \"yes\" at the confirmation page. folder_node_ng_getter functions to render json of the node. (e.g. Returning all the courses data when clicking on \"Course\" node.). 1. We found one unused method bridge_to_is_available and delete it. <image>. 1. We simplified the month string representation in file app/assets/javascripts/tree_display.jsx <image> 2. We found the goto_* functions in file app/controllers/tree_display_controller.rb are not necessary and can be replaced with the goto_controller(name_parameter). However, they are called outside of the files in our scope and we did not modify them for now. <image> 3. We found a confusing variable name \"res2\" in file app/controllers/tree_display_controller.rb and changed. <image> 4. We found two confusing method names \"update_is_available\" and \"update_is_available_2\" and that \"update_is_available\" is used for checking the accessibility of users who are tas/owners while \"update_is_available_2\" is used for checking the accessibility of user who are instructors. <code> is changed to <code> and <code> is changed to <code> 5. We found three confusing method names \"initialize_fnode_2\" and \"children_node_2_ng\" and that \"res_node_for_child_2\" for corresponding nested chidren nodes (the subfolders in the tree display). <code> is changed to <code> , <code> is changed to <code> and <code> is changed to <code> 6. We renamed a few variable and method names related to update_tmp_obj <code> is changed to <code> and <code> is changed to <code>. The tree_display.js and tree_display_controller.rb are mainly related to the \"Manage\" tab and its child nodes. Thus, the following steps are needed to test the functionality from UI: 1. Log in as an instructor. 2. Click on the \"Manage\" tab as well as its child node on the tool bar and to test if they are redirected to the correct page. (Child node means \"Users\", \"Questionnaires\", \"Courses\", etc. under \"Manage\" menu or \"Review Rubrics\", \"Metareview Rubrics\", etc. under \"Questionnaires\" menu. And the reason calling it \"child node\" is because it is the variable name used in code.) 3. Click on the displayed contents to test if the details can be displayed properly. We passed all Travis CI build and Codeclimate checks.", ["The writeup is quite good, but The writeup could have been improved by showing the code changes.", "The writeup would have been helpful to show the code snippets, and to explain the changes.", "the code snippets are not very detailed, and the code is not very readable.", "the code is too long, and the code would have helped to show how the code was changed.", "Also, the code does not have any screenshots, and there is no explanation of the changes, and no explanation for the changes made."], [0.0, 1.0, 0.0, 0.0, 0.0]], "109": ["E1472: Connect changes to score model with changes to score views Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.1.1.1.1. <link> 1.1.1.1.2. <link> 1.1.1.1.3. <link> 1.1.1.5. <link> 1.1.1.6. <link> 1.1.1.7. <link> 1.4. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.5. <link> 1.1.1. <link> 1.1.2. <link> 1.6. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.7. <link> 1.8. <link> 1.1.1. <link> 1.1.2. <link> 1.9. <link> 1.10. <link> 1.1.1. <link> 1.1.2. <link> 1.11. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.12. <link> 1.13. <link>. One of the Expertiza features is to report scores to both students and the instructor. The student can see the feedback from other students, such as the max score, the min score and the average score. Current System (After Refactoring Grades_controller): <link> <code> Student: user1600 and user1601 Password: test Original System (Before Refactoring Grades_controller): <link> <code> Student: user1600 and user1601 Password: test All our test result based on the following test cases on expertiza, please follow these step to get it. <code> Student: <code>. <code>. <code> <code> <code> <code> <code> <code>. <code> <code>. <code> <code>. <code>. <code>. <code>. <code>. <code>. The view method reports everyone‚Äôs grades to an instructor, and the view_my_scores method reports peer-review scores to a student. The grades_controller class is responsible for displaying grades to students (via view_my_scores) and instructors or Teaching Assistant (via the view method). <image>. 1. view method : handle the functionality of viewing the assignments of the whole class. 1. view_my_scores : take care of displaying the scores pertaining to an assignment to a single user. <image> The figure above mainly illustrates the process of viewing scores for different actors. The instructor and teaching assistant are able to view scores of all the team and could see the reviews of a selected team. Student actor can see his own scores and reviews. For example, when a student want to view his/her grades, there must be something in the database (precondition). <image> The RScore class stores the variables maximum,minimum, average review scores. Create rscore class in models (rscore.rb): <code>. Before: (views/grades/_participant.html.erb) <code> After: (views/grades/_participant.html.erb) <code>. Before :(views/grades/_participant.html.erb) <code> After :(model/assignment_participant.rb) <code>. At the beginning of the final project, the function of viewing scores is very slow by students and instructor. 1. Modify get_assessments_for method in response_map.rb After doing this, the time cost of view function decreased by more than 90% Before Refactoring: <code> After Refactoring: <code>. <table> 1. Original Time for Instructor to View all scores <image> Original Time for Instructor to View all scores 1. Time for Instructor to View all scores after Refactoring <image> Time for Instructor to View all scores after Refactoring 1. Original Time for Student to View all scores <image> Original Time for Student to View all scores 1. Time for Student to View all scores after Refactoring <image> Time for Student to View all scores after Refactoring. <image>. <image>. <image>. <link> <link> <link> <link> <link>. We will stick to the UI design of the grades view and see what else we can do to further improve the performance of the system.", ["The writeup is quite good.", "The writeup explains the changes well, but The writeup could have been improved by showing the code snippets.", "The screenshots are not very large, and the code is not very readable.", "I would have liked to see more of the code.", "Also, The screenshots are too big, and The screenshots would have been better to show the code in a smaller font.", "This is a good way to show what was done."], [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]], "110": ["Expertiza is a web application developed using Ruby on Rails that serves as a peer-review system. The application allows students to submit and peer-review learning objects (articles, code, web sites, etc)<ref> <link> </ref><ref> <link> </ref>. It is an open source project and it's codebase is maintained in GitHub. We are contributing to Expertiza as a part of our Object-Oriented Design and Development's Open-Source Software (OSS) Project. Our goal in this project is to refactor the assignment_participant model . In this Wiki Page, we will explain the changes that we have made for the same. Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.4. <link>. The assignment_participant model is subclass of Participant model and is used to maintain the list of students/users participating in a given assignment. The changes that are needed to be done are described as follows:<ref> <link> </ref> 1. Rename methods prefixed with ‚Äúget‚Äù. 2. Move methods to appropriate file helper classes. 3. Move methods to appropriate models. 4. Remove unused methods 5. Use good Ruby style guidelines in the code. <references/>.", ["The wiki page is quite short, but The wiki page does explain the changes that were made.", "The wiki page is not clear why the changes that were made were made, and the changes that were made would be helpful to have a more detailed description of the changes that were made.", "The code changes are described, but not in prose.", "They are described by the code snippets, but the prose is not."], [1.0, 1.0, 1.0, 1.0]], "111": ["response.rb is the class that manages the response to all rubrics in Expertiza. if someone fills out a review form, the instance of the review form is a Response. If someone gives feedback (a ‚Äúrejoinder‚Äù) to an author, that is a Response too. Or if someone evaluates a teammate contribution, fills out a survey, or takes a quiz, they are creating a Response. Note: Method display_as_html writes the HTML for displaying a rubric. This would ordinarily be view code, but it is used by so many different views that it is done here. Questions are written out in the order of their sequence number (anyone who creates a rubric can specify sequence numbers for questions). After all questions are displayed, there is a blank for an additional comment. <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing. When the get_maximum_score() function is called it takes care of the weight of the question. It multiplies the weight to the score and adds it to the final score. <code>. All the email code has been shifted to the mailers. Comments have been removed. <image> Auto selected Reviewing. response_helper.rb contains helper methods that display the questionnaires and rearrange questions so that the most frequently answered questions are at the bottom while the less frequently answered questions are at the top. Method is no longer being used in Expertiza and has been removed. Method is no longer being used in Expertiza and has been removed. <image> Auto selected Reviewing.", ["The writeup is very readable.", "The writeup is very detailed, and the code snippets are well organized.", "The only thing that I would change is that the code for the methods that are shown should be shown in the table of contents.", "This would have been easier to read if the code had been shown in a different order."], [0.0, 0.0, 1.0, 1.0]], "112": ["According to the existing code workflow, the assignment of topics to teams are based on FCFS (first come first serve) basis, where a team which first signs up for a topic gets the topic while other teams are waitlisted on the same topic. Factors such as team size are not considered which are important while assigning a topic to the team and potentially can reduce many issues faced by the current system. 1. One student can sign up only for a single topic. In cases where many topics are available, a student is forced to choose a single topic among many available topics which can be a difficult task. 3. If all the teams choose a handful of topics among many topics, it would also result in unnecessary additions in the waitlist queue for those few topics resulting in a situation where all the topics are not uniformly distributed among all the teams 4. Before, signing up, if more than one student forms a team and if each student belonging to the same team tries to sign up for different topics, than those topics are allotted to individual students resulting in a situation where a team can hold more than one topic. The algorithm works by considering every team as strength of 1, representing the student in the team. After sign up the topic would be allotted to the team based on a lottery system where a team is randomly selected for every topic. the intelligent assignment of teams. This approach is based on two important factors: 1. Team strength 2. Priority order of the topics submitted by the team. An added advantage of this approach is that, unlike the previous system, the intelligent team assignment system allows each team to bid for multiple topics which increases the chance of every team getting at least one topic that they placed their bid on. Each team can place their bids in priority order, the priority of the bids are also considered while assigning topics to the teams. For example: If TeamA is up to its maximum strength and bids for Topic1 , Topic2 , Topic3 where Topic1 has the maximum priority then TeamA has larger chance of being assigned Topic1 , but if Topic1 is already assigned (to a different team which had equal probability of getting the same topic based on team strength and bid priority) then Topic2 would be considered for assignment followed by Topic3 . Thus the priority mentioned by each team is also an important factor for assigning topics to teams. 1. Initially, every student is a team of 1 member. Before the sign up process takes place, students can merge their teams to form a larger team. 2. It is preferred that the number of members in the team should be as close as maximum strength allowed for each team to increase the chance of winning a topic. 1. Every team is allowed x bids that they can use during the sign up process to select the topics of their choice. [The value of x is decided by the instructor using class strength, number of topics created for an assignment and maximum team strength allowed for that assignment.] 2. During the sign up process, the team can place x bids on x topics of their choice in a priority order. 1. As each team can place their bids on the available topics based on topic priority. Hence every team gets to choose more than one topic of their choice. 2. The teams are assigned topics based on modified <link> <ref> <link> </ref> algorithm which considers factors such as team size and priority ensuring that the topics are no longer assigned based on FCFS basis. This approach addresses the most important issue where a topic is not assigned to the team just because the team was late to sign up for the topic as compared to the other teams. This flow chart illustrates the \"modified stable matching\" algorithm used to assign topics to teams based on the strength of the teams(bidder) and the priority in which they bid for the topic. This algorithm takes two parameters as input 1. A list of teams which are un-assigned any topic 2. A hash of team and topics which were assigned Algorithm 1. Sort the list of teams in descending order of team size 2. For each team a.Get the team_size and topics that the team placed their bid on b.Arrange the topics according to the priority order mentioned by the team i. For each of the topic, check which team is assigned this topic and store its team strength in assigned_team_size ii. If the team which is assigned this topic is not up to maximum strength and if the ( team_size + assigned_team_size <= max_strength allowed for each team) then assign this team the topic. They can associate each bid with a priority. This would in turn start assigning teams with topics based on their bid preferences. The table bid is supposed to store all the bids on the topics with their priority. Current requirement is to have only one bid per topic by an owner. When the instructor starts the intelligent assignment of topics to teams, IntelligentAssignmentController triggers the assignment algorithm. The students interact with AssignmentTopicView which lists down all the topics for the assignment and allows students to bid for topics with priority.", ["The writeup is quite readable, and the code snippets are well organized.", "The writeup would have been helpful to have more detail on the changes made to the code.", "the code snippets should be shown in a more readable format.", "the code snippets should be linked to the Github diff view, which would have shown the changes to the project.", "Also, the code should be described in more detail, rather than just pasted in."], [0.0, 1.0, 0.0, 1.0, 1.0]], "113": ["Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.1.7. <link>. <link> is an open source project based on the <link> framework. Expertiza provides a platform for instructors to create assignments and for students to set up teams to facilitate early communication and teamwork in these assignments. Expertiza also provides an environment where students can peer review other students, allowing these users to view feedback on their assignments in a timely manner. Expertiza supports submission across various document types, including the URLs and wiki pages. The following items were improved in the refactoring of the given file: 1. Long blocks of code converted into separate methods 2. Ambiguous variable names changed to meaningful variable names 3. Macros added to replace hard-coded values 4. Code clarity 5. Test Coverage. The Review Mapping Controller handles mapping a given group's assignment submission to students working in other groups for peer review. The controller handles items associated with routing submissions to reviewers, handling permissions for instructor review calibration, and controlling drafts or uncompleted reviews. Included in this controller is the ability for the instructor to specify the number of required reviews per student or the number of reviewers per team in order to have group submission automatically sent to all students' review queues. in automatic_review_mapping method, the following bits of code were added to separate methods: <code> The above was moved into the team_assignment method that assigns users to a new team. <code> Again, the above is a unnecessarily large 'if' block that could be moved to another method, one that was named validate_review_selection The following is the final block of code moved to another method from automatic_review_mapping: <code> This block was moved to the maps_strategies_for_artifacts method. Next, the assign_reviewers_for_team method was evaluated for refactor. The following blocks of code were found that seemed to go past simply what the name of the method entailed, so they were moved to other methods: <code> The above performs its own standalone operation, it's not needed in an already long method that has its own priorities. As such, it was moved to generate_insufficient_review_collection. <code> The above creates a new hash table and performs standalone operations on it, and it is used nowhere else in the assign_reviewers_for_team method. It was moved to generate_teams_hash. <code> Although the above could stay as-is in assign_reviewers_for_team, there already seems to be too much functionality in this method, which is why it was moved to insufficient_assign_reviewers. There are existing RSpec tests (spec\\controllers\\review_mapping_controller_spec.rb) for the given file; we were tasked with ensuring that our changes did not break any of the existing tests, thus retaining the previous code's functionality. For the commit associated with our final submission, all existing tests pass according to travis-ci. 1. <link> 2. <link> 3. <link>.", ["The writeup is very good, but The writeup could have been improved by showing the code changes, rather than just saying what they did.", "The writeup would have been helpful to show the code snippets that were changed, rather then just show the old code.", "The code snippets are not very detailed, and the old code is not very readable.", "I would have liked to see more detail on the old code."], [1.0, 0.0, 0.0, 1.0]], "114": ["The Expertiza project is system for using peer review to create reusable learning objects. Students do different assignments; then peer review selects the best work in each category, and assembles it to create a single unit.<ref> <link> </ref>. Used on the admin side of Expertiza for creating/ editing questionnaires (rubrics, surveys and quizzes). It helps in add/removing questions, options, etc for a questionnaire. Very big controller that handles a lot more than the name suggests. Functionalities need to be moved to appropriate controllers. Quiz methods are should be treated the same as any other type of questionnaire; differences between quiz questionnaires and other questionnaires should be implemented in the model class, quiz_questionnaire Turn the questionnaire into a ‚Äúform object.‚Äù The ..._questions methods: save_new_questions, delete_questions, save_questions should be in a separate class. Other classes involved: questionnaire.rb quiz_questionnaire.rb questions_controller.rb What needs to be done: Move quiz related functions to quiz_questionnaire.rb . copy, update_quiz, valid_quiz methods, clone_questionnaire_details is too long. Debug output (print statements) should be removed. Understand the functions in the controller and comment them. Ensure that the code is understandable to the next programmer who works on it. What We Have Done Method Refactoring <table> Format Refactoring Case 1: Loop Condition Change all the looping conditions into one format Before <code> After <code> Case 2: If Condition Change all the if conditions into ruby format Before <code> After <code> Case 3: Name Change all the name from \"JAVA name\" to \"Ruby name\" Before <code> After <code> Refactoring Example In models/questionnaires.rb , we add copy_questionnaires method, as shown below: <code> References <references/>. <table>. Change all the looping conditions into one format Before <code> After <code>. Change all the if conditions into ruby format Before <code> After <code>. Change all the name from \"JAVA name\" to \"Ruby name\" Before <code> After <code>. In models/questionnaires.rb , we add copy_questionnaires method, as shown below: <code>. <references/>.", ["Very good description of the changes made.", "It would have been helpful to have more detail on the code changes.", "The code snippets are not very long, and The code snippets should be more readable.", "The code snippets are not described in any detail.", "I would have liked to see more detail about the changes."], [0.0, 1.0, 0.0, 1.0, 1.0]], "115": ["In this project, we have unit tested various methods in SignUpSheetController.rb and SignUpSheet.rb as well as refactoring these methods. We first wrote unit tests to ensure we had adequate coverage for our methods. Then, we refactored our methods with confidence found from our unit tests. We found that directly testing the functions that we refactored provided better assurances that our refactorings were correct rather than manual testing the user interface. For our unit testing, we used the RSpec framework. We choose this framework since legacy tests of our methods were implemented with RSpec<ref> <link> </ref> . We also utilized the RSpec-Mocks<ref> <link> </ref> to test functions related to the database without having to use fixtures. We wrote multiple controller tests and model tests for corresponding functions so as to test various scenarios and get 100% test coverage. We sought to obtain this high level of coverage to make refactoring more precise. We believe that highly tested code is resilient errors that could occur when refactoring. Before we started working on Expertiza<ref> <link> </ref>, running RSpec on the codebase resulted in 992 / 4184 lines of code (23.71%) covered. After our work, running RSpec on the codebase resulted in 1144 / 4278 lines of code (26.74%) covered. E.g. If you run the test in spec/controllers/sign_up_sheet_spec.rb by command \"rspec spec/controllers/sign_up_sheet_spec.rb\", then you can see the 100% line coverage for controller method save_topic_deadlines() in sign_up_sheet_controller.rb. For checking the coverage, open the index.html page coverage folder and go to respective controller. Similar, run the tests in Model and Controllers folder to see 100% test coverage for following functions. 1. Create() in SignUpSheetController 2. self.add_signup_topic() in SignUpSheet 3. save_topic_deadlines() in SignUpSheetController 4. self.confirmTopic() in SignUpSheet. We performed various refactorings on our code to increase the codes readability and remove redundancy. We extracted variable from complicated statements to increase the readability of the code. In the code base we were working with, there were a variety of lines of code that were more than 80 characters long. These lines of code were hard to read. So, we split them up into multiple lines of code by extracting statements found in function calls into their own variable. Example: <code> Became: <code>. We attempted to enforce good Ruby conventions while refactoring the code<ref> <link> </ref>. This entails doing things like correcting the formatting of the code to make it more readable. In addition to this, we converted a variety of iterators to follow good ruby conventions. For example, sign_up_sheet.rb had the function self.add_sign_up_topic(assignment_id) which contained an iteration through a set of topics while manually maintaining an index variable. Manually maintaining the index variable can be problematic for future maintenance. <code> We replaced these with the Ruby each_with_index iterator. This allows us to pass the responsibility of maintaining the count of the index to the iterator. <code> We replaced \"=>\" while passing parameter by colon (:) So that <code> became <code>. We have refactored the methods which were doing a lot of things into two or more methods so as to segregate the functionality and following the basic principal that one method should do only one thing. Also, this helped in making the methods more readable and easy to understand. E.g. In sign_up_sheet.rb Model, \"def sign_up_wailisted()\" is the new method extracted from original method self.confirmTopic(). There are many more such examples which are done as part of refactoring. 1. Clone the repo <code> 2. Change current directory to cloned repository 3. Run Command: <code> <code> 4. Check coverage: Open overage/index.html in browser and check line coverage for following methods 1.1. Create() in sign_up_sheet_controller.rb in Controllers 1.2. self.add_signup_topic() in sign_up_sheet.rb Models 1.3. save_topic_deadlines() in sign_up_sheet_controller.rb in Controllers 1.4. self.confirmTopic() in sign_up_sheet.rb in Models. We were not able to recreate the problem found in issue 580. After multiple attempts of trying to recreate the bug we began to examine the source code. We believe that someone else has already fixed the bug before we started working on the project. <references></references>.", ["The writeup is quite readable, but The writeup could have been improved by showing the code snippets that were changed.", "The writeup would have been helpful to show the code changes, and to explain how they were made.", "The code snippets are not very long, and The writeup would have helped to show they in more detail.", "Also, the code is not very readable."], [1.0, 1.0, 1.0, 1.0]], "116": ["This page provides a description of the Expertiza based OSS project for Fall 2017. Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.4. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.6. <link> 1.1.7. <link>. <link> is an open source project. It is based on <link> framework. Expertiza is a web application which allows instructors to create new assignments, list of topics which students can sign up for. Students can also form teams for various assignments and projects. The following tasks were required to be completed in this project: 1. Issue #80: Add past-due assignments to task list. 2. Highlight with specific colors current and next due dates. 1. Past Due assignments are not present in the task list. If a student is a participant of an assignment and has not submitted the assignment before the assignment due date/deadline, then the assignment is considered as a past due/overdue assignment for that student. These past due assignments are not present in the task list and we have added this functionality to the existing system. 1. Highlighting next due dates. Different To do tasks in the task list with different due dates are highlighted with different shades of red color. An assignment that has to be submitted earlier has a redder color than assignments that have later due dates. 1. The function overdue_tasks? is added in the model student_task.rb file to fetch those tasks with current stage set as finished and which were not started by the student. <code> 1. In the list.html.erb file we used the tasks not started section as a template to construct the past due assignments section. <code> 1. The past due assignments variable from the controller contains the list of past due assignments as its contents which are looped through with a do each loop. The participant, stage and topic_id are used to obtain the due date of the assignment. Then the assignment name and its deadline are displayed. <code> 1. To highlight with specific colors current and next due dates we made several changes to the currently existing list.html.erb file. <code> The rgb() style color attribute is used to set the color of a html tag. A variable r is used to set the red color parameter in rgb function. Initially it is set to 255 which is the Darkest shade of red that is possible. Then a variable step is used to determine by what value the r variable must decrease to lessen the intensity of the red color. The size of the task list is used to initialize the step value. An if condition is used to make sure that step is initialized only when there are tasks to be completed. The task list before and after the changes are shown below. <image>. <image> The student in the example above is a participant in 6 current assignments that are displayed in the task not yet started section of the task list. Each of those is highlighted with colours as described. The student has failed to submit 6 other assignments before their respective due dates and they appear in the past-due assignments section of the task list. Following are a few test cases with respect to our code changes that can be tried from UI: 1. Login as student and check if past due assignments section is present on the task list. 2. If no such section is present, the student does not have any past due assignments. 3. Log in as an instructor and create a new assignment. 4. Set the deadline for the assignment to a date and time few minutes from the current date and time. 5. Assign the student being tested as a participant to the created assignment. 6. Login as the student and check the task list after the due date for the assignment has passed. 7. The new assignment will be in the Past Due assignment section. To check if the Tasks not yet started section has assignments highlighted with colours: 1. Login as a student and check if there are any assignments in tasks not started section. 2. If no assignments are present, the student is not involved with any current assignments. 3. Log in as an instructor and add the student as a participant to few assignments. 4. Log in as the student and now see that the assignments in tasks not yet started section are highlighted with colours as described in the wiki. Edge Cases The edge case for when there are no past due assignments for a student has been handled. In this case, no past due assignments are displayed. The edge case for when there is only one assignment in the tasks not yet started section has been handled. In this case, the assignment is highlighted with a dark red colour. 1. <link> 2. <link>.", ["The wiki page is very readable.", "The wiki page is very detailed, and the screenshots are very good.", "The code snippets are not too long, and it would be helpful to have a link to the code snippets in the wiki.", "I would have liked to see more of the code changes, and also a link back to The wiki page.", "This is a good description of the changes that were made.", "But This would have been helpful to show the code in more detail."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "117": ["This means that refactoring projects, testing projects, and Mozilla projects need to use the same rubric. The feature concluded with allowing 4 rubric scenarios for an assignment: 1. Rubric does not vary by round or by topic. 2. Rubric varies by round, but not by topic. 3. Rubric varies by topic, but not by round. 4. Rubric varies by both round and topic. Our proposed solution keeps the previous implementation, but changes rubric filtering to allow instructors/TAs to use filters that are not theirs. Following the <link> footsteps, this diagram depicts the interactions between an instructor and an assignment. Alongside editing topics and due dates, the instructor can edit what rubrics are assigned to an assignment. The topics tab allows instructors to specify which rubric associates with each topic while the rubrics tab lets the instructor determine if the assignment will vary by topic or not. <image>. Now find questionnaire by assignment questionnaire and type rather than assignment/type/round_number/topic_id. 1.3. assignment_participant.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.4. feedback_response_map.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.5. on_the_fly_calc.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.6. self_review_response_map.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.7. tag_prompt_deployment.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1. Views 1.1. edit/_rubrics.html.erb : Modify to set assignment vary by round/topic fields instead of non persisted flags 1. Helpers 1.1. assignment_helper.rb : Refactor by moving function to find questionnaire / assignment questionnaire to assignment_form.rb. 1.2. grades_helper.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.3. summary_helper.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1. DB Migrate 1.1. XXXXXXXXX_add_vary_by_topic_to_assignments.rb : Migration to add ‚Äúvary by topic‚Äù field to assignment 1.2. XXXXXXXXX_add_vary_by_round_to_assignments.rb : Migration to add ‚Äúvary by round‚Äù field to assignment 1. All of the related test files to accommodate the above changes. <image> In addition to that, we will be adding two additional boolean fields to the assignment schema: vary_by_round and vary_by_topic . As discussed earlier, in the previous implementation, these were methods that were called to determine if an assignment varied by round/topic rather than a persisted value. It would always query for the AQs by assignment id, current round number, and current topic id. However, if the assignment did not have reviews that vary by round or topic, these values would be nil on the AQ, and the previous query would fail. This means that: 1. If an assignment does not vary by round or by topic, the query for AQs will be by assignment id only. 2. If the assignment varies by round but not topic, the query for AQs will be by assignment id and round number. <image>. Here we describe manual UI Testing steps to edit an existing assignment to allow it have to specialized rubrics for different topic types. 1. Login to Expertiza using instructor account (For testing, username: instructor6 , password: password ) 2. Click on Manage > Assignments 3. Click on Edit option for any assignment, you should get following view. <image> 1. Click on Rubrics tab. You will see 2 checkboxes ( Review rubric varies by round? , Review rubric varies by topic? ) 2. Check the box for Review rubric varies by topic? 3. Go to Topics tab and verify that there is dropdown menu beside each Topic. 4. Select a rubric from dropdown menu, and click Save <image> 1. Go back to Home, and select the same assignment to edit. When you click on Topics tab, you should see the rubric you had selected. 1. This was due to how questionnaires were retrieved/found for an assignment. Staggered deadlines also rely on finding questionnaires using topic id, which isn't handled until after an assignment is made. 1. Unresolved Another quality of life improvement is that staggered deadlines and topics cannot be added to an assignment until after the assignment has been created and saved.", ["The writeup is very readable, but The writeup does not explain the changes that were made.", "The writeup is not clear how the tests are tested.", "The test plan is not described, and The test plan would be helpful to have a description of the tests.", "Also, The test plan does not describe the tests, and does not show the tests that are tested, which is a problem."], [1.0, 0.0, 0.0, 0.0]], "118": ["This page provides a description of the Expertiza based OSS project Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.1.1.5. <link> 1.1.1.6. <link> 1.1.1.7. <link> 1.1.1.8. <link> 1.1.1.9. <link> 1.1.1.10. <link> 1.1.7. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.8. <link>. These problems are as follows: 1. Unsafe reflection method const_get called with parameter value 2. Hardwired variables in add_new_questions and save_new_questions 3. Unnecessary checks for QuizQuestionnaire, checks can be removed 4. Use guard clause to enclose methods instead of conditional 5. Removed unnecessary method 'create_questionnaire' 6. Break up create method into new 'create_questionnaire' 7. Use each_key instead of keys.each 8. Split lines of code to fit within recommended 160 character length 9. Removed useless assignment of variable in save method 10. Resolved issues involving use of unsafe reflection. Problem Method(s) save_new_questions, delete, and save_questions used conditional to wrap code instead of guard clause. Using guard clause can reduce complexity and number of lines in code. Solution For example, we go from: <code> To: <code>. Problem Method(s) create and save_new_questions have unnecessary checks for if question type is QuizQuestionnaire. Solution We removed the check in both methods. We go from: <code> To: <code>. Problem Method(s) save_new_questions and add_new_questions used hardwired variables. We go from: <code> To our code which incorporates constants. <code> With our constants at the top of the code for easy accessibility: <code>. Problem Unsafe reflection method const_get called with parameter value Solution Remove the unsafe reflection through using a variable that checks for null values. We go from: <code> To: <code>. Problem Method create_questionnaire, had no apparent calls to it. We remove the method to make the code dry. Solution For example, we remove: <code>. Problem The create method itself was 49 lines long. Solution For example, we go from: <code> To: <code>. Problem The existing code uses keys.each to iterate through the hash. Solution For example, we go from: <code> To: <code>. Problem Some of the lines of code exceed the recommended 160 characters per line. Solution For example, we go from: <code> To: <code>. Problem The existing code included assignments of variables that were not used throughout the file. In any case, we remove the variable keep the code dry. Solution For example, in the following method: <code> We remove the unnecessary variables and comments, resulting in the following method: <code>. In order to remove repetition and make the code dry, this do loop was refactored into its own method 'save_question_hash'. Solution For example, in the following method: <code> We refactor the do loop into its own method: <code>. However, in order to ensure the code edits didn't cause any previously crafted test to fail an RSpec test was ran before each commit. The command utilized to test the questionnaires controller is as follows: <code> However, if a VCL was utilized for development this following command was used instead. <code> In one case the create_questionnaire method was removed, thus in order to keep the set of tests clean the following test block was removed from the testing file: <code>. Test Log in Website url: <link> Log in: instructor6 Password: password Test Create questionnaire 1. After logging in click the Questionnaires tab. 4. Select Create Test edit/add questions: 5. Change dropbox of question type to TextArea, select Add \"1\" more. 6. Change dropbox of question type to Criterion, select Add \"2\" more. 7. Edit question content: \"Test question Textarea\", \"Test question Criterion1\", and \"Test question Criterion2\" in that order. Test Delete Questionnaire 18. Select Back. 1. Code Refactoring Best Practices <link> 2. Expertiza on Github <link> 3. Expertiza Project Fork <link> 4. Expertiza Website <link> 5. RSpec Documentation <link>.", ["The writeup is very good, but The writeup could have been improved by showing the code changes, and also by showing how they were made.", "The writeup would have been helpful to show the code snippets, and to explain the changes that were made to the code.", "the code snippets are not very detailed, and the code is not very readable.", "the code snippets are not organized in any way, and the code would have helped to have a link to the Github diff view.", "This would have shown the code, and would have made the code easier to read."], [0.0, 0.0, 0.0, 1.0, 0.0]], "119": ["It allows the instructors to create new assignments and customize new or existing assignments. Each assignment should have its own unique auto-generated submission directory, which is named based on the assignment name entered by the teacher. In the current implementation of Expertiza, there are following issues need to be addressed: Issue #1: The directory name should be auto-generated from the assignment name. Issue #2: It should be done by changing spaces in the names to underscores. E.g., the directory for Program 1 is by default \"Program_1\". Issue #3: A check should be added to prevent two assignments in the same course from having the same name. Issue #4: Verify or add if not present - a check to stop two assignments from sharing the same directory. Issue #5: On changing name of an assignment while creating it, the code shouldn't throw a NoMethodError. Fix #1: Submission directory is successfully being generated after the assignment name is typed in. If needed, the submission directory can be changed, however any modifications to the assignment name will just auto-generate it to match. Fix #2: A check was added to ensure that assignments in the same course do not share the same name. When creating a course, if the assignment name is a duplicate, it will reset the entire form. Fix #3: A check was added to ensure that assignments in the same course do not share the same submission directory. When creating a course, if the submission directory is a duplicate, it will reset the entire form. Fix #4: These checks were also put in place when modifying an existent assignment. The controller, helper and spec were modified for this project: 1. Assignments Controller - assignments_controller.rb 2. Assignments View - _general.html.erb 3. Assignemnts Controller Spec - assignments_controller_spec.rb 4. Assignments Model - assignment.rb. This is a controller that helps instructors create, modify, copy new assignments. Each assignment can be associated with specific Rubrics, Review Strategy and Due dates. This the view for creating the new assignments and editing the existing assignments. Tests and bug fixes pertaining to assignments controller. The ruby code which defines how the assignment model functions. The project primarily deals with the AssignmentsController and AssignmentsView, and changes made are as follows: The directory name is auto-generated from the assignment name typed in by the instructor. This is achieved by replacing all spaces in the names with underscores, and removing all special characters like '/','\\','$', etc from the auto-generated submission directory name. If any two assignments of the same name under the same course are attempted to be created, it is prevented and an error message is displayed to the user stating the the submission directory name already exists. The odd case of a teacher editing the name of an already existing assignment to one that already exists is also handled. Expertiza will display a similar error message stating that the assignment couldn't be saved. Most changes were made in the assignments_controller.rb file. Checks were added to ensure that an existing assignment name or submission directory did not exist when creating a new assignment. If the assignment was not created due to an error, the code would render new which would cause the assignment to be created even though it did not pass all of the checks. The following function was added to app/views/assignments/edit/_general.html.erb , to generate submission directory names with underscores replacing spaces: <code> Changes were made to the create function in assignments_controller.rb , such that it only creates the assignment directory if the one with the same name doesn't already exist: Before <code> After <code> Changes were made to the update_feedback_assignment_form_attributes function in the same file to flash an error if an edited file has the same name: Before <code> After <code> The following validations were added to app/models/assignment.rb , without these validations the user was allowed to change the assignment name or submission directory to one that already exists. <code>. The following steps must be performed to test the project UI: Step 1: Log in as an Instructor, with Username - instructor6, Password - password <image> Step 2: Create a new assignment. In this case our assignment is called \"E2054 Test Assignment\", under course CSC 216 Fall 2009 <image> Step 3: To save the assignment, the Review and Author Feedback rubrics need to be filled in <image> Step 4: On completion, the assignment will be saved <image> Step 5: If another assignment of the same name under the same course is created, the following error is displayed <image> Step 6: On editing an already made assignment to match the same details as \"E2054 Test Assignment\" <image> We get the following error: <image>. The following RSpec tests were added to the assignments_contoller_spec.rb file <code> <link>.", ["The writeup is quite readable.", "The writeup is very readable, and the code snippets are well organized.", "The only weakness is that it does not explain the changes made to the code.", "For example of that The only weakness is that it does not explain the changes made to the code : it does a good job of describing the changes to the controller, but does not describe the changes that were made to view.", "This is a good thing, despite that it does a good job of describing the changes to the controller, but does not describe the changes that were made to view, but This would have been better to explain the tests."], [1.0, 1.0, 1.0, 1.0, 0.0]], "120": ["Expertiza allows the instructor to create new assignments and customize new or existing assignments. It also allows the instructor to create a list of topics the students can sign up for. Students can also peer review other students' submissions. The process is detailed below: 1. Steps to install Redis: <code> Run the redis-server using: <code> 1. Steps to install NodeJS on CentOS: <code> 1. Run the expertiza Rails server <code> 1. For logging in as an instructor:- Username: instructor6 Password: password 1. For logging in as an student:- Username: student17 Password: password. At present the calibration functionality is limited, the following points present the scenarios where the current implementation is lacking: 1. No support for varying rubric by round feature. 2. From the perspective of the student, lack of differentiation of review - whether its from an expert or otherwise. 3. A student is not notified once an expert submits a review. 4. Additionally, a student should be able to see how an expert rated his/her assignment - similar to how it's done in calibration results for calibrated assignments( As seen when Show Calibration Results is clicked. ). Tasks are broken down into sub-tasks as follows: 1. Refactoring: 1.1. a checkbox in the \"General\" Tab from ‚ÄúCalibrated peer-review for training?‚Äù to ‚ÄúAdd expert peer review?‚Äù 1.2. a tab name for instructor from ‚ÄúCalibration‚Äù to ‚ÄúExpert review‚Äù on the assignment setting page 1.3. partial file from ‚Äú_calibration.html.erb‚Äù to ‚Äú_expert_review.html.erb‚Äù 1.4. the link title on student side from ‚Äúshow calibration results‚Äù to ‚Äúshow expert peer-review results‚Äù 1.5. the file ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to ‚Äúresponse/show_expert_review_results_for_student.html.erb‚Äù 1.6. title in ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to start with ‚ÄúExpert review comparison report for‚Äù 2. Functionality changes 1.1. Vary-rubric-by-round - Currently, the functionality of calibration is limited. 1.2. Both TAs and instructors could do expert reviews - need to modify ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to make it support multiple expert reviews. This diagram shows the Assignment Setting page in the General tab. <image> This diagram shows the Assignment Setting page in the Calibration tab. <image> The following diagram shows the flow of control in case of peer reviews. <image>. <image>. Hence, we will also be writing test cases for the new functionality - added as a result of this project. We would also need to add additional fixtures in spec/feature to be used in the testcases. There are three main actors that interact with the new functionality, these are: 1. Instructors 2. Teaching Assistants 3. Students Hence, we would have to write tests for each of these types of users and test the expert review functionality. Some of the tests that we have in mind as of now, are as follows: 1. Instructor 1.1. Login as instructor using pre-configured credential. 1.2. Go to \"General\" tab 1.1.1. Verify \"Add expert peer review?\" present instead of \"Calibrated peer-review for training?\" 1.3. Verify whether the instructor can see \"Expert Review\" on the assignment setting page. 1.4. Perform Expert Review, based on values declared in Fixtures available to Instructor. 1. Teaching Assistant 1.1. Login as TA using pre-configured credential. 1.2. Go to \"General\" tab 1.1.1. Verify \"Add expert peer review?\" present instead of \"Calibrated peer-review for training?\" 1.3. Verify whether the TA can see \"Expert Review\" on the assignment setting page. 1.4. Perform Expert Review, based on values declared in Fixtures available to TA. 1. Student 1.1. Log in as Student using pre-configured credential. 1.2. Verify if student can see \"Show expert peer-review results\" 1.1.1. When a new expert-review is available. 1.1.2. Show nothing when nothing is available. 1.3. Testing to check if the reviews show up. 1.1.1. If added by TA. 1.1.2. If added by instructor. 1.1.3. If multiple reviews from either TA or instructor show up as a list.", ["The writeup is quite readable.", "The writeup is very detailed, and the screenshots are very good.", "The only weakness is that it does not explain how the tests work.", "This is a very good description of the tests, and it would be helpful to have a description of what they test.", "Also, the code snippets are not shown in the table of contents, which is not very helpful."], [1.0, 1.0, 0.0, 1.0, 0.0]], "121": ["2. A confirmation email is sent to a user of the system when they reset their Expertiza account password. In this project we have first identified all the set of scenarios where the user of the system will get an email. We have implemented tests for the following scenarios: There are various ways to create a new user account in Expertiza. Irrespective of the user creation method, the newly added user should get notified via email when his account is created in the system. This email states the username and a randomized password to allow the user to login for the first time. Below given are the ways to create new user to system. 1. By filling a user creation form An instructor can add a new user to the system by filling up a user creation form 1. By importing a CSV file The instructor can add new users to the system by importing a CSV file with user information <image> 1. By importing a CSV file to add participants to an assignment Instructor can add participants to an assignment by importing the users from a CSV. If the user listed in the CSV does not already exist in the system, then the a new user account is created and the user is added to the assignment. <image> 1. User requests an account A user can request an account by filling up a form with his details. If the superadmin approves a request, a new user account is created in the system and the user receives an account creation email notification <image>. The following features were checked for all cases as part of the email functionality when a new user is created 1. Mail delivery count increased by 1 after the mail triggered by the scenario is sent 2. Sender email-id is verified. 4. The subject is checked to be equal to 'Your Expertiza account and password has been created' We considered the following cases while testing specific to the scenario where user requests an account: 1. No email should be sent if new account requested with invalid email address 2. Super admin should receive email about new account request with a valid email address 3. Email notification should be sent to requester when super admin approves account creation request 4. No email notification should be sent to requester when super admin rejects account creation request. We used Capybara to model the scenario as follows: 1. Create user through instructor filling up the form: Admin user is created using factory class. 1. User requests a new account and account is created upon approval from superadmin Super admin is created using factory class. 1. User creation by instructor: Instructor creates new user by filling sign-up form <image> 1. User creation by user request Email count should be zero when user requests new account with an invalid email <image> Email count should be one when user requests new account with a valid email <image> 1. User creation by importing csv files Import CSV to add participants to assignment <image> Import CSV from manage users <image>. When the user tries to login, and the password entered is wrong, the user is redirected to reset password page. <image> Here the email-id entered is searched through the database, If such user account is found: url for reset is generated, with random token set as password is sent to the user. Flowchart: <image>. 1. User enters email id which is not associated with any account 1. No e-mail should be sent 1. User enters email id that's present in the user database The following features were checked inside 'it blocks' as part of verifying email functionality 1. Mail delivery count increased by 1 after the mail triggered by the scenario is sent 2. The sender mail-id is verified to be 'expertiza.development@gmail.com' 3. Receiver email id is checked to be equal to 'expertiza.development@gmail.com' . If the email id is not associated with any existing account, then email count will be zero <image> If the email id is associated with an existing account, then email count will be one <image>. However, if an account is created by adding them as participants to an assignment when they don't already have an account, e-mail notification is not being sent. The issue here was that an already existing user in the system will not get added as a participant on the assignment. Now that we have enabled the email functionality irrespective of where a new user is created from, we don't need to explicitly call the mailer from each location where new user is created. The email body was inconsistent across different scenarios. If the user does not exist in the system, new user account (if there is sufficient information about the user to create a new Expertiza account) is created If the user already exists as a participant on the assignment, do nothing Add the user to the assignment as a participant; otherwise. This way, the user(whether newly created or already an Expertiza user) gets added on the assignment as a participant. Also, the instructor should receive an email about the same. This method calls the email function to notify the reviewee <image>. <image> <image>.", ["The document is very readable.", "The document is very detailed, and the screenshots are very good.", "The only thing I would change is that the screenshots should be larger.", "the screenshots are not large enough to show the changes made to the code.", "Also, the screenshots could be larger, and the screenshots would be helpful to have a link to the Github diff view.", "This would have been helpful to show how the code was changed."], [1.0, 1.0, 0.0, 0.0, 0.0, 1.0]], "122": ["<link> is an <link> <link> application which is used by instructors and students for creating assignments and submitting peer reviews. Expertiza allows the instructor to create and customize assignments, create a list of topics the students can sign up for, have students work on teams and then review each other's assignments at the end. The Source code of the application can be cloned from <link> . Files involved: popUpController.rb participantsController.rb What they do PopUpController displays a review when a user (instructor or student) clicks on a list of reviews. ParticipantsController handles participants in an assignment. What's wrong with them: PopUpController contains only two prominent methods, but they are very big. ParticipantsController contains redundant code. What needs to be done: 1 popUpController.rb 1.1 Action_allowed method always returns true. It needs to be fixed. 1.2 Team_user_popup method needs refactoring. @teamId is assigned but never used. Add comments to make code more readable. Rename variables based on their usage 1.3 Refactor Participants_popup and team_users_popup methods into smaller private methods. 2 participantsController.rb 2.1 In add and update_authorization methods, permissions collection object can be used to reference its elements without assigning each element to individual private variables. 2.2 Inherit and bequeath_all methods are similar. Common statements can be migrated to private method. Add comments in code to make it easy to understand. 2.3 Cluster all the flash messages under one private method to make the code more manageable 2.4 Fix email_sent method. It contains a dummy email address. Modified Action_allowed method to return true only if... <table>. Local variables like can_submit, can_review, etc removed and permissions object referenced directly <table>. Moved common functionality of Inherit and bequeath_all to private method populate_copied_participants <table>. <table>. <table>. Login as a instructor \"instructor6/password\". Click on Assignments -> review report -> and on a team. <references/>.", ["The writeup is very readable.", "The writeup is not clear what the changes are, but the changes is clear that the code is being refactored.", "the code is not described in any detail, but the code snippets are shown.", "I would have liked to see more detail on the code changes."], [1.0, 0.0, 1.0, 1.0]], "123": ["<link> is a software development process that relies on the repetition of a very short development cycle, requirements are turned into very specific <link> , then the software is improved to pass the new test cases only. The TDD sequence can be can be summarized in following steps: 1. Add a Test 2. Run all tests and see if the new test fails 3. Write the code 4. Run tests 5. Refactor code 6. Repeat Advantages of using TDD: 1. Narrowing Problem Focus 2. Tidier Code 3. Not worrying about dependencies 4. Easier refactoring 5. Better Test coverage and fewer bugs. <link> is a software testing method by which individual units of source code are tested to catch errors early in the development process. For a model it involves testing the interface and on how it responds to commands and queries from outside. Model testing is bounded to the functionality of only the model under test and doesn't test how its collaborating models get affected based on this query. Unit Testing provides several benefits which can be summarized in the below points. 1. Finds problems early: Unit testing finds problems early in the development cycle. In test-driven development (TDD), which is frequently used in both extreme programming and scrum, unit tests are created before the code itself is written. When the tests pass, that code is considered complete. 2. Facilitates change: Unit testing allows the programmer to refactor code or upgrade system libraries at a later date, and make sure the module still works correctly (e.g., in regression testing). Unit tests detect changes which may break a design contract. 3. Simplifies Integration: Unit testing may reduce uncertainty in the units themselves and can be used in a bottom-up testing style approach. By testing the parts of a program first and then testing the sum of its parts, integration testing becomes much easier. 4. Documentation: Developers looking to learn what functionality is provided by a unit, and how to use it, can look at the unit tests to gain a basic understanding of the unit's interface's API. 5. Design: When software is developed using a test-driven approach, the combination of writing the unit test to specify the interface plus the refactoring activities performed after the test is passing, may take the place of formal design. Each unit test can be seen as a design element specifying classes, methods, and observable behavior. The goal of the project is to test the Menu.rb, i.e. the Menu model by writing unit tests, which are written using <link> . The unit tests are to be written such that the path coverage of menu.rb is greater than 90% and achieve the highest possible branch coverage. The goal is to test the menu model file. 4. Creating dummy entries for testing different functionalities. 5. Writing testing conditions for different functions and cross-checking with the expected outputs. Menu is a model which gives the functionality to the top menu bar in the Expertiza website. It links the menu items associated with each tab in the menu using a tree. The following Menu is displayed for the Student role : <image>. Mock/dummy objects are needed to be created for any unit testing criteria. These objects are loaded newly and deleted after every testing condition. Several methods exist for creating such objects, whose parameters need to be designed to satisfy the conditions under test. We have used factories and created the mock objects that we need to execute the tests. Menu model require several other mock objects to be created namely Node(this is a subclass in the menu class), menu_item, site_controller, controller_action,etc. A total of 21 testing conditions were required to be performed for testing all the functions in menu model file. The conditions that needed to be tested are as below: Node class 1. initialize <code> 2. setup <code> <code> <code> 3. site_controller <code> 4. controller_action <code> <code> 5. content_page <code> 6. add_child <code> Menu class 1. initialize <code> <code> <code> 2. select <code> <code> 3. get_item <code> 4. get_menu <code> 5. selected <code> 6. selected? <code> <code> 7. crumbs <code>. A screenshot of the tests passing is shown here: <image>. <image> <link>. After writing the test cases we used SimpleCov to measure the C0 coverage of our rails application. After running rake spec to run the test cases, SimpleCov creates a directory called coverage in our rails application folder. These are the learning outcomes after performing this project: 1. Writing tests using the Test Driven Development approach. 2. Writing unit tests for models and controllers in RSpec. In our case, before writing the test cases for the menu.rb we had the understand how different models interacted with each other and how each action by different users would make changes in the database schema. 1. <link> 2. <link> 3. <link> 4. <link>.", ["The writeup is quite readable.", "The writeup is a good description of the tests, and the tests are described in a very readable way.", "the tests are not described in prose, but in prose.", "the tests are described by a list of conditions, and then a list with the code.", "that the tests are described by a list of conditions, and then a list with the code is a very good description.", "However, the test plan is not described well.", "There is no description of what the tests do.", "I would have liked to see more detail on the tests.", "Also, the tests should have been described in more detail."], [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0]], "124": ["Expertiza allows the instructor to create new assignments as well as edit new or existing assignments. This issue is not a bug but an additional feature to the existing import topic functionality. Issue 329 : When importing teams there are different options to handle conflicting team names Issue 328 : When importing teams, and a conflict exists there is an option to merge the two teams by inserting the new members into an existing team. we tried to import a team and selected 'Insert any new members into existing team'. No new team members were in fact inserted into the team. <code> <code>. Problem : When importing teams, and a conflict exists there is an option to merge the two teams by inserting the new members into an existing team. Solution : This was an issue to fix the functionality of Insert any new members into existing team. Problem : When importing teams there are different options to handle conflicting team names as shown in the screenshot below. We‚Äôd like to add another option to rename EXISTING team when a conflict exist. Solution : This was a request to add an option to rename existing team if there was a conflict in the team name. New code introduced was as follows: In start.html.erb In this file, the new option as displayed to the user is added <code> In team.rb In this file, the handling of the new tag \"rename_existing\" is added wherein, the old team is updated with a new name. Solution : We have modified the existing implementation for import topics to assign the teams to the topics. We have changed the files to handle another column where the teams have been assigned to topics. The column is optional because there might be topics that have not yet been assigned to any teams Expectations from the import file: 1. Assigned team name should exist in the system, otherwise the import will fail. Instructor has to make sure that the teams which are assigned in the import file should exist with same names in the system or database. 2. Instructor also need to ensure that the topic for which the team is being assigned should not be full or can accommodate new team assignment to the respective topic. We are just adding another column so the best way is to extend the existing select tag with a new option for the teams assigned. All the select tags has been changed with an additional option \"Assigned Team\". <code> model/sign_up_topic.rb The existing import function in the model import the topics to the topic table. As per the requirement and validations, topic should be imported first and then only the team can be assigned to the topic. So the existing import method has been modified to assign the team once the topic is imported in the database table. As per the edge case mentioned in the requirement document that few topics may not have any team assigned to it, so we first check if topic has any team assigned, then only it tries to map the topic with the team. <code> Changes in the application with new implementation An option column checkbox (Teams Assigned) has been added to the UI <image> A new column Assigned Team is added where the columns are being mapped. As our additional functionality is to have another column to assign team to the topic. We have to have the import test case and the assigned team change could be applied to the same test case. We use it to check if the older team gets the new name and the new team gets the requested name. 5. Click on Topic Description checkbox and import the following file. 7. Import topics. 2. Select Manage >Assignments > Edit Assignment > Topics 3. Scroll down to the screen and click on import topics 4. Upload a file with the topic details and a team assigned to topic 5. Check the Teams Assigned optional column 6. Click on import and map the columns in the mapping page 6. After submitting, team will be assigned to appropriate topic [Problem 3 (329)] 1. Login to Expertiza using username: instructor6 & password: password. 2. Select Manage > Courses or Assignments > Add Teams button > Import Team 3. In the screen that loads, select \"rename the existing team and import\" in the handle conflicts section. 4. Upload a file with the team details and select the appropriate delimiter. 5. Click on Create 6. Verify that the new team got created with the assigned name and the older team's name got changed. 2. Select Manage > Courses or Assignments > Add Teams button > Import Team 3. In the screen that loads, select \"Insert any new members into existing team\" in the handle conflicts section. 4. Upload a file with the team details and select the appropriate delimiter. 5. Click on Create 6. Verify that the existing team got updated with the new team members. Also, if there's no team in the system and instructor has used it in the import file so a new pop up can be displayed where the new team can be created or the import can be extended to create teams while assigning the topic.", ["The writeup is very readable.", "The writeup is very detailed, and the screenshots are very good.", "The only weakness is that it does not explain the changes to the code.", "that The only weakness is that it does not explain the changes to the code is not a problem, but a problem of how to use the code to test the code, and how to test the code.", "There is a good description of the changes, but it would have been helpful to have a link to the Github diff view."], [1.0, 1.0, 1.0, 0.0, 1.0]], "125": ["Students can also review their teammates, making use of the teammate review questionnaire, based on their contribution to the projects. When we use these questionnaires for reviews, for example the teammate review assessment we encounter a few problems. We add in a new Question type ‚ÄòCake‚Äô, which will be extended from the Scored Question model [cake < scored question < choice question < question]. Potential ways of displaying the Cake question on the UI: 1. Stars: Existing design for teammate reviews uses stars to symbolize the contribution provided by each student. We can implement the cake type using the same. The questionnaire for reviewing teammates includes the question asking the cake (contribution) factor. Ideally, the cake should include the reviewer himself as well. But after considering code that also involves teammate reviews, what we have observed is that every assignment has the option to render reports to the instructor - showcasing different types of reports such as Review Reports, Teammate Review Reports, Self Review Reports, Answer Tagging reports. If the existing self-review feature were to be implemented, the view for the Self Review reports would also contain self-teammate reviews, which would cause inconsistencies in rendering Self Review Reports, and does not help serve the purpose of a legible report. Consider Student8529, who has reviewed himself and his teammate Student8663. With the design approach taken for this project, when Student8529 reviews himself, the review would appear under the Teammate reviewed, under the Teammate review report. 1. Student: Fills out the reviews, and chooses answers in accordance with the Cake question type imposed restrictions, if there is one. The screen for the same when a cake type question is added to the teammate review is as shown below: <image> The cake type question will always have a green circle in the background, rending the score on top of it. In order to enable a student to review him/herself as a teammate we have implemented self reviews for teammate assessment. For example: In teammate review assessment, let there be a cake type question about the amount of contribution provided by each team member. After enabling self reviews, cake has to include the author as well. In order to implement the self review feature for teammate reviews we have added a column \"is_self_teammate_review_enabled\" to the assignments table. 1. Self reviews enabled 2. A student logs on to expertiza and clicks on an assignment 3. Then he clicks on your team link 4. He should be able to see his teammates and himself (for self review) under team members 5. Total contribution for a cake type question in a teammate review should include the contribution provided by the student in the self review as well. 6. If the contribution is exceeded, a warning should appear 1. Self review disabled 1. The link for a reviewer to review himself as a team member should not show 2. The cake type questions in the teammate review should include only contributions provided by the other team members 1. Context: If self review is enabled after the assignment has been created and a few students have already given reviews, then it should give a warning. 1. Self review enabled in the middle of the assignment 2. Add teammate review for teammate1 3. Add teammate review for teammate2 (make sure it adds upto 100%) 4. Enable self review as an instructor 5. As a student, notice that a new review button is visible in the ‚Äúyour team‚Äù page. 6. Click on review, try to add contribution for self and make sure a warning appears that says that the cake is already at 100% 1. Context: If self review is disabled after the assignment has been created and a few students have already given reviews. 1. Self review disabled in the middle of the assignment 2. Enable self review as an instructor 3. Add teammate review for teammate1 4. Add teammate review for teammate2 5. Add self review (make sure it adds upto 100%) 6. Disable self review as an instructor 7. As a student, notice that the review button is NOT visible in the ‚Äúyour team‚Äù page. The test cases pass, on creation of a review questionnaire and on creation of a questionnaire with different types of questions, including the cake type questions to the questionnaire rubric. In the current implementation of cake type questions, answer objects are tracked on the basis of teammate reviews or any other review, meaning, if the cake type question is part of a Teammate Review questionnaire, then instances of answer are tracked with respect to answers given by team members, otherwise all the responses for that specific question are fetched without any correlation between answer instances and team members. As part of future scope, if there are reviews other than teammate reviews that would need to keep a track of answer objects with respect to team members, then the implementation would have to also include that specific review scenario. With the current implementation, reviews that track answers round-wise, would not be accommodated with cake type question and can be extended for the same.", ["The design doc is very good, but The design doc could have been improved by showing the code snippets, and also by showing how the code is implemented.", "The design doc would have been helpful to show the code changes, and to explain how the tests are implemented.", "The test cases are described well, but the code should be shown in more detail.", "The test plan is not described in any detail, and The test plan would be helpful to have a description of the tests."], [0.0, 0.0, 1.0, 0.0]], "126": ["For users intending to view the deployed Expertiza associated with this assignment, the credentials are below: 1. Instructor login: username -> instructor6, password -> password 2. Student login: username -> student4340, password -> password 3. Student login: username -> student4405, password -> password. It‚Äôs an open source project developed on Ruby on Rails platform and it‚Äôs code is available on Github. It allows students to review each other‚Äôs work and improve their work upon this feedback. It focusses on refactoring some of the more complex methods, modifying some of the language to make it more Ruby friendly, removing some redundant code. A couple of long and complex methods were refactored from this controller along with removal of some non-functional code and a few language changes to make it Ruby style. Three methods in particular, namely conflict_notification ,calculate_all_penalties and edit were found to be too long and were in need of refactoring into smaller, easier to manage methods. Few more compact methods were created for this purpose. There were no existing test cases for the controller. This is a helper class which contains methods for constructing a table(construct_table) and to check whether an assignment has a team and metareveiw(has_team_and_metareview). We worked on the following work items(WIs) WI1 : Refactor calculate_all_penalties method into smaller methods WI2 : Move the repeated code in conflict_notification & edit methods to a separate method list_questions. WI3 : Refactor the code as per the Ruby style guidelines and incorporate the good practices WI4 : Test the conflict_notification method to test the changes made. WI5 : Move the repeated code in view and view_my_scores methods to a separate method retrieve_questions. 1. Refactoring calculate_all_penalties method This is used to calculate various penalty values for each assignment if penalty is applicable. The following changes were made: 1. This method was very complex, performing too many functions within a single method and had to be broken into 3 smaller methods each having a more well defined function. 2. The following 3 methods were created after splitting the first method <code> 3. Changes were also made to make the code follow ruby style.The language was made more ruby friendly. 4. Finally some redundant code was commented out as it was non-functional. Refactoring into smaller more specific methods: <image> Removal of non-functional code : <image> Change of language to make it more Ruby friendly: <image> 1. Move the redundant piece of code from conflict_notification & edit methods to a new method list_questions The conflict_notification method is used to help the instructors decide if one of the reviews are unfair or inaccurate. This was again split into 2 methods with some part of the code which is repeated in another method refactored into a new method. <image> Refactored #Created a method which was a duplicate in conflict_notification and edit methods <image> edit method: This method is used to edit the questionnaires. This method again has code which is repeated in the conflict_notification method and thus the repeated section was split into a new method. <image> New method: Refactored #Created a method which was a duplicate in conflict_notification and edit methods <image> Similar refactoring was performed to obtain the retrieve_questions method: <image> This is the new method created after the above refactoring: <image>. There were no existing test cases for the GradesController. We have added a new spec file 'grades_spec.rb' which covers testing scenario for the newly added method. As the model was not changed, no test cases were added for the model. Following steps needs to be performed to test this code from UI: 1. Login as instructor. Create a course and an assignment under that course. 2. Keep the has team checkbox checked while creating the assignment. Add at least two students as participants to the assignment. 3. Create topics for the assignment. 4. Sign in as one of the students who were added to the assignment. 5. Go to the assignment and sign up for a topic. 6. Submit student's work by clicking 'Your work' under that assignment. 7. Sign in as a different student which is participant of the assignment. 8. Go to Assignments--><assignment name>-->Others' work (If the link is disabled, login as instructor and change the due date of the assignment to current time). 9. Give reviews on first student's work. 10. Login as instructor or first student to look at the review grades. 1. The construct_table method in GradesHelper is not used anywhere. It has no reference in the project. method in GradesHelper can be broken down into separate methods, one each for team and metareview.", ["The writeup is quite readable.", "The writeup is a good description of the changes made, but The writeup does not explain the changes that were made.", "The code snippets are not clearly separated, and The writeup would have been helpful to have a link to the code snippets.", "Also, the test plan is not described in any detail.", "This is a problem, and the test cases should be described in more detail.", "the test plan should be explained in more details."], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0]], "127": ["The goal of this project was to add RSpec tests for the functionality added for project <link> . The changes submitted by project E1948 can be found <link> . See the Test Outline section to see the specifics of our testing work. For this project, our plan was to write new RSpec tests for new methods added in project E1948 for ReviewMappingHelper. In total, our team wrote 34 tests to cover the 8 new methods created or altered methods. These 8 methods are listed below. See the Test Outline for more details on the RSpec tests written these methods. This section shows the RSpec test we created for each of the methods defined in Relevant Methods above. The full test file can be found <link> . This method gets review and feedback responses for all rounds for the feedback report. Before testing this method, RSpec sets up an assignment, a review, and a reviewee. Then it creates 2 responses from the reviewer (one for each of the initial 2 rounds). During testing, these RSpec tests assures this method returns the correct amount of responses for each round. In this scenario created, each round should return 1. There is an additional two tests in this RSpec feature, testing to see if a 3rd round returns nothing if there was no response created (which there is not a 3rd response pre-setup. Likewise, there is an additional test where it creates a third response and assures that this method returns 1 for round 3. Setup <image> Tests <image>. This method gets the review score awarded based on each round of the review. Before testing this method, RSpec sets up an assignment, a reviewer, and a reviewee. Then it assignments 3 scores (one for each round) given by the reviewer. During testing, these RSpec tests check to see if this method returns the correct awarded score for each round requested. Setup <image> Tests <image>. This method checks the submission state within each round and assigns team color accordingly. The check_submission_state method calls the submitted_within_round? method to check if the submission was made in the current round and if yes then the purple color will be assigned to the team. One of the test cases tests this feature that purple color is being set or not. If no link was included by the team in the submission or the link is not a wiki link or the assignment was not submitted within the round, then the team will be assigned green color. These conditions are also being covered in the tests below. Setup <image> Tests <image> <image>. This method is a helper method for get_each_review_and_feedback_response_map. It sets the instance variables @review_responses_round_ and @feedback_response_maps_round_ after calculating the number of responses received by the team after each round. This method should return the corresponding response map associated with each round of review. The initial setup to test this method includes creating a reviewer, creating responses and review_response_map_ids. The tests check if the correct response map is returned or not for each round. Setup <image> Tests <image>. This method is a helper method for _team_score.html.erb view. It sets the metrics, namely min, max and avg score value for all reviews for a particular round and team. In the setup for the Rspec test, we create assignment, due dates for 3 rounds, student, reviewee, reviewer and user. We have 3 test cases each for round 1, round 2 and round 3. Setup <image> <image> Tests <image>. This methods checks if the link submitted for evaluation has been updated or not since the last round. The method takes in parameters round, due date and link updated time and compares the dates to check whether the latter for before the former time. The method returns false if it's not updated and true otherwise. The setup for this rspec test included creating an assignment and creating 2 rounds with corresponding due dates along with a reviewer and reviewee for the same. The first test case asserts that the method returns false when link is not updated. The second test case asserts that the method returns true when the link is updated within the due date. Setup <image> Tests <image>. 34 out of 34 tests in the review_mapping_helper_spec.rb test file. URL link of video of review_mapping_helper_spec.rb tests running and passing:- <link>. 1. We refactored get_review_metrics to get_review_volume, as per request from the professor <image> 1. We refactored get_team_colour & obtain_team_colour to read get_team_color & obtain_team_color, as per request from the professor <image> 1. We refactored calcutate_average_author_feedback_score to calculate_average_author_feedback_score, as per request from the professor <image>. <image> <image>.", ["The writeup is quite readable, and the tests are described well.", "The writeup is not clear why the tests were written in the order they were.", "the tests are not described in any detail, and the tests would be helpful to have a link to the code snippets.", "I would have liked to see more detail on the tests, and I would suggest that the code be shown in a larger font size."], [0.0, 1.0, 1.0, 1.0]], "128": ["Description of the current project This project is intended to make Bookmarks more user-friendly, credible and valid. Bookmarks in expertiza are created by reviewers and can be used by authors for their work on any project. On each line of the signup sheet are two icons, one for adding a bookmark to the topic, and another for viewing bookmarks on the topic. If the instructor allows the participants to create bookmarks, then only a participant has access to create and view them. He should be able to create a new Bookmark only if he enters a valid one. Problem 1 : When a user after logging into expertiza wants to add a new bookmark or view existing bookmarks for the available projects, he will click on the buttons against the specific title. Once he goes to either 'Create New Bookmark page\" or \"View existing bookmarks page\", he's not able to go back to Sign-up sheet using \"back\" button. <image> Enhancements to this problem : We can go back to Sign-up sheet after clicking on \"back\" button. <image> Problem 2 : If a user clicks \"Add Bookmarks\" button, he will be navigated to a \"Add a new bookmark page\" where he can give details of new bookmark (like URL, description etc ). <image> After creating an empty bookmark, we are displayed this message as below in the figure. <image> Problem 3: When the instructor doesn't give access for participants to add/view bookmarks, the participants are still able to access them. He un-checks \"Allow participants to add bookmarks\" button and participants are still able to access them. <image> Enhancements to this problem : Now,if the instructor un-checks the button \"Allow participants to create bookmarks? \", the actions View and Add Bookmarks are no longer visible/accessible. <image>. 1. app/views/bookmarks/list.html.erb : This file is a view for listing the existing bookmarks of a particular Title of the project. 2. app/views/bookmarks/new.html.erb : This file is a view for creating a new bookmark - (A valid one). 3. app/views/sign_up_sheet/_actions.html.erb : This file is a view for showing the actions against the title of the bookmark. 4. app/controllers/bookmarks_controller.rb : This file has the code regarding the access that instructor gives to students regarding Bookmarks. a) Back button for the page \"View Bookmark\" and \"Create Bookmark\" was resolved. 1. Login with the credentials to expertiza. 2. Go to 'My assignments' and select OSS Project/writeup. 3. Select 'Signup sheet'. Select a title and choose either 'View Bookmark' or 'Add Bookmark' button 5. If you choose 'View Bookmark', after viewing, press the back button to go back to Signup sheet. 6. You will land up in Sign-up sheet page. 7. If you choose 'Add Bookmark', you can add by giving Bookmark details and save it. 8. Now press back button. 9. You will land in Sign-up sheet page. b) Creating Blank(Empty) Bookmarks problem was resolved. 1. Login into the expertiza with the credentials. 2. Go to 'My Assignments' 3. Select OSS Project/writeup 4. Now choose the \"Sign-up sheet\". 5. You will be displayed with titles to all available OSS projects. 6. Choose the one for which you want to create/add a bookmark. 8. You should be given a warning saying \"Error occurred while creating bookmark. 9. You will still remain in the same page unless you press 'Back' button. c) Issue of having the access to create the bookmarks even though instructor denied the access was resolved 1.Login to expertiza as instructor. 3. Select OSS Project and to edit. 4. Click on 'Topic' button and see if the 'Allow participants to create bookmarks' is checked or not. 6. Now login into expertiza as student and select 'My assignments' 7. Click on OSS project/writeup. 8. Select 'Sign-up sheet' and you see all titles available for OSS projects. 9. Against each title, you can't see any buttons to either add/view bookmarks. 10. You can now repeat the process by checking in the button and see if the add and view button against the titles are accessible/not. 1. A questionnaire can be built to grade a bookmark. Questions maybe like \" How helpful was this bookmark? \", \" Did you use this bookmark for your work? 2. A reviewer should be recognized or credited if he added useful bookmarks i.e if the author has made use of the bookmark. 3. A function to add extra credits automatically if a participant had submitted more than threshold number of useful bookmarks.", ["The document is very readable.", "The document explains the changes well, and The document is easy to follow.", "However, The document does not explain the changes that were made to the code.", "the code is not described in any detail.", "This is a problem that needs to be addressed.", "Also, the screenshots are not shown in The document.", "the screenshots are just shown in black and white.", "I would have liked to see more detail on the changes."], [1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0]], "129": ["If one respond to the advertisement, a join team request will be created and the topic holder can see it on ‚ÄúYour team‚Äù page. After a student gets a team and the team is not full, (s)he should also be able to send invitations to others. Fix Issue #227 : If user 'A' got a topic and user 'B' got no topic, then if A join B‚Äôs team, A‚Äôs topic is dropped and A and B end up with a new team with no topic. A user who is enrolled in an assignment and has a topic, can advertise for more team members. When another user goes on the 'your team' link, who is enrolled in the same assignment but doesn't have a team and topic yet, he will be able to see the team advertisements by other teams. This request goes to the team who had posted that advertisement. The request can be approved or denied by the team members. If there is an entry in the \"join_team_requests\" table for a user, then (s)he can only see advertisements if the corresponding \"status\" is \"D\", which implies that this user is not yet part of a team. If a user has an assignment and a topic only then (s)he will be able to advertise for team members to join their team. If a user doesn't have a topic (s)he won't be able to advertise. The scenario in which A, B were two users, A with a topic, B without a topic, A joins B's team but A's topic gets dropped; A,B become a team but with no topic. Such cases are now avoided as we have ensured that without first selecting a topic a user cannot advertise for team members nor can he send invitations to other users to join his team. If (s)he has a topic then he'll be able to see the option for advertising for teammates. If the assignment doesn't have a topic then the user will be able to send out team invitations. 1)Login as Admin, create an assignment with all the necessary details like maximum no of users per team, add topics for the assignment, enroll users(students) in the assignment. 2)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. You should be able to see the assignment now in the Assignment section. 3)Since A doesn't have a topic yet, so you won't be able to see the advertise link. 4)Go to the sign-up sheet for the assignment, select a topic. A now has a topic, so now A can advertise for team-members. 6)Login as another user(Student) or impersonate another student, say student B, whom you have enrolled in the assignment. 7)Since B doesn't have a topic yet, so you won't be able to see the advertise link. 8)Go to the sign-up sheet for the assignment, you'll be able to see a trumpet icon next to the topic that has an ad posted. 9)Click on the icon, you'll see the ad posted by A. Click on request to join A's team. 12)Login as user A or impersonate A, now you'll be able to see the team join request sent by user B. And now if you login as B or impersonate B, you will no longer be able to access the trumpet icon which is a link to all ads pertaining to topics the concerned assignment. 14)Had user A declined User Bs join request, the status in the table \"\" would change to \"D\", that means user B still doesn't have a team. So, now if you login as B or impersonate, you'll be able to see the ads again. 1)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. 2)You should be able to see the assignment now in the Assignment section. Since A doesn't have a topic yet, so you won't be able to see the advertise link. 3)Go to the sign-up sheet for the assignment, select a topic. A now has a topic, so now A can advertise for team-members. 4)This ensures that for an assignment with topics, a user can send out advertisements only if (s)he has a topic. 5)Login as Admin, create an assignment with all the necessary details like maximum no of users per team, do not add topics for the assignment, enroll users(students) in the assignment. 6)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. You should be able to see the assignment now in the Assignment section. 7)Since the assignment doesn't have any topics, therefore, you will be able to see the advertise link. You won't see a sign-up sheet since the assignment has no topics.", ["The writeup is very good, and The writeup explains the changes well.", "The writeup is not clear why the \"Issue #227\" is not mentioned in the title, but it is clearly stated.", "The description of the changes is not very detailed.", "I would have liked to see more detail on the changes.", "Also, the screenshots are not very large, and the screenshots should be larger.", "the screenshots are not large enough to show the changes, and the screenshots are not clearly displayed."], [1.0, 0.0, 1.0, 1.0, 0.0, 0.0]], "130": ["<link>. The instructor needs to watch teams being formed, and every time a new team is formed, a new mentor needs to be assigned, outside of Expertiza. This leads to a lot of work for the instructor, as well as sometimes long delays before a team is assigned a mentor. 3. When a team reaches a target size of greater than 50% of the maximum teammate capacity, then: 1.1. A mentor will be assigned to this team and notified via email. 1.2. Participants in an assignment will be identified as mentors via their participant permissions ( <link> ). Anyone with ‚Äúmentor‚Äù permission for an assignment is eligible to be automatically assigned to mentor a team when a new team is formed. Develop a trigger that: 1. Is activated when any team has been formed that has k members, where k is greater than 50% of the maximum team capacity 1.1. ex: max members = 4, trigger activated when the team size reaches 3 2. Assign a mentor to the team 1.1. Mentors should be evenly assigned to teams, so a good strategy is to assign the mentor who has the fewest teams to mentor so far. 3. Notify the mentor via email that they are now assigned to a specific team, and provide the email addresses of the team members. 4. Possibly notify the team members that they have been assigned the mentor with contact information (further discussion here). The mentor assignment feature has a few preconditions and assumptions which have been outlined below. 1. An instructor has already added an assignment without topics. 2. ‚Äúmentor‚Äù permission exist 3. There are users in said assignment with mentor permissions. 4. A mentor has yet to be assigned to said assignment. 5. Mentor assignment is done only once, does not take into consideration drop offs. <image> <link>. The value will be only present if the mentor has been automatically assigned. <image> <link> The instructor view will also need to have visibility of what mentors the teams have. <image> <link>. 1. <link>. <image> <link>. 1. <link> <image> <link> 2. <link> <image> <link> <image> <link> 3. <link> <image> <link> 4. <link> <image> <link>. This will allow for the auto assign mentor feature to be disabled if the instructor does not want the work flow executed for the assignment. One trigger had to be added to invitation.rb so when users accept invitations to join a team the mentor management logic can execute. 1. <link> <image> <link> 2. <link> <image> <link> 3. <link> <image> <link>. Two views were updated in the Expertiza application to allow the user to see who the mentor is on their team. This also had to be done in two places, since the instructor view of a team is different than the student's view of the same team. 1. <link> 2. <link>. <image> <link>. 3. Impersonate the student account you found.If there is no team, create one by inviting other student to your team, or create a team using the admin control. 4. By toggling the Auto assign mentors when team hits > 50% capacity? in the assignment configuration page you will be able to: 1.1. Enable the functionarities and logics that our team implemented. 1.2. Disable the functionarities and logics that our team implemented to allow an admin to assign mentor manully. 1. Add team members to any team under the Rock on Assignment using any following way: 1.1. Invitate/Accept the team invitation using impersonated student accounts. 1.2. Add student to team by using the admin control. 2. Observe that when the member size passing the capacity (3 for this Rock on assignment), a mentor called Student6801 will be added to the assignment team. 3. Remove the mentor and the added students of the assignment team using the admin control. the second team member added), a mentor will not be added to the assignment team. 5. You should also be able to see that mentor is showing on the team list. 1. By doing similar step as we mentioned above, you should not see any of the following: 1.1. A mentor is added to the team after the team size changed. 1.2. A mentor is displaying on the team list unless this mentor account: Student6801 is manually added or invited. 1. A team will have a mentor after addMentor is called. 2. A team will have a mentor removed after removeMentor is called. 3. The mentor with lowest number of team assigned will be return after selectMentor is called. 4. The selectMentor except not to receive any message if a team already has a mentor. 5. The selectMentor except not to receive any message if a team has size < 50% of the maximum size.", ["The writeup is not very detailed, but The writeup does have a good description of the changes made.", "The writeup is not clear why the team is being assigned a mentor, and it would be helpful to explain how the team will be assigned a new mentor.", "The code snippets are not very large, and The code snippets should be shown in a larger font.", "The code snippets should be separated into sections, and then separated into subheadings.", "For example of that The code snippets should be separated into sections, and then separated into subheadings : \"Mentor assignment is done only once, does not take into consideration drop offs\" is not a very good description. "], [1.0, 0.0, 0.0, 1.0, 0.0]], "131": ["The student_task/list page is the page displayed to a student after logging in into expertiza. 1. Show the record of each group collaborator(s) for each course. Another div is to display all the assignments and their information, include Assignment, Course, Topic, Current Stage, Review Grade, Badges, Stage Deadline, Copyright Grants and Make Public. Original page before modifying showing below, all the courses and all the assignments are displaying in the same table, and badges have own column. <image> <image>. Here are some existing problems and unclear parts of the pageÔºö 1. Problem1 : Consider the cases where a student might be enrolled in assignments from more than one course. In this case, assignments should be grouped by course, with the course name given before the listing of the first assignment. 1. Problem2 : Remove the column for Review Grade because it makes no sense, change Review Grade to Submission Grade. Show the actual score and show the blue button. 1. Problem3 : Delete the badges column, and if the Assignment has a badge, mark it directly next to the assignment name under the assignment column. Fixing app/views/student_task/list.html.erb original code of how to display course are showing below <code> In order to group the courses, we added a group_by method to find out which courses does this assignment belongs to, and group the assignments that has the same courses name at one table. The modified code is showing below. <code> We will print out the course name as each table head, group the assignments, and we take down Course coloum from table content since the course name is already showing as table head. Also, for the assignments that have not assigned to a course, we will print out No Course Assigned Yet . 1. Fixing app/views/student_task/list.html.erb 1. app/helpers/student_task_helper.rb For this problem, first, we change Review Grade to Submission grade, which only need to modify <code> to <code> on list.html.erb. Second, we change how we display the score. Original code is showing below <code> In the original code, each grade is assigned to /100, which is not correct because not every assignment has 10 reviews (one review count for 10 point). Since we need to display the current score on the page, we need an array to carry the current score and display it on the result. The modified code showing below. <code>. Fixing app/views/student_task/list.html.erb Since not too many assignments are able to get badges, that make badges column barely have contents. Therefore, we display it after the assignment name and delete Badges coloum. If one student gets a badge, it will display a small picture after the badged assignment. Hover over your mouse on it, and it will display the information about this badge. <code>. <code> <code>. Page showing right now <image> <image>. Since when no assignment was assigned to the student, it should not show the table content on the page. Change from <code> to <code> 1. Second, we modified spec/features/assignment_submission_spec.rb . In order to use the content inside of the original test file, we added a def function. The function is able to set up the database for testing needed, and test the necessary function from the student_task/list page. - The def function we added is showing below. <code> - Later on, we will use this list_page function on our test cases. It will show if the student_task/list page has the assignment name( Assignment1684 ) that we putted on the database. Also, since there are an assignment assigned to the student, we will expect page to have course table information ( eg. Assignment, Submission Grade, Topic, Current Stage, Stage Deadline, Publishing Rights ). Since the assignment was not being graded yet, on the submission Grade column it will show a N/A . We are using student student2064 as our user. Therefore, the page should show student2064 . We also assigned the student to team up with CSC517, test ( student_id, user type. user type will be test #random number ), and on the page it should show Students who have teamed with you CSC517, test#{n} . Next, the page should not contain other course name. Testing code is showing below. <code> 1. Next, we added a new file spec/features/student_task_spec.rb . However, instructor_interface_helper did not help us to sign up an assignment to the user. Therefore, we will testing if the user have not been signed up for an assignment, and the student_task/list page will only show the first div part. The course information table will not appear on the page. <code>. <image>.", ["The writeup is very good, but The writeup could have been improved by showing the code changes, and also by showing what was changed.", "The writeup would have been helpful to show the code snippets, and to explain the changes.", "The test plan is not described in any detail, and The test plan would be helpful to have a link to the code.", "Also, The test plan should have been described in more detail.", "I would have liked to see a description of the tests, and how they work."], [1.0, 1.0, 1.0, 1.0, 1.0]], "132": ["For testing the changes made, the following credentials are recommended: 1. Instructor Login: username: instructor6 password: password This project does compile. It provides a platform to view assignments, manage teams, select topics and work on improvement through anonymous peer reviews. Expertiza allows the instructor to define different topics that students or teams could choose from as their assignment. Each topic can have 0 or more slots that indicate the number of students or teams that can be signed up for that topic. To improve the user experience when managing topics, the following tasks were identified: 1. Issue #971: Change create topic UI into AJAX 2. Issue #926: We need a way to sort topics by topic number in assignment#edit page 3. Issue #718: We should allow instructors to give feedback when accepting or rejecting topic suggestions. Currently, when instructors manually enter topics, they have to go back and forth between the list of the topic page (views>sign_up_sheet>_add_signup_topics.html.erb) and the create topic page(views>sign_up_sheet>new.html.erb). Adding a new topic can be done through an editable grid (see js-grid) without leaving the list of topic page, by making use of AJAX. The list should be automatically updated when a new topic is entered. <code> On the View ' app/views/sign_up_sheet/_add_signup_topics.html.erb' the following was added: <code> The content of the above tag is completely rendered via Javascript, where we use JSGrid for dynamically allowing users to Add, Delete and Update Topics on the same page. In ' app/assets/javascripts/signup.js ' file, the following was added: The following content shows how AJAX calls are handled/made to our signup controller so that the CRUD operations on the topics page is dealt with <code> The Preview View for Topics Management : <image> After Our Implementation using JS Grids : <image>. This task is to do with sorting the Topics according to the topic number. This functionality is taken care by Js-Grid by itself, where clicking the topic# will toggle the topics in the ascending/descending order. Sorting in Ascending Order: <image> Sorting in Descending Order : <image>. Instructors should be allowed to give feedback when accepting or rejecting topic suggestions. Earlier, feedback on topics suggested by students can be given only when the instructor wants the topic to be revised, not when (s)he is approving or rejecting it. In app/controllers/suggestion_controller.rb Including the text provided in the comment field, while approving the topic. This ensures that comments are saved when an instructor accepts a topic suggestion in the backend. <code> Including the text provided in the comment field, while rejecting the topic.This ensures that comments are saved when an instructor rejects a topic suggestion in the backend. <code> Only an instructor should be able to approve or reject a submission. Therefore, only for instructor role, approve and reject submission options will be provided. <code> Comments can be added even during topic approval or rejection. <image> Comments during approval or rejection get reflected in the feedback list. <image>. 1. Issue #971: Change create topic UI into AJAX 1. Login as an instructor. It will automatically go to the manage courses page 2. Click Assignments tab next to Courses 3. Select the assignment for which a new topic has to be added 4. Click the edit icon for the assignment and go to Topics tab 5. You will be able to see the topics list in a grid format. Click on add icon on the right side corner of the grid 6. You can also edit an existing entry by just clicking on that row in the grid without being redirected to a new page 1. Issue #926: Sort topics by topic number in assignment#edit page. 1. Log in as any user or instructor. 2. Go to the assignments list. Note: this is not the manage assignments for instructors. 3. Click into a finished assignment. 4. Click into a current assignment. 1. Issue #718: 1. Login as an instructor. It will automatically go to the manage courses page. 2. Click on the \"Manage Notifications\" link above the \"Courses\" and \"Assignments\" links. 3. You will be directed to a creation page for notifications. The notification will display on the first page the user is shown. It will disappear when they change or reload the page. Note: instructors on the management page will retain the notification if they switch between Assignments, Courses, and Questionnaires. This is because the JavaScript does not actually reload the page. If the assignment is found, it loads all the topics and checks if the rendered format is json along with a http status 'OK'. If the assignment is not found, an empty json is rendered.", ["The writeup is very good, and The writeup explains the changes well.", "The writeup is not clear why the code snippets are not in the code.", "the code snippets should be in the Github diff view.", "the code snippets should be shown in the Github diff view, and the code should be linked to in the description.", "that the code snippets should be shown in the Github diff view, and the code should be linked to in the description is a good way to show the changes made.", "But This would be better to show the code snippets in a table of contents."], [1.0, 0.0, 1.0, 1.0, 1.0, 0.0]], "133": ["Currently we have a few classifiers that can detect useful features of review comments, such as whether they contain suggestions. The suggestion-detection algorithm has been coded as a web service, and other detection algorithms, such as problem detection and sentiment analysis, also exist as newer web services..but they need to be integrated properly using API calls in expertiza code. But later on we faced many issues such as: 1) The API call links were outdated 2) The new link that we found were incompatible with the previous work 3) The planned task of adding new API calls as per Carl Colglaizer's Framework turned out to be irrelevant or not required for this project, so we dropped it. So we decided to start with integrating these API Calls from scratch. Features we added in this project 1. Setting up a config file 'review_metric.yml' where instructor can select what review metric to display for the current assignments 2. Based on the selection made by professor, API calls (sentiment, problem, sugegstion) are made and a colorful table is displayed below the review form for student to review 3. The total time taken for making these API calls will be displayed below the table. This design pattern helped us achieve the decoupling and abstraction of implementation code base (makeARequest Function) of API call from the calling function (getReviewFeedback function). Later, refactoring of _response_analysis.html.erb partial further decoupled the implementation. Thus, in a nutshell, application of facade pattern along with some refactoring lead to a decoupled implementation of integration of all 3 API calls. <image>. In the partial view file _response_analysis.html.erb file, we added new javascript functions to make, process and display output of API calls. 1. review_metric.yml config file <code> <image> 1. response_controller.rb <code> <image> 1. response.html.rb <code> <image> 1. _response_analysis.html.erb - fetch_response_comments() function <code> <image> 1. _response_analysis.html.erb - getReviewFeedback() function <code> <image> 1. _response_analysis.html.erb - makeARequest() function <code> <image> 1. _response_analysis.html.erb - combine_api_output() function <code> <image> 1. _response_analysis.html.erb - generateTable() function <code> <image>. 1. <link> for problem metrics only 2. <link> for sentiment metrics only 3. <link> for suggestions metrics only. In order to make the API call, the partial view \"_response_analysis.html.erb\" is rendered in \"response.html.erb\" view file which will be responsible for sending a JSON input to the web service. The input will contain the review comment written by the user and when the student hits the \"Get review feedback button\" the comments will be sent to these api calls in the following json format: Below is a sample input <code> Once the request is sent, we expect the output to be in the following format: Sample Output: (for sentiment analysis API call) <code> Sample Output: (for problem detection API call) <code> Sample Output: (for suggestion detection API call) <code> These outputs (which is a JSON) will be parsed and the concerned metrics such as the sentiment, problem and suggestion will be extracted so the user will be able to view a summarized result of how well their review comments are. In addition, the result will be presented in a colorful tabular format to the user after they hit the \"Get Review Feedback\" button. Also, the total time taken for making these API calls will be displayed below the table. Rspec tests for the same have been written in response_controller_spec.rb <image>. 1. The functionality was written on the client side in javascript solely in _response_analysis.html.erb 2. To test this view, any type of review must be accessible as a student. 3. There is a button at the bottom of the review called 'Get Review Feedback'. 4. When pressing button, API calls are issued and the metrics will show up within the table (a sample of which is displayed below). 5. API calls are slow and will take time to process until the 'Loading...' text disappears. 6. You can modify the comments and click the 'Get Review Feedback' button again to get new feedback, that too can be achieved without the need of saving the review, but still saving the review first is a better option to approach this. 7. All the review feedback for the comments will be displayed in a colorful table. <image>. 1. <link> 2. <link> (the link is mentioned here for records. 3. <link> 4. <link> (make sure you change branch to 'beta' branch if the page doesn't load by default to beta branch) 5. <link>.", ["The writeup is very good, but The writeup could have been improved by showing the code snippets in a more readable format.", "The writeup would have been helpful to show the code changes in a table, rather than just a list of them.", "the code snippets are not shown in a large font size, and the code is not described in prose.", "the code snippets are just shown in the form of a list, with the code in a text box.", "This is not very helpful."], [0.0, 1.0, 0.0, 0.0, 1.0]], "134": ["1. Renaming done on the UI as well as on the backend 2. Varible names refactored appropritely 3. Flash messages changed accordingly. The error which is raised is due to the following validation present in the model late_policy.rb. 1. After discussing with professor we have decided to increase the max penalty limit to 100 2. Added a flash error message in the create function of late_policies_controller.rb <code>. 1. Added a back link in which redirects the user to edit assignment page. 2. Saved the assignment object in a session variable when the user clicks on the the edit asignment icon 3. We also added a back button on index page since there was no direct way of going back to edit assignment page once a late policy was created. 4. We also added padding between the edit and delete links on index page <code>. While testing this issue we noticed that the functionality was working perfectly fine, however, it was not user friendly. 1. We decided to add a tooltip icon explaining how this functionality works 2. We also inproved its UI by adding the alignment and padding. 1. Added test file late_policies_controller_spec.rb with appropriate test cases 2. Added test file late_policies_spec.rb with appropriate test cases. 1. <link> 2. <link> 3. <link> 4. <link>. 1. <link> 2. <link>.", ["The writeup is quite readable.", "The writeup is very readable.", "The writeup is not clear what the changes are, but The writeup is clear that the changes have been made.", "The test plan is not described in any detail.", "I would have liked to see more detail on the tests."], [1.0, 1.0, 0.0, 1.0, 1.0]], "135": ["<link> is a large project developed as a combined effort of students and faculty using the <link> framework. 0536558. Additional funding from the <link> <link> (LITRE) program, the NCSU <link> , the NCSU <link> Initiative, and the Center for Advanced Computing and Communication. Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.4. <link> 1.1.1. <link> 1.1.2. <link> 1.5. <link> 1.1.1. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.1.2. <link>. The goal of this project is to use both Bootstrap and AngularJS to improve the look of the entire Expertiza including the representations of buttons, tables, and other elements. Certain changes in design will also improve the efficiency of the web app when it comes to the amount of time it takes for a page to be loaded. We plan to improve the user experience by replacing the plain html buttons with stylish bootstrap buttons. To make the design of Expertiza consistent, our goal is to replace this plain-styled text with color coded Bootstrap buttons. The new design of Expertiza will include the fixed menu bar on the top of the page. As it can be seen on the screenshot, the user has scrolled down the page, but the menu bar is still visible on the top of the page, making it convenient for the user to navigate throughout the website. <image>. Please refer to the later part of this article: <link> for viewing the current design Now, when trying to open manage-courses, all records are loaded before rendering them onto the page, which takes too long time to load and is not responsive at all. Better practice is on Virgin American‚Äôs website: <link> When the website is representing the calendar, the price for each day is not actually loaded. <image> So in Expertiza, we can create several buttons for course semesters in the page. And if the list is still too long and takes a long time load, we can use a ‚Äòshow more‚Äô button ,or automatically load more data when the scroll bar reaching the end of the page, to minimize the content we need to load after one single mouse click. <image>. We will need to reduce the number of buttons. So we can replace them to 5 buttons with responsive design, that is, no redirecting happens after clicking on the buttons. <image>. Please refer to the later part of this article: <link>. That takes a long time to load and the length of review list is too long. <image>. As an assignment with a goal of improving the graphic design and responsiveness of Expertiza web application, this project mainly follows design patterns from two design pattern groups: structural and behavioral. Another structural design pattern that will be seen in this project is Front Controller pattern. While this pattern suggests that there is a single controller that takes all the requests, when we have both Rails and AngularJS coexisting, we can think of Rails framework as being the \"single bridge\" to the database from AngularJS's stand point. AngularJS, being an outstanding front-end framework, will interact with the user and pass all the request to Rails framework. Rails framework then queries/updates the database and provides AngularJS with the data. Finally, the third structural design pattern that this project follows is Module pattern. Modules are one of the essential constructs in the skeleton of AngularJS framework and, hence, this project is bound to follow module pattern. <image>. Since the large part of this project is to iterate through the database query and show the data to the user with a reduced delay, this project follows the well known Iterator pattern. This approach greatly improves the user experience since it does not leave the user waiting empty-handed until Rails framework completes the full query of the database. <image>. 2. Bootstrap will be applied for better user interfaces. <image>. 2. The database should not be executed before the user clicks on the button. 3. Bootstrap will be applied for better user interfaces. <image>. 1. The list is too long: if there are 20k users in the database, there will be 20k rows in this table in a one page! 1. Load only a given number of records to the view, such as 100 records, when accessing into this page for the first time.", ["The writeup is not very detailed, but The writeup does have a good description of the changes made.", "The writeup is not clear why the design patterns are not described in more detail.", "the design patterns are not explained in any detail.", "The design pattern for the \"Back to the page\" section is not explained.", "that The design pattern for the \"Back to the page\" section is not explained is a good example of a design pattern that is not described.", "I would have liked to see more detail on the design pattern."], [1.0, 1.0, 0.0, 0.0, 0.0, 1.0]], "136": ["This project works on improving the search functionality of Expertiza, by adding search bars if not present, introducing advanced search feature where user can search on the basis of more than one parameters and making the search functionality appear more elegant. 1. An instructor or administrator can search for a user by name, user-ID, or other characteristics. 2. An instructor should be able to search for assignments by name, due date, or other characteristics. 5. An instructor or administrator should be able to search for all the assignments that a particular user has participated in. In the current system workflow, we found that the user is unable to search in the Manage Users view. In the proposed workflow, we plan to enable the user to search by all the columns in the UI viz. The user will be able to apply multiple filters at a time and the output of the query will match all filters applied. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. However, the search is case sensitive. In the proposed system, the user will be able to search for an assignment using additional filters such as Creation Date and Updated Date along with Assignment Name. The user will also be able to apply multiple filters at a time and the output of the query will match all filters applied. To search for an assignment by Creation Date, the user will be prompted with a calendar where he can select a date and all the assignments created on or before the selected date will be displayed. To apply multiple filters, user can tap on the Advanced Search button available, adjacent to the Search button; a hidden div will then be rendered below containing textboxes for all the columns. All assignments that were created before the selected date for Creation Date or Updated Date columns and the ones that match other filters will be returned. A empty list will be returned if the search criteria doesn't match any records in the database. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. The existing system does not have a search functionality under Questionnaires. The user will be able to apply multiple filters at a time and the output of the query will match all the filters applied. To search for an assignment by Creation Date, the user will be prompted with a calendar where he can select a date and all the assignments created on or before the selected date will be displayed. To apply multiple filters, user can tap on the Advanced Search button available, adjacent to the Search button; a hidden div will then be rendered below containing textboxes for all the columns. All assignments that were created before the selected date for Creation Date or Updated Date columns and the ones that match other filters will be returned. A empty list will be returned if the search criteria doesn't match any records in the database. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. The existing system does not have a search functionality under Reviews. The user will be able to apply multiple filters at a time and the output of the query will match all the filters applied. The user will be able to apply multiple filters at a time and the output of the query will match all filters applied. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. 1. Search by user name 2. Search by user name that does not exist 3. Search by user email 4. Search by user email that does not exist 5. Search by user email containing a substring 6. Search by user full name 7. Search by user full name is empty 8. Search by user name and email 9. Search for assignments participated. 1. Search by user name 2. Search by institution 3. Search by creation date 4. Search by updated date. 1. Search by name 2. Search by courses used in 3. Search by assignments used in. 2. Search by score 3. Search by text comment length 4. Search by reviewer and reviewee.", ["The writeup is very readable.", "The writeup is not clear what the changes are, but The writeup is clear that the changes have been made.", "The design doc is not very detailed.", "The design doc does not explain the changes that were made.", "It would be helpful to have a description of the changes."], [1.0, 0.0, 1.0, 1.0, 1.0]], "137": ["The scores for different users, participants and teams for several assignments belong to different courses are calculated for multiple views. This code needs to be made faster. Requirement: Participant.find(participant id).scores # should return a Hash or new object, with a single database query. This method should return the scores of a participant from all the assignments in which the participant has submitted. 1. Participant already has its own participant id. Each user has a different participant for each assignment so we do not need to take participant id as the parameter. 2. This also means it should return a hash that will contain the scores of all the assignments in which this user is a participant since participant id changes each time. A new view was required since this view did not exist previously. A new link has been added to the user's homepage: <image> On clicking on this link, the user will be able see his scores for all the assignments he/she has participated in. This is a new view and will look as below: <image>. We needed to write a method and add a view that computed and displayed the scores of a user across all the assignments user has participated in. We added a new method all_scores in the grades_controller.rb. This method executes the following steps: 1. :Executes the below sql query: <code> The user_id is of the current user is passed as a parameter to this query. Once the hash is created and populated accordingly, this hash is used by the view to display to the user. Requirement: assignment.scores # should return a Hash or new object, with a single database query. This method should return scores of all the participants in an assignment. Instead, we get the scores in the query itself thereby reducing the complexity of the code. 2. The previous code was calling several methods that computed the different parts of the score in a loop. We tried to reduce this by having the database query (wherever possible) do most of the work for the method and the method just populate the hash. 3. Even though the single query approach works faster, for assignments that have a lot of responses, we noticed that the code still took some time to complete. The query in itself runs fast (when executed directly on the SQL server). The scores are computed in the get_scores method of the assignment.rb. For all quiz questionnaires taken by the participant, get all the quiz responses. Create a hash and store the score computed by calling Score.compute_quiz_scores. The total score is then calculated and stored in the hash by calling compute_total_score for each participant. 2. For all teams that participated in this assignment, get the scores into the hash by calling Score.compute_scores for each assessment and questions. Each of them might query the database adding to the time taken. We refactored this code to have the following steps: 1. Created an empty hash before hand. 2. Run a single SQL query that will return all the data required by the hash. 3. Loop through the result set to populate the hash. This speeds up the code since there is only a single SQL query that will get executed. The query is outside the loop and hence reduces the time required. The old code and the new code were tested against the same database, on the same machine and network and it was observed that there was a significant reduction in time taken to get the scores. Snapshot of the time taken for the previous method: <image> Snapshot of the time taken for the method after the above changes: <image> As can be observed, the improvement is significant. Requirements: Add a method course.scores which should return a Hash. This method should return scores of all the participants enrolled in a course. 1. We needed to get the scores of all users for all assignments for a given course. A new view was required since this view did not exist previously. This view will be displayed on clicking on the View Scores option in the Actions panel of the courses as highlighted below: <image> On selecting the highlighted option above, the following page will be displayed: <image>. We needed to write a method and add a view that computed and displayed the scores of all users that have enrolled in a course. This method does the following steps: 1. Creates an empty hash. 2. Runs a single SQL query as below: <code> The course id is passed as a parameter to this query. 1. The result returned from the query is used to populate the hash. This hash is then used to display the different parts of the view. 3. Avoided method calls where values could be obtained in the same SQL query itself. 2. The SQL queries could be compiled into database views. However, if such is required, the query can be made into a database view. 3. The view_my_scores method in the grades_controller can also be made similarly fast by replacing multiple database queries and loops with a single query.", ["The writeup is quite readable, and the code snippets are well organized.", "The writeup is not clear why the code is not described in more detail.", "the code snippets should be shown in a table of contents.", "the code snippets should be described in prose, rather than in prose.", "I would have liked to see more detail on the changes to the code.", "For example of that I would have liked to see more detail on the changes to the code : the code should be explained in more details."], [1.0, 0.0, 0.0, 0.0, 1.0, 1.0]], "138": ["<link> is an <link> <link> application designed to support team/individual student projects which involves team creation, project sign up, project submissions, document upload (almost any format), and carry out multiple peer review processes for learning and educational purpose. This Open Source application can be cloned from <link> , the latest active branch is <link> . <link> supports email functionality within a Rails application, which involves sending and receiving emails from and to an application. Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.4. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.6. <link> 1.1.7. <link> 1.1.8. <link>. Another major issue is the migration issue from <link> to <link> as a result of which many of the unsupported features for Rails 4 have stopped working. Expertiza has two different Mailer implementations based on type of <link> : Synchronous events and Asynchronous events.<ref> <link> </ref> The synchronous events refer to events that should be immediately notified. All synchronous events are triggered by <link> and the call is made to app/mailers/mailer.rb (formally as model in /app/models/) via the sync_message() method call. Here mailer.rb extends <link> class. The required email template has been added for both generic_message and sync_message method calls. They are sync_message.html.erb and sync_message.text.erb <code> 3. Correct <link> and <link> codes have been added to app/views/mailer/generic_message.html.erb 4. The following line in the sync_message(defn) method has been commented out from app/mailers/mailer.rb in order to encode email correctly.<ref> <link> </ref> <code> 5. The following method calls in the following files have been changed. a) app/controllers/grades_controller.rb b) app/models/courses_users.rb c) app/models/participant.rb Original: <code> Changed: <code>. The asynchronous events are registered to <link> object and a <link> server must be activated to carry out the task. The DelayedMailer class acts as a wrapper class (i.e., adapter pattern <ref> <link> </ref>) to the Mailer class in the /app/mailers/mailer.rb via the delayed_message() method call. These events are added to the <link> by Delayed::Job.enqueue() command. Each event as record is stored in the delayed_job table, which can be browsed on <link> . Most of them are database migration files. To eliminate future table creation issues with <link> gem, we have also changed the integer byte length of <link> tables from 10 to 8 and have revised the <link> methods inside the migration files to improve efficiency. <code> Changes to data migration files are illustrated as follows: Original: <code> Changed: <code> Detailed code changed can be found at <link> . The <link> implementation was done via <link> gem <ref> <link> </ref> but it has not been parsed correctly. 2. The following lines have been added to Gemfile <code> 3. The following parsing errors in app/controllers/assignment_controller.rb have been corrected. Original: <code> Changed: <code> 4. The following code in ap/views/assignments/edit/_rubrics.html.erb has been changed. Original: <code> Changed: <code>. <link> is a <link> framework for <link> programming language. Inspired by <link> , it resembles a <link> specification. To test the emailer features, we have restored <link> test cases for both delayed_mailer.rb (asynchronous maier) and mailer.rb (synchronous mailer). Currently, the fixture<ref> <link> </ref> files are not completed and loading them into the test database may cause failure for the test, so we recommend to comment out the following line in the /spec/rails_helper.rb <code> Future developers must take extreme care to make sure all fixture files work before enable this option. <code>. 5. Enter your <link> server account settings in config/environments/production.rb file. 6. Start the rails server by entering <code> 5. Start the delayed_job server by executing <code>.", ["The writeup is quite readable.", "The writeup is a good description of the changes, but The writeup could have been improved by showing the code changes.", "the code changes are not described in prose, but in code snippets.", "the code changes are shown in a black box, but not in prose.", "I would have liked to see more detail on the code.", "Also, the code snippets are not shown in prose; the code snippets are shown as code snippets, but the code is not."], [1.0, 0.0, 1.0, 1.0, 1.0, 0.0]], "139": ["Student should be able to navigate to that page through the link provided in timeline. <image> 1. Viewing the timeline 1. Use case id:1 2. Use case description: View timeline in 'Your work' page of selected assignment 3. Actor: Student 4. Precondition: Student should be logged into Expertiza 5. Post condition: Student can view the due dates and timestamps of the activities, if any. 2. Viewing the due dates 1. Use case id:2 2. Use case description: View due dates only when no submissions have been made 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment 5. Post condition: Student will view only dues dates in timeline when no submissions are made. 3. Viewing hyperlink submissions in timeline 1. Use case id:3 2. Use case description: View hyperlink with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have made a hyperlink submission 5. Post condition: Student will view hyperlink of the submitted link with timestamp in timeline 4. Viewing files uploaded in timeline 1. Use case id:4 2. Use case description: View file name with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted a file 5. Post condition: Student will view file name with timestamp in timeline and would be able to download the file upon clicking on filename. 5. Viewing links to submitted reviews with round number 1. Use case id:5 2. Use case description: View review links with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted a review 5. Post condition: Student will view review link with timestamp and round number in timeline and would be redirected to the review submission upon clicking on the link. 6. Viewing links to author feedback 1. Use case id:6 2. Use case description: View author feedback links with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted an author feedback 5. Post condition: Student will view author feedback link with timestamp in timeline and would be redirected to the author feedback submission upon clicking on the link. Currently when a student logs into Expertiza, he could see the student task list page. In this project, a timeline in the student task list page would be added to navigate student to the due dates and the necessary links easily and keep a track of them. After the addition of the functionality, the student task list page would have the timeline as shown below. Timeline feature is used to display timeline with due dates, submitted links, submitted files, self review, reviews performed(multiple rounds) and Author Feedback. 1. When the student doesn't submit the assignment on time , due date passed would be shown in the timeline. 2. If the hyperlink submitted by student doesnt get submitted properly, it would not show any link to hyperlink on timeline. <image> <image> <image> Testcase 1: A hyperlink is submitted and expect to find 'submit Hyperlink' in the student task page. Testcase 2: A file is submitted and expect to find 'submit File' in the student task page. Expect to find 'round 1 review' in the student task page. Check timeline for 'submit Hyperlink', 'submit File' and 'round 1 review'. <image>. 1. Step1 : Login to Expertiza as Student 2. Step2 : Click the Assignments Tab 3. Step3 : Select an Assignment of choice 4. Step4 : Select 'Your Work' Link and the Timeline would be displayed with only due dates <image> 1. Step5 : Submit a hyperlink in 'Your Work' 2. Step6 : The hyperlink submitted would be refelcted in the Timeline along with the Timestamp. <image> 1. Step7 : Click on the hyperlink displayed which would redirect to the submitted link page. 2. Step8 : Upload a File in 'Your Work' 3. Step9 : The uploaded filename would be reflected in the Timeline along with the Timestamp. <image> 1. Step10 : Submit a review 2. Step11 : The submitted review link would be reflected in the Timeline along with the Timestamp and Round number page. <image> <image> 1. Step12 : Click on the review link displayed to be redirected to the submitted review link page. 3. Step14 : The submitted feedback link would be reflected in the Timeline along with the Timestamp. <image> 1. Step15 : Click on the round review link displayed to be redirected to the submitted feedback link page.", ["The writeup is not very detailed, but The writeup does have a good description of the changes made.", "The writeup would have been helpful to have a screenshot of the code, so that the reader could see what was done.", "The test plan is not described in any detail, and The test plan would be helpful to see the code snippets in the Github diff view.", "Also, The test plan should have been described in more detail.", "that The test plan has been described in more detail is not the case.", "I would have liked to see more detail on the tests."], [0.0, 0.0, 1.0, 1.0, 1.0, 1.0]], "140": ["Once someone has peer reviewed a project, the authors of the project can also provide feedback for this review, called ‚Äúauthor feedback.‚Äù While grading peer reviews, it would be nice for the instructors to include the author feedback, since it shows how helpful the peer review actually was to the author of the project. Expertiza allows instructors to view kinds of reports of assignments in their courses such as submissions, scores, and review reports. To improve the report views, some table columns such as team name, score, the average should be made sortable by using the same existing sort library. Workflow <image>. We have to sort ‚ÄúReview done‚Äù, ‚ÄúTeam reviewed‚Äù, ‚ÄúScore awarded/Avg score‚Äù. in the ‚Äúview review report‚Äù table. <image>. We will be using tablesorter function of jQuery to sort the table.To sort the columns that have constraints, custom scripts will be created. Tablesorter supports custom sorting. By default the sorting is disabled on the columns, we must enable sorting on those columns in order to make it sortable. Three types of scenarios may arise: 1. Sorting by columns alphabetically - To sort the columns alphabetically, the table-head attribute must include sorter-true class with it. 2. Sorting by date - Sorting by date includes creating a generic format for all dates(mmddyyyy). This generic format will be used to parse dates and sorting will be done based on this format. For ‚ÄúAuthor feedback report‚Äù table, we have to change the header name ‚ÄúReview response rejoined‚Äù to ‚ÄúReview responded to‚Äù and ‚ÄúLast rejoined at‚Äù to ‚ÄúLast responded at‚Äù. Then, sort ‚ÄúRejoinder‚Äù and ‚ÄúReview ‚ÄúReview responded to‚Äù as string (alphabetically), sort ‚Äú# author feedbacks done‚Äù by the first number then the second number (same as ‚ÄúReview done‚Äù in the ‚ÄúView review report‚Äù table) and sort ‚ÄúLast responded at‚Äù as date. We will use tablesorter function of jQuery to sort the table. To sort the columns that have constraints, custom parser will be created and used on top of tablesorter. <image>. Add a header, ‚ÄúReports for [name of assignment]‚Äù at the top. We will add header on top of Dropdown menu. <image>. For Author feedback reports, when no feedback has been submitted by any student, the names of the participants appear in a strange horizontal format. Fix this so that the formatting is correct, regardless of how many participants have done author feedback. <image>. <image>. We added jquery tablesorter in the script section to sort the columns. We had to enable the sorting on various columns so we added \"sorter-true\" in class of all the table headers. <image> <image> <image> <image>. We used jQuery tablesoter to sort the data in app/views/reports/_feedback_report.html.erb. We created custom parser to sort the dates in the last column and placed it tablesorter script. Due to blank columns the tablesorter threw an error. When the sorting is done based on rejoinder column, student data in rejoinder column will be hidden. While sorting on other columns, data in rejoinder column will be made visible. <image> <image> <image> <image> <image> <image> <image>. We added a header on top of Dropdown menu. <image> <image>. For Sorting Review Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select Review Report from Drop-down menu. 5. Sort the columns by Clicking on it. For Sorting Author Feedback Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select Author Feedback report from Drop-down menu. 5. Sort the columns by Clicking on it. For Sorting Teammate Review Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select teammate review report from Drop-down menu. 5. Sort the columns by Clicking on it. For Missing Header on View Reports 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. For Rendering Proper Format in Author Feedback Report 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. From drop-down menu select Author Feedback Report.", ["The writeup is very good, but The writeup could have been improved by adding more detail on the code.", "The writeup would have been helpful to have a description of the changes made to the code, and to explain how they were made.", "Also, the screenshots are not very clear, and the screenshots would have helped to have more detail about the changes."], [1.0, 1.0, 1.0]], "141": ["It uses <link> Framework. 1. Refactor automatic_review_mapping method 1.1. Write failing tests first 1.2. Split into several simpler methods and assign reasonable names 1.3. Extract duplicated code into separate methods 2. Refactor response_report method 1.1. Write failing tests first 1.2. Use factory pattern to create a corresponding report according to the switch condition 1.3. Create corresponding helper classes for different report types. Review mapping controller handles the review responses that are done on every assignment. It assigns reviews to different teams or individual student depending on the type of assignment(team project or individual project). As this method was long and complex it needed to be broken down into smaller methods with specific functionality. Original: <code> After Refactoring: <code>. This method automatic_review_mapping was very long and complex. A few methods in the controller were acting as private methods for this method and were being called only in this method. So this automatic_review_mapping method was split into smaller methods. All these small methods and the private methods were shifted to a helper class: AutomaticReviewMappingHelper. Methods 1. initialize(created) 2. automatic_review_mapping_strategy(updated) 3. execute_peer_review_strategy(updated) 4. peer_review_strategy(updated) 5. assign_reviewers_for_team(updated) The common parameters that are used in the automatic review mapping method are defined here so that they can be used as instance variables throughout for better flow of the code. <code> <code> <code> <code> <code>. This method consisted of long case statements making it a long and complex to understand. So this method was refactored using Factory Design Pattern. Original <code> After Refactoring <code>. As seen, the controller method originally was sharing a lot of instance variables with the corresponding views, and it has the long switch statements. Each switch condition is corresponding to a different type of report. Thus, different report helper classes are created for different types of report. These helper classes are grouped in the helper module: ResponseReportHelper. <code> <code> <code> <code> <code> <code> <code> <code> <code> The <link> is used to create a corresponding type of report, according to the switch condition. <code>. 1. Tests for these methods already existed. We altered them according to the refactoring that needed to be done. 2. Additional tests were added for the corner cases that weren't being tested. 4. After Refactoring the tests pass for all the test cases. 5. Test cases for automatic_review_mapping for which tests are run: 1.1. all the parameters are 0 1.2. all parameters except student_review_num are 0 1.3. calibrated parameters are 0 review_num are non-zero 1.4. Team is empty, max team size is 1 and when review_num parameters are not zero 1.5. Create Teams when team is empty 1.6. when artifacts num are non zero it should set the instance variables and call methods. 1. Test cases for response_report for which tests are run: 1.1. when type is SummaryByRevieweeAndCriteria 1.2. when type is SummaryByCriteria 1.3. when type is ReviewResponseMap 1.4. when type is FeedbackResponseMap 1.5. when assignment does not have varying_rubrics_by_round feature 1.6. when type is TeammateReviewResponseMap 1.7. when type is Calibration and participant variable is nil 1.8. when type is PlagiarismCheckerReport Tests for automatic_review_mapping: <code> Test for response report: <code> Additional Tests in the Controller: <code> Additional Tests in helper_spec: <code>. Tests passed for Revised Code: 1. Test for helper <image> 1. Test for Controller <image>. git clone <link> 1. go to expertiza folder cd expertiza 1. run bash setup.sh bash setup.sh 1. run bundle install bundle install 1. run rails server rails server 1. Use firefox in the image and test response_report method 1.1. Type in <link> 1.2. If you need to log in, use account name ‚Äúinstructor6‚Äù, and password ‚Äúpassword‚Äù. 1.3. In order to view different reports, select different types of report and click ‚ÄúSubmit‚Äù button. <image> 1. Use firefox browser in the image and test automatic_review_mapping method 1.1. Type in <link> 1.2. If you need to log in, use account name ‚Äúinstructor6‚Äù, and password ‚Äúpassword‚Äù. <image> <image> <image>. 1. <link> 2. <link> 3. <link>.", ["The writeup is very good, but The writeup could have been improved by showing the code changes.", "The writeup would have been helpful to show the code snippets, and to explain the changes that were made.", "the code snippets are not very detailed, and the code is not described in any detail.", "the code snippets are just shown in black and white, and the code would have helped to have a little more prose describing the changes."], [0.0, 1.0, 1.0, 1.0]], "142": ["Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.4. <link> 1.5. <link> 1.6. <link> 1.7. <link> 1.8. <link> 1.9. <link> 1.10. <link> <link> <link>. Questionnaire Controller interacts with the user to create and edit questionnaires such as review rubrics, teammate-feedback rubrics, quizzes, and surveys. This page provides a detailed description of Open Source Project on Expertiza for refactoring the questionnaire controller. Why is Refactoring Required 1. It helps in making the code more understandable 2. It makes the code more maintainable 3. To remove repetition of code. The scope of the project is to refactor Questionnaire Controller which is very huge, in order to follow the standard principle of Fat Models and slim controllers. 1. questionnaire_controller.rb 2. questionnaire_helper.rb 3. advice_controller.rb. 1. Functionality moved to quiz_questionnaire.rb. 2. edit_advice method was not being used, so it was removed. 3. save_advice moved to the advice_controller. 4. copy, update_quiz, valid_quiz methods were long and have been broken up. clone_questionnaire_details was also broken up and renamed. 5. Added comments to select_questionnaire_type 6. Debug output (print statements) have been removed. 7. Changed code to follow the global rules. 8. save_new_questions, delete_questions, save_questions have been moved to a separate class. <link> <link> <link>. A Subset of the UML class diagram including only the related classes for this project can be drawn as shown below. <image> Questionnaire Controller is the superclass of QuizQuestionnaire and all the other classes - User class, Advice class and Questionnaire classes are related model Classes to the controllers that we have modified. Several methods in Questionnaire Controller class required refactoring to ensure that the change is reflected in the entire project. The names were changed to follow method naming conventions in Ruby. Deprecated code was removed and re-coded to ensure that the code worked in future version of Rails as well. Methods that are more general in the sub classes were moved to the parent class. Some methods that calculate that were colliding with other files were moved to a helper method questionnaire_helper.rb . 1. The quiz questionnaire related methods such as view_quiz, update_quiz, new_quiz and validate_quiz are moved to questionnaire_helper.rb to make the questionnaires_controller thin and follow global rule of thin controllers and fat models . <image> 2. Non Restful method names changed accordingly to make them Restful. Before <code> After <image> 3. edit_advice method is evidently not used, and removed. This edit function is already implemented in advice_controller.rb. 4. save_advice has been moved to the advice_controller. 5. Global rule changes for using Hash - value key pair implemented [Use key: ‚Äòvalue‚Äô, not :key => ‚Äòvalue‚Äô] accordingly. <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> 6. \".eql? <code> 7. Removed duplicate and redundant code making the code DRY. <code> 8. Removed unnecessary debug prints present in the code. <code> 9. Used `&&` and `||` rather than `and` and `or` to keep boolean precedence as per global rules. <code> 10. More global rule changes. <code>. The following object oriented design principles were followed during refactoring: 1. Single Responsibility Principle : The single responsibility principle states that every context (class, function, variable, etc.) should have a single responsibility. It was maintained that each method should be involved with a single responsibility and the code that was not related to that particular functionality was moved to other method. This was also taken care of in terms of classes. The repetitive and redundant code was removed from the associated classes and methods. We tested the functionality of the questionnaires controller before and after refactoring by manually creating and listing the questionnaires, there is no change in behavior observed. After Refactoring, the questionnaire controller is working as before. <image> <image> <image>. 1. Refactoring was performed as per requirements in the files questionnaire_controller.rb, and advice_controller.rb. 2. The code from models cannot be moved directly to controllers, so the code was moved to the helper class questionnaire_helper.rb. 3. Some methods with confusing method names have also been renamed. <link> <link> <link> <link> <link>.", ["The writeup is very readable, and the code snippets are well organized.", "The writeup is not clear why the code is being changed, but the code is clearly described.", "the code is not described in prose, but in prose.", "There is a lot of code that is not explained, and it would be helpful to have a link to the code.", "Also, the code changes are not described well.", "the code changes are described in a very short way, and are not explained in any detail.", "I would have liked to see more detail on the code changes."], [1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0]], "144": ["Expertiza has a functionality that allows students and instructors to receive and give grades, respectively. This functionality is implemented in the grades_controller.rb file. This controller currently violates some essential Rails design principles including having too much calculation and having methods' names that violate Ruby naming convention. Here are the refactoring steps needed to be taken in order to fix the grades_controller.rb . 1. Create a new private method to encapsulate the population of the view model for all the necessary data (lines 102-107). 2. Simplify the logic surrounding the error flashing. The nested logic seems unnecessary (lines 190-192). 3. In line 300: 1.1. Increase readability by fixing whitespace according to the common Ruby Programming guidelines. 1.2. Return is not needed here. 1.3. Remove space between ‚Äò!‚Äô and its argument. 1.4. Use meaningful variable names and break up the expression. 4. Move these functions into grades_helper.rb and change their names to be more Ruby-like: 1.1. calculate_all_penalties 1.2. calculate_penalty_attributes 1.3. mean (also cease the usage of the assignment) 1.4. calculate_average_vector 1.5. build_score_vector 1.6. Remove_negative_scores_and_build_charts 5. The previous programmer used update_attribute, which is concerning, as validations are ignored (Line 153 and 219). 1. Comment changed that was wrong (\"head\" into \"heat\") <image> 1. Line 102-107 (New Private Method made to encapsulate this) <image> <code> <image> <code> <image> 1. Line 190-192 <image> <code> <image> 1. Line 300 <image> <code> <image> 1. Lines 153/219 <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image>. To test this controller, run the following command to verify the changes do not break any core functions. <code> <image> <image> When you run the program and get to login page. Use credentials below for instructor. <code> <image> A good student to impersonate for testing is <code> <image> <code> <image> <code> <image> <code> <image> <code> <image> 1. To Do: Add Rspec tests to grades_helper.rb Important views for using refactored functions <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code>.", ["The writeup is very readable.", "The writeup is not clear what the changes are, but The writeup is clear that the changes have been made.", "The code snippets are not clearly described.", "The code snippets are not described in any detail.", "I would have liked to see more detail on the changes.", "For example of that I would have liked to see more detail on the changes : The code snippets should be described in more detail."], [1.0, 0.0, 1.0, 1.0, 1.0, 1.0]], "145": ["Expertiza is an Open Source Software project developed by NCSU. It allows the instructor to create assignments as well as modify existing assignments. Students can signup for topics in an assignment and can submit articles, codes, web-sites etc. It is a web application built on Ruby on Rails framework. It also allows students to review the submissions that have been made other students. In the current implementation only the students can sign up for topics. Because of this, no higher authority (e.g instructor) can control the signups in a straightforward manner. If the instructor wishes to assign a particular topic to a team or remove a team from a particular topic then the instructor has to impersonate that student and sign up for the topic. Due, to the current implementation, you can neither handle the mistakes in signups , nor make modifications to the existing signups without impersonation. The new implementation allows an instructor to assign a particular topic to a team as well as remove a team from a topic.This functionality has been added in views/sign_up_sheet/_all_actions.html.erb which now has a '+' sign to assign a topic to a particular user. If the instructor clicks on this, then a view will appear which takes in the username of a student to be added. When the box is filled out and the ‚Äúadd‚Äù button clicked, then the indicated user‚Äôs team is signed up for the topic. If there are no slots available for that topic then the team will be put on the waiting list. There is also a 'X' sign that will help the instructor to remove a team from a topic. Some of the scenarios where the instructor might wish to add a team would be if the sign up deadline has passed, or if the instructor has decided to update the maximum number of teams allowed to choose a particular topic. The instructor might want to drop a team from the topic if the team doesn't want to proceed with the same topic for the assignment. With the new implementation, Instructors/Teaching Assistants do not need to go through the trouble of impersonating a student in order to add or drop their team from topics. We have chosen the nested if-else approach because there were many scenarios , all of which required us to take different actions. Changes were made in the following files - 1. controllers/sign_up_sheet_controller.rb 2. views/sign_up_sheet/_all_actions.html.erb 3. views/sign_up_sheet/assign_topic.html.erb 4. views/sign_up_sheet/remove_topic.html.erb Functions added to implement functionality :- 1. update_team 2. assign_topic 3. remove_team 4. remove_topic In the sign_up_sheet controller, two major methods were added: <image> <image> Two additional icons have been added in the Actions column. The ‚Äògreen plus‚Äô icon allows you to add a team to the current topic. Clicking on the icon redirects you to a form, where the admin is required to enter the username of the person whose team he wishes to add. <image> Clicking submit then redirects back to the original page, with a flash message containing the status of the operation. <image> In case the topic has already been assigned the maximum number of teams, the new team is added to the waitlist. <image> The 'red cross' icon is used to remove a team from the given topic. Clicking on it takes the admin to a form, where he is required to enter the username of one of the team members belonging to the team that is to be removed. Submitting the form redirects the user back to the original page, with a flash message indicating the status of the remove operation. <image>. The system can take in individual users who don't have a team or topic and can add him/her to the existing teams that are enrolled for the topic. 1. <link> 2. <link> 3. <link>.", ["The writeup is quite readable.", "The writeup is a good description of the changes made, and The writeup explains the rationale for them.", "However, The writeup does not explain the changes that were made to the code.", "the code is not described in any detail, and the code snippets are not shown in any format.", "that the code is not described in any detail, and the code snippets are not shown in any format is a shame, as it would have been helpful to explain the code changes."], [1.0, 1.0, 1.0, 1.0, 1.0]], "146": ["3. In the DB the default number of meta-reviews allowed and required should be null. 6. When a user requests a new meta-review, the field which says the number of meta-reviews left ( refer to above image ‚ÄúNumbers of Meta-reviews left:‚Äù) does not change and the button to request a new meta-review disappears. The code below shows the conditional used to display the \"Request new meta-review\" button. Currently, the number of required and allowed meta-reviews is always being set to 3 in the database. When the checkbox for setting meta-review limits is unchecked, the values of number of meta-reviews allowed and required should be null. The \"Request new a meta-review\" button should be hidden when: 1. The number of meta-reviews in-progress is greater than the maximum allowed outstanding reviews. 2. The number of reviews allowed is limited AND the total number of meta-reviews completed or in-progress is greater than the number allowed. The code below shows the conditional used to display the \"Request new meta-review\" button. The user should NOT be able to see the 'Request a new meta-review to perform' button when there are no reviews available. 1.1.1. A student should NOT be able to request a meta-review on their own review. 1.1.2. When the meta-review limit on the assignment is set to 1 then a student should NOT be able to request a second meta-review. 1.1.3. The user should not be able to see the 'Request a new meta-review to perform' button when they have performed all valid reviews. 1.1.1. The user should be able to click the 'Begin' button and still see the 'Request a new meta-review to perform' button. 1.1.2. The user should NOT be able to see the 'Request a new meta-review to perform' button when they have reached the meta-review limit. 1.1.3. If the user requests two meta-reviews but has not submitted, then they should not be able to request a new meta-review. 1.1.4. The user should be able to request a meta-review if they are above their required but below the allowed number of meta-reviews. Number of meta-reviews left should decrement when a user requests a meta-review. 1.1.1. The user should see the number of meta-reviews left decrement after a new meta-review is requested. 1.1.2. The user should see the number of meta-reviews left decrement after a new meta-review is completed. All meta-review tests make meta-reviews allowed only during the meta-review round. 1.1.1. The user is able to SUBMIT a simple meta-review. and set the number of allowed and required meta-reviews. 1. User should NOT be able to see 'Request a new meta-review to perform' button when there are no reviews available. 1. User is able to SAVE a simple meta-review. 2. User is able to go BACK during a simple meta-review since this functionality is available for reviews. 3. When the limit and required number of meta-reviews on the assignment are equal, then a student will see they need to submit exactly that number of meta-reviews. 4. When there are more meta-reviews allowed than required, then a student will see they need to submit between the two numbers of meta-reviews 5. When the meta-review limits for an assignment are unset then a student will see that the number of meta-reviews aren't limited 6. A student should not see a number of required or allowed meta-reviews when there are no limits on meta-reviews 7. A student should see the number of meta-reviews decrement after a review is requested 8. A student should see the number of meta-reviews decrement after they complete a review 9. A student should not be able to request a meta-review on their own reviews 10. If the meta-review limit on the assignment is set to 1 then a student should not be able to request a second meta review 11. User should not be able to see 'Request a new meta-review to perform' button when they have reviewed all valid reviews already. 1. User should be able to request more than one meta-review before completing any 2. User should not be able to see 'Request a new meta-review to perform' button when they have reached the meta-review limit 3. User should not be able to request more than two meta-reviews without completing at least 1 4. A student should be able to request a meta-review if they are above their required but below their allowed meta-reviews <image>.", ["The code is not described in any detail, but The code is described in a very readable way.", "The code would be helpful to have a description of the changes made to The code.", "The code is quite readable, but The code is too long, and The code would be better to show the code snippets in the code rather than just the code, rather than the code itself.", "Also, The code does not explain how The code works.", "This is a very good description of what is done."], [0.0, 0.0, 0.0, 0.0, 1.0]], "147": ["A response is the object that is created when someone fills out a review rubric, such as when one writes a review, gives feedback to a reviewer, or fills out a survey. It is not the worst controller in the system, but it would be much clearer if its method names were more descriptive of what they do. This project tries to modify and refactor the response_controller.rb in a more clear way. response_controller.rb response.rb. 1. def assign_instance_vars 2. def scores 3. def new 4. def set_questionnaire 5. def set_questionnaire_for_new_response 6. def show_calibration_results_for_students. Since most of the method involved in our project is private methods and all of the public methods in response controller were already tested. Thus, we will focus on testing methods we created in the model class: response.rb spec/models/response_spec.rb will be edit in order to test our methods. We did the following refactor to make this method more clear: 1. the instance variables are actually action handles to the views from controller including \"new\" and \"edit\", thus refactoring method name to assign_action_parameters would be better to understand what this method is trying to do. 2. This method is a private helper method and is used in new and edit methods to set the action parameters for the new and edit actions <image> 1. After renaming, the method became more clear of what it's doing <image>. 1. This method was already defined in other classes and is useless in the current class, thus remove it would be a reasonable choice. <image>. 1. In the method set_content in response_controller.rb, there is one line of code that \"new_response ? set_questionnaire_for_new_response : set_questionnaire\". Thus, we can tell the method set_qustionnaire will called when new_response is false, which means that the object was triggered by an existing response. In the method set_questionnaire, the line of code that ‚Äú@questionnaire = @response.questionnaire_by_answer(answer)‚Äù, which is looking up the questionnaire answered by this existing response. Therefore, refactoring the method name to find_quesetionnaire would be better to understand. <image>. 1. In the method set_content in response_controller.rb, there is one line of code that \"new_response ? set_questionnaire_for_new_response : set_questionnaire\". Thus, we can tell the method set_qustionnaire will called when new_response is true, which means that the object was triggered by a new response. In the set_questionnaire_for_new_response method, the \"cast\" statement informs us that the new questionnaire are created based on the types or Reviewers, such as Review, Metareview, Teammate Review and so on. Therefore, refactoring the set_questionnaire_for_new_response method to create_new_questionnaire would be better to understand. <image>. 1. This method shows the result of expert review for reviewer after teacher or TA submit the calibration by editing the assignment. 2. The method makes about five database accesses and the code is quite messy and thus break it into 2 methods with the business logic moved to response.rb would be a good way to make the code in controller cleaner. <image> 1. The method get_questions_from_assignment is the part that's inside the model class and contains logic of mapping reviews with assignments in the questionnaire and return questions in the joined table <image>. <image>. <image>. <image>. 1. This method contains a complicated condition that determines whether the submission has been updated since the last time it was reviewed. If it has not, then the reviewer can edit his/her previous review. If there has been an update, then the reviewer gets a new review form to ‚Äúupdate‚Äù the review. 2. So we break the new method into two methods: new and get_most_recent_response and put the logic into the response controller class. 3. The method get_most_recent_response in the model class tests whether there has been a review since the last file or link was submitted and in the controller this method was called to get the newest response. <image> 1. The new method after refactoring, now the code is quite clear and with only one appearance of variable \"@response\" <image>. <image>. <image>. Most of the method involved in our project is private methods and all of the public methods in response controller were already tested. Thus, we will focus on testing methods we created in the model class: response.rb spec/models/response_spec.rb will be edit in order to test our refactored methods <image>.", ["The writeup is quite good, but The writeup would have been better to have more detail on the changes.", "The writeup would have helped if the code snippets were more clearly described.", "the code snippets are not very long, and the code is not very readable.", "I would have liked to see more detail about the changes, and I think that the code changes would have made the code changes easier to read."], [1.0, 1.0, 0.0, 1.0]], "148": ["<image> This button takes the student to the create/edit Review Questionnaire page. The student then can create a new rubric. Added a new field called 'supplementary_rubric' to the 'teams' table so that the supplementary rubric could be stored. Supplementary rubric questions are visible along with instructor generated rubrics. <image> ‚ÄúView‚Äù function for a rubric displays answers submitted for the Supplementary rubric questions along with Review Questionnaire for Reviewer. <image> ‚ÄúYour Scores‚Äù function for the Reviewee displays answers submitted for the Supplementary rubric questions along with Review Questionnaire. <image> \"Alternate View\" for \"Your scores\" should also include Supplemenraty Rubric questionnaire. 3. Polymorphism 4. Inheritance Use Case Here SRQ is used for newly added field supplementaryReviewQuestions in the Teams table and it is initially set as null for all the table entries.Once a student adds a specific Questionnaire to his project this field stores the id of that Questionnaire which is stored in the Questionnaires table. <image> Use Case to Add Questionnaire Functionality: In the \"Your Work\" section, Student will be shown a button \"Manage Rubric\", when clicked, if the supplementaryReviewQuestions column in Teams table is null for that team, Questionnaire will be created and SRQ in Teams table will be updated to contain the Questionnaire ID. The student will be directed to the Edit Questionnaire page with exsiting logic. <image> Use Case for Show Questionnaire Functionality: When the student orders for new reviews, if the supplementaryReviewQuestions column in Teams table is not null for the assigned team, extract the questionnaire for supplementary reviews and append in a new section below normal Questionnaire. <image> Use Case for Show Review( and Scores) Functionality: When the Student or the Instructor checks the reviews and scores on rubric, if the supplementaryReviewQuestions column in Teams table is not null for the team, extract the questionnaire review for supplementary questions and append in a new section below normal Questionnaire Reviews. To provide the view for the scores of a team we will add one more partition containing the scores for the supplementary questionnaire and implement the already build logic to get and display the scores. 2. To check if clicking on \"Manage Supplementary Rubric button\" creates a questionnaire id in Supplementary rubric column of Teams Table. 3. To check if a reviewer creates a Rubric, the assigned student is able to see the Supplementary Review Questionnaire whenever he/she logs in and tries to review it. <code> <code> <code> <code> end. Here SRQ is used for newly added field supplementaryReviewQuestions in the Teams table and it is initially set as null for all the table entries.Once a student adds a specific Questionnaire to his project this field stores the id of that Questionnaire which is stored in the Questionnaires table. <image> Use Case to Add Questionnaire Functionality: In the \"Your Work\" section, Student will be shown a button \"Manage Rubric\", when clicked, if the supplementaryReviewQuestions column in Teams table is null for that team, Questionnaire will be created and SRQ in Teams table will be updated to contain the Questionnaire ID. The student will be directed to the Edit Questionnaire page with exsiting logic. <image> Use Case for Show Questionnaire Functionality: When the student orders for new reviews, if the supplementaryReviewQuestions column in Teams table is not null for the assigned team, extract the questionnaire for supplementary reviews and append in a new section below normal Questionnaire. <image> Use Case for Show Review( and Scores) Functionality: When the Student or the Instructor checks the reviews and scores on rubric, if the supplementaryReviewQuestions column in Teams table is not null for the team, extract the questionnaire review for supplementary questions and append in a new section below normal Questionnaire Reviews. To provide the view for the scores of a team we will add one more partition containing the scores for the supplementary questionnaire and implement the already build logic to get and display the scores. 1. Created a migration script to add a new column 'supplementary_rubric' to the Teams table 2. To add supplementary rubric: In submitted_content_controller.rb: created a new function 'manage_supplementary_rubric' <code> In the view, submitted_content/_mail.html.erb: Created a button 'Manage Supplementary rubric' to be shown in 'your work' tab <code> After this, the same functionality of adding a rubric and questions is used as before. 2. To check if clicking on \"Manage Supplementary Rubric button\" creates a questionnaire id in Supplementary rubric column of Teams Table. 3. To check if a reviewer creates a Rubric, the assigned student is able to see the Supplementary Review Questionnaire whenever he/she logs in and tries to review it. <code> <code> <code> <code> end.", ["The writeup is quite readable.", "The writeup is not clear what the changes are, but The writeup is clear that the changes have been made.", "The design doc is not very detailed, but the screenshots are very good.", "I would have liked to see more detail on the changes, e.g., how they were made.", "It would have been helpful to have a description of the changes.", "Also, the description of how the tests work would have helped."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "149": ["Review \"tags\" are a form of feedback on Expertiza where students \"tag\" (classify) text from peer reviews, using Yes or No answers to questions chosen specifically for each tag deployment. <image>. It can be difficult for students to find a tag they missed on the Team View page, and other teams are working with ML algorithms to \"pre-tag\" as many reviews as possible, leading to a granular field of completed/incomplete tags. At this time, the only tagging feedback students see are the tag prompts and a Javascript counter with a numeric representation of how many tags have not been completed. In order to find a missed tag, students have to scroll the page and manually search for tags that aren't done. In order to help students complete all the tags for an assignment, we propose a new, dynamically generated heatgrid on the \"Your Scores\" view that breaks down reviews and tags by round, question, and review, which uses visual cues to help students find incomplete tags. The heatgrid shows both a total count of \"complete\" out of \"available\" tags, and individual tags with color-scaled feedback for completeness. The new heatgrid must handle these requirements, and display visual feedback accordingly: 1. Single and multiple round reviews 2. Reviews with and without tag prompts 3. Dynamically update as tags are completed 4. Different tag deployments will use different numbers of tags per review 5. Use of existing review row-sort functionality 6. Not rely on the database for tag data, as AnswerTag database rows may not exist until tags are clicked. For example, if there are 370 tags in total on this page and 10 of them have already been tagged, then 10/370 will be displayed. This element will also be updated dynamically when users make tag changes on this page. A simple JS function to count all the tag elements on current page. It will be invoked when the page first being rendered and also when any tags are changed by users. A simple JS function to count the number of tagged tags on the current page. It will be invoked when the page first being rendered and when any tags are changed by users. This JS helper dynamically render the page when any tags are changed by users. <image>. For manual testing purposes, we logged in as instructor6 in order to: 1. View the tagging report as an instructor/TA (Instructor tagging is permitted, and tags are separate from Student Tags) on view_team 2. Impersonate a student to view the tagging report on view_team as a student 3. View the mini-report on Alternate View both as students and instructors 4. Ensure that changing of tags updates the Tagging Report 5. Ensure that the Tagging Report interacts well with the existing layout 6. Ensure that the Tagging Report is hidden/shown when \"Hide Tags\" is clicked 7. Ensure that the Tagging Report accordions as expected when clicked 8. Confirm that mouseover events display the expected tooltips, including color scheme for the \"10 out of 250\" cell as well as color scheme for the main report body, and the Expand/Collapse tooltip 9. Ensure that the Tagging Report is hidden when there are no Tags available for a view_team page 10. Ensure that the Tagging Report was compatible with different tag deployments containing different numbers of tags A good example of functionality for a project with reviews and one with reviews can both be found with student7856. Program 2 has plenty of reviews that can be tagged and untagged and checked that the heatmap functionality is working. Program 1 does not have any reviews to tag and was checked to ensure that nothing broke due to not having any reviews to tag. Many recent assignments (2017-present) which have reviews have tag deployments. <image> 3. Both instructors and students can enter tag data. To view the instructor view, tags, and tagging heatgrid, click \"Assign Grade\". <image> 5. Click \"Your Scores\" to view the main View Team page which includes most of the functionality, including the tag heatgrid. On the main View Team Page, click a question row and change one or more tag prompts, to ensure the heatgrid and fraction are updated. c. Click \"Hide tags/Show Tags\" to show and hide all tag-related data. e. Click the row-sorter for question or average, and change one or more tag prompts to ensure the heatgrid is still updating the correct tags <image> 7. To view the \"Alternate View\", navigate back and click \"Alternate View\". This view should show a small counter near the top of the page with tag completion data. 9. We suggest now impersonating student7856 and navigating to Program 2 , then Your Scores to view a series of reviews with all tags completed so you can see how the interface behaves. 10. Finally, we suggest viewing an assignment which has reviews, but does not have a tag deployment assigned, to ensure none of the heatgrid materials related to tagging are displayed.", ["The writeup is quite readable.", "The writeup is not clear what the changes are, but the changes is clear that the code is being updated.", "the code is not described in any detail, and the code would be helpful to have a link to the code.", "I would have liked to see more detail on the changes, and also on the code snippets.", "Also, the code changes are not described, and the code does not show the changes.", "This is a good example of what the team has done."], [1.0, 0.0, 1.0, 1.0, 0.0, 1.0]], "150": ["The quality of the reviews can be improved if students are shown some example reviews while they peer review. These example reviews can either be taken from the assignment of current semester or from the same/related project of previous semesters. The objective of the project is to add a feature to show some good sample reviews while the students peer review other teams work. To enable this, students while submitting their peer review give a consent on whether their reviews can be shown as an example to others. Instructors then select a subset of these reviews to be posted as an example reviews. These example reviews are shown in the peer review page (Other's work link) to the entire class. 3. The student can remove their consent anytime, and the sample review should no longer be visible to other students. In the order of flow, 1. Student's Consent: In each review assignment, there will be a checkbox that says \"I agree to share my review as a sample for others\" then students can decide to check this box or not just before they submit reviews. Sequence Diagram: <image> 2. Instructor's Selection: The instructor can select from among the \"public\" reviews and decides which to make visible to other students doing a particular assignment, i.e. all participants in that assignment. If this review has already been shown as an example, the button should be ‚Äúremove this review from examples‚Äù instead. Sequence Diagram: <image> 3. List of Sample Reviews: A participant can see these \"exemplary\" reviews by going to \"Others' work\" for the assignment in question, and clicking on one or more links that say, e.g., \"Sample review\". And it should be shown just below the title ‚ÄúReview for ...‚Äù. 1) Add 'visibility' column to responses 2) Add new Table 'sample_reviews' 2. Mapping of Reviews and Assignment: The example reviews can either be taken from an assignment of the current course or it could be from an assignment from a previous course. One idea is that when clicking to ‚Äúmake this review an example‚Äù, it will link to a page where you can select an assignment to which you have access (the same as the list of ‚ÄúAssignment‚Äù in the tree_display), then the example review will be shown to all participants of that specific assignment. 5. To allow instructor to select among the public reviews to shown as examples to all students a button 'Mark as an example' in the popup views. Changes corresponding to this is made in /app/views/popup/team_users_popup.html.haml 5. To enable students to see the example reviews, a link Sample reviews is added in the Other's work page. As a Student (Scenario 1): Student giving consent to make their review public 1. Log in. 4. Click on any assignment for which the review has to be submitted. 5. Assignment task page is displayed. 6. Click on \"Other's work\" to open the reviews summary page (at /student_review). 7. Chose to review any of the teams' assignments that are displayed. 8. Select a team for review and fill in the review. 9. Before submitting the review, select the checkbox that says \"I agree to share this review anonymously as an example to the entire class\". 10. After clicking on the submit button, the review submitted has been made public. As a Student (Scenario 2): Showing all the available sample reviews for respective assignment 1. Log in. 4. Click on any assignment for which the review has to be submitted. 5. Assignment task page is displayed. 6. Click on \"Other's work\" to open the reviews summary page (at /student_review). 7. Below the heading \"Reviews for ...\", click on the \"Sample reviews\" link. 8. This opens a page where the student can view all example reviews for that assignment. 5. Displays a list of reviews submitted by students. 7. Displays the summary of reviews submitted by that student, with a \"Make as an example\" button on the right of every review. 8. Click on \"Make as an example\" for the intended reviews, which opens a popup that displays a list of all assignments that are a part of the instructor's courses. 9. From this list select all assignments for which the review has to be shown as a sample. 10. Click on 'Publish Sample Reviews' after selection (this closes the popup). 11. Navigate to view reviews of that particular assignment and click on \"Sample Reviews\". 12. A new page is opened that lists out all the sample reviews of the assignment. The first set of tests are for testing scenario of i) a student making his review public/private and i) student viewing the sample reviews. The second set of tests are for testing i) instructor marking a review as an example and ii) selecting the assignments to which the reviews has to be shown.", ["The writeup is very readable.", "The writeup is not clear what the changes are, but The writeup is clear that the changes have been made.", "The code snippets are not described in any detail.", "The code snippets are just shown in a list of files, and The code snippets show the code.", "that The code snippets are just shown in a list of files, and The code snippets show the code is not very helpful.", "I would have liked to see more detail on the code changes.", "Also, the screenshots are not very large, and the screenshots would have been helpful to have a link to the code in the code to show the code changes."], [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "151": ["Keeping this in mind our code is set to work under the following conditions: 1. Assignment teams created for an assignment without topics 2. Mentors ( Instructors and TAs ) are only assigned to assignment teams if they have been added to an assignment as participants We've created the following <link> to demonstrate the added functionality. As well as the following <link> which demonstrates what happens when teams are created when no mentors have been added as participants to an assignment. 1. Assign a TA or instructor as a mentor for a team created for an assignment without topics. Do not put email code in the Team class). <link>. Our implementation begins when an assignment team is created. If the assignment is associated with a topic, the created team will not be assigned a mentor. This hash is created from the TAs and instructors added to the assignment as participants. The keys of the hash correspond to the mentor's participant id while their values are the number of times the mentor has been assigned to mentor teams. The mentor with the lowest number of assigned teams will be the next mentor assigned to a newly created team. Once the team is assigned a mentor, an email is sent out to the mentor and students in the team to notify them of their mentor assignment. First Design: <image> Ultimately we were able to implement the following design: Final Design: <image> We created the following assignment_teams_mentors table with the following connections to existing tables. The new table created is responsible for storing all the mentors assigned to the various teams created. This column will help determine what TAs and instructors can mentor for a specified assignment. Currently instructors see the corresponding view when looking at teams associated with an assignment: <image> Our team proposed adding an additional \"Mentors\" column in the instructor view: <image> Currently students see the corresponding view when looking at their team for an assignment: <image> Our team originally proposed to add an additional \"Mentors\" section in the student view: <image>. The assignment_team_mentors table is responsible for storing all the mentors assigned to the various assignment teams created. 1.2. Created a can_mentor column for the participants table in order to be able to know who was a mentor and who was a student. <image> Models 1. assignment_team_mentor.rb 1.1. Responsible for ensuring mentor with the least number of teams mentored, gets assigned to the next team created. 1.2. Started to add mailer functionality for notifying the mentor assigned. This ensures a team only has one team mentor. This provides the flexibility of a potential mentor added as a participant to an assignment, to mentor multiple teams created for an assignment. <image> Controllers 1. teams_controller.rb 1.1. The following code was added within the create method. 1.2. Calls on AssignmentTeamMentor to assign mentor for instructor created teams. Will generate notice if unable to assign mentor to recently created team. <image> 1. 1.1. The following code was added within the list method. 1.2. A hash is generated with the assigned mentor of each team. <image> 1. student_teams_controllers.rb 1.1. The following code was added within the create method. 1.2. Calls on AssignmentTeamMentor to assign mentor for student created teams. Will generate notice if unable to assign mentor to recently created team. <image> 1. 1.1. The following code was added within the view method. <image> 1. teams_user_controller.rb 1.1. added code to send the email when a user is added to a team to the mentor. <image> 1. views/tree_display/_row_header.html.erb 1.1. displays either mentor assigned or \"No mentor assigned\" for team level. <image> 1. views/student_teams/view.html.erb 1.1. responsible for displaying to a student the mentor assigned to their team for an assignment. <image>. This button is how we decide if we need to assign mentors to a team. As an instructor we were able to confirm the following UI changes after mentors were assigned to teams: <image> As a student we were able to confirm the following UI changes when a mentor has been assigned to their team: <image> The following <link> further expands on this UI testing. As an instructor we were able to confirm the following UI changes after teams were created when no mentors had been added participants: <image> As a student we were able to confirm the following UI changes when a team was created without mentor participants for the assignment: <image> The following <link> further expands on this UI testing. 1. Providing ability to manually select the mentor for a team created. <image> 1. Refactor email functionality code and continue to develop to allow for the assignment team members to be notified of new assigned mentor or any other added members. <image>. <link> <link> <link> <link> <link>.", ["The writeup is very readable.", "The writeup explains the changes well, and the code snippets are well organized.", "However, The writeup does not explain the changes that were made to the code.", "the code snippets should be shown in a larger font size.", "the code snippets should be displayed in a large font size, and in the same way that the code is shown in the code, rather than in the textbox.", "This would have been helpful.", "Also, the code should be more readable."], [1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0]], "152": ["Expertiza provide the function for user to request an account, but the function is not perfect. It will enable Expertiza to handle the pending request for super-admin and add institution for user. 1. Currently, a new user can only choose institution from the dropdown. The new user should be able to add a new institution. 2. A place where a new user to write a brief introduction is needed in this page. 1. After super-admin or admin approves the request, make sure the record does not disappear on the page. And there should be an email send to email address offered by requester. 1. Modify the test of request new user method. 2. Add a new option for the drop-down bar of institution in the new user request page. 3. Add a new textarea in the new user request page, to input a new institution and introduction. 4. Add validation for new institution new institutions and introductions. 6. Add a new button on the layout. 8. Enable the system will send an email after the request is processed. So we need to add a new column for request_user table. The new table will be shown below. <image>. <image> <image> 1. Name: Instructor or Teaching Assistant request a new account 2. Actor: Instructor or Teaching Assistant 3. Other Participants: None 4. Precondition: None 5. Primary Sequence: 1. Click on ‚ÄúRequest account‚Äù. 3. Fill in a user name. 6. Select an institution. 8. Click on ‚ÄúRequest‚Äù. 2. Fill in the institution name. 1. Name: Admin or Super admin view list of new account requests 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza. 3. View the list of new account requests. 1. Alternative Flow: None 1. Name: Admin or Super admin accept a new account request 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza. 3. Select a request. 1. Alternative Flow: None 1. Name: Admin or Super admin reject a new account request 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza 2. Click on the link ‚Äú/users/list_pending_requested‚Äù. 3. Select a request. 1. Alternative Flow: None 1. Name: Admin or Super admin send an email to applicant 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza 2. Click on the link ‚Äú/users/list_pending_requested‚Äù. 3. Select a request. 4. Click on the email address. 1. Alternative Flow: None. <code> <code> <code> <code> <code>. <code> <code> <code> <code>. Below are the mock-up screens that explain ‚Äúnew account acreation‚Äù functionality in Expertiza. 1. 1.New user should click ‚Äúrequest account‚Äù for requesting a new account, then redirect to the ‚Äúrequest new ‚Äù page. <image> 1. 2.After redirect to ‚Äúrequest new ‚Äù page, new users should enter their information, includes role, name, e-mail and institution. We can enter our new institution in this textbox. The email address is clickable. <image> 1. 5.If we click the email address, the email editor will pop out. <image>. In the first part, we test the request account feature. Finally, we test if the new user can signin with new account and password. 1.Now in the new user request page, the user can add a new institution by choose 'Other' and input their own institution. <image> 2.The new institution is able to saved into institutions table as a new record. <image> 5.The administrator can access the '/users/list_pending_requested' url via ‚ÄúAdministration > Show‚Ä¶>new requests‚Äù menu <image> The admin can access the '/users/list_pending_requested' url via ‚ÄúAdministration > Manage>new requests‚Äù menu <image> 6.‚ÄúEmail Address‚Äù column in /users/list_pending_requested page clickable. <image> <image> 7.After super-admin or admin approves the request, the record does not disappear on the page. <image> 8.There is be an email send to email address offered by requester.And for super_admin and user. <image> <image>.", ["The writeup is very readable, but The writeup does not explain the changes made to the code.", "It is not clear how the code is organized.", "The test plan is not described.", "There is no description of the tests.", "that There is no description of the tests is a very important part of the design.", "I would have liked to see a description of how the tests work.", "Also, The test plan should have described the tests, and how The test plan work."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "153": ["It also makes it easy for the instructor to add a new topic to an assignment/project, create a new project and add students to it. This helps in improving the existing work and also provides a new way to learn. In Expertiza, user and instructor accounts are currently created by existing super administrators, instructors or TAs. For new users to access the system and experiment the features offered by Expertiza, a ‚Äúdemo-like‚Äù feature needs to implemented. The following are the set of requirements that needs to be catered with this feature: 1. Allow people to request instructor accounts over the web. This feature should also have security features such as Captchas to help avoid account creation by bots. 2. When a user account is created over the web, the super-admin should get e-mail regarding the same and also the user should be notified upon approval/denial (if denied, then reason should be specified). 3. Currently, Expertiza consists of a lot of entities that can be made publicly visible to all other users in the system. 4. A user who creates an account over the web should be pointed to an instruction page and/or video on how to create an assignment and register students for it, etc. Once a user wants to register and try the features of Expertiza, upon opening the website, one can register by filling up the form and click the register button. Once the user requests for an account creation, the super admin receives a mail informing about the request with the name of the requested user. The super admin shall then, look for the details of the user in the Review Requested Users tab and can either approve/decline the request. Once the super admin approves the user request, the user gets a mail notifying that they now have the permission to access the features of Expertiza. A temporary password in clear text is also sent in the mail for login. If the request is rejected, then the reason should be mentioned in the reason column of the form. But there is no mail sent to the user regarding that. Needs permission from super admin‚Äù that can be seen on the login page if an unregistered user tries to access the features of Expertiza. Once the user requests for an account, upon clicking the request sign up , he/she is automatically redirected to the instructions page with the video tutorials explaining various features of Expertiza and on how to access them. In _login.html.erb a new button called Request Sign Up was added for the new users to register. The register page will look as above. On clicking Request , a user will be redirected to a page like below: <image> User will have to fill up all the required details and request a signup. When a super administrator logins to his account he can go to Manage/users/review requested users menu as shown below. We have put the review requested users in the menu, rather than a separate tab, making it more flexible to integrate some more features under the users option later. <image> Super Admin can either approve/reject a user. The view for this page would be as shown below. This is an entirely new page wherein, the super admin can also mention the reason for a rejection of a request and view the entire list of requested users. <image> In addition to the above files a new file in instructions, named home.html.erb is created which will have all the videos explaining how Expertiza works. This is to the new user to request for an account in Expertiza and also mail all the super admins about the new user request. Upon the request, this method uses the user parameters (fields entered in the request sign-up form) and a status of 'Under review' is assigned by default. On verifying the captcha, the super admin(s) gets a mail regarding the request with the user name and the requested user is redirected to the instructions page. This is for the super admin to either approve or reject the user request and send a mail to the requested user if his/her account is created. The mail also contains a password for the user to login. We have created a new table called requested_users with table description that is similar to users . The status column, which isn't present in the users tables indicates the approval/rejection of the request of the user. Though the description of this table is similar to the users table, we thought it was better to go with a new one, keeping in view of the following advantages: 1. The users table had lot more entries which weren't needed for the requested user scenario and also vice-versa. The entries like status and reason of the requested_users table weren't necessary once the user request has been approved. 2. The users table was accessed at many places in Expertiza, so any change in that would have to be reflected at all places. It was comparatively easier to manage with a new table rather than using the existing one. The description of the table is as follows: <image>.", ["The document is very readable, and the screenshots are very well organized.", "The only thing that I would have liked to see was a description of the changes made to the existing code.", "that The only thing that I would have liked to see was a description of the changes made to the existing code is not a problem in the current design, but This would have been nice to see a description for the changes that were made.", "Also, the screenshots should have been larger, so that the reader could see them in full.", "I would also have liked a description on how the code was changed, and a link to the code in the wiki page."], [1.0, 1.0, 1.0, 0.0, 1.0]], "154": ["Students submit their work and review other‚Äôs work and provide feedback. Wiki link: <link> Github link: <link>. 1. The current Expertiza UI for reviewing uses a simple html text area for each criterion, which starting to look dull for the users. 2. Moreover, the current form still uses plain old HTML form that sent the text entered in several text areas to the controller only after the user clicks the submit button. Moreover, we found that the review text contains misspelled words and incorrect use of English grammar that makes the review hard to understand. Updates in requirements as of 11 November, 2017 4.Replace the text area with a rich text editor that allows user to customize the fonts, bold, insert link to images / videos (possibly generate a thumbnails of the links). Approach: We have replaced text area in the review form with <link> rich text editor. There are many rich text editors available like <link> , <link> , etc. Usage 1. Gem used: <link> 2. Behaviour of TinyMCE can be modified by making changes in config/tinymce.yml 1.1. Plugins embedded: 1.1.1. Link : Allows a reviewer to link external resources such as website URLs 1.1.2. Media : Adds the ability for reviewers to be able to add HTML5 video and audio elements to the editable area. 1.1.3. Code Sample : Lets a reviewer insert and embed syntax color highlighted code snippets into the editable area. 3. Initializing TinyMCE: To initialize tinyMCE in the new text area add the \"tinymce\" class as mentioned in the below example and ensure it has a unique ID. <code> Then invoke the tinymce helper to initialize TinyMCE: <code>. Approach: We have replaced drop-down used for giving scores in the review form with <link> . Now reviewer has to select a number of stars for each review questions instead of selecting a value from drop down. 3. No logical changes have been done to embed this feature in the form. Usage 1. bower install <link> . 2. Initializing star rating: To initialize star rating in the new select box apply the javascript as mentioned in the below example and ensure it has a unique ID. <code>. Approach: The current design of the system clears all the data in the text fields once a session for the user has been ended. We are making an AJAX call to save user entered text from the current text box as soon as user switches to next text box. This AJAX call is made every 10 seconds to save the content, also the user gets to see the green tick showing the last time when his user entered text has been saved. UTF-8 :To solve UTF-8 encoding problem, we can make a form accept only UTF-8 characters by using an attribute of the form tag. But most of the characters, including a lot of characters from languages other than English, are present in UTF-8 character set so the application will work perfectly fine on just allowing UTF-8 characters in the text box. Below is the code snippet on the same. <code> Spellcheck : Since we have used rich text format, spellcheck is being handled by the same and we have just enabled the spellcheck option for the browser. Below screens are for criterian based review forms. We have used DRY principle, we have made changes in the existing code and even used the same javascript functions. Manual test cases plans: 1. Field Widths ‚Äì If the screen contains text boxes that allow data entry and the width of data entered does not exceed the width of the form. 2. Save and Submit Review ‚Äì If the screen has the save and submit review buttons. 3. Cosmetic Inconsistencies ‚Äì The screen look, feel and design should match the other screens in your application. 4. Spelling ‚Äì Ensure that you have test cases that look for spelling errors. 6. Screen Font Type - Ensure that the screen font family matches from screen to screen. 7. Backlink - Ensure that backlink is present on the screen. 8. Review draft is saved - Ensure that user draft version is saved automatically in every 30 seconds. 9. Star rating- ensure that rating stars are displayed on the screen in place of the select dropdown. Automation testing: We are keeping the same test cases since as per our implementation to improve the review UI, we have not changed anything on the id and the class elements of the javascript, we have just changed the CSS elements, so basically, we have not broken the existing test cases. 1. Embedding more plugins in TinyMCE like inserting images, special characters, tables, etc. 2. Embedding code snippets from GitHub to enable the reviewer to link authors code using 'permalink' feature of GitHub. 3. Using multi-step review form having one review question per step. This will improve the user experience while reviewing others work. Demo <link> .", ["The writeup is very readable.", "The writeup explains the changes well, and explains the rationale for them.", "The only thing I would have liked to see is that the code snippets are not separated from the code.", "the code snippets are just pasted in, without any explanation of what the code snippets are doing.", "that the code snippets are just pasted in, without any explanation of what the code snippets are doing is not a good way to show the changes made.", "Also, the test plan is not described. I would like to see a description of the tests, so that the reader can see what they test."], [1.0, 1.0, 0.0, 0.0, 0.0, 1.0]], "155": ["Expertiza has two kinds of review strategies, as specified in the Review Strategy tab of assignment creation: Auto-selected Reviews are not preassigned, but when a student comes to do a review, (s)he can select from the reviews that are available at that point. Instructor-selected Instructor decides in advance who reviews whom.Until now, when the strategy is auto-selected, there has been no maximum on the number of reviews a student could select. So students can review as many topics as they want. Set a maximum on the number of reviews a student can choose with auto-selected reviewing. This requirement needs changes to the instructor view and student‚Äôs review page. Instructor view changes While creating the assignment, instructor should be able to specify maximum on the number of reviews done by each student. We added checkbox for this selection under Review Strategy tab of instructor view. If the instructor selects this checkbox, he‚Äôll be prompted to enter the value for the maximum reviews allowed for each student. There are no changes to assignments controller. Instructor view looks as shown below. <image> Requirement 1 - Instructor View Changes Student Topic Review page changes Students review topics page is displayed by list method of Student_review_controller . <image> Requirement 1 - Student View Changes. If the student selects some topic and want to drop for some reason, he/she need to contact instructor to drop that review. Student Topic Review page changes Students review topics page is displayed by list method of Student_review_controller . <image> Requirement 2 - Allow students to drop reviews <image> Requirement 2 - Allow students to drop reviews only if Review has not been submitted. While creating the assignments instructor can allow students to see their teammate score by selecting Show teammate reviews? But this option shows both the scores and teammate reviews on the grades/view_my_score page. Instructor view changes General tab of assignment creation has \"show teammate reviews ?\" option. \"show teammate scores ?\" , \"show teammate reviews?\" . \"Show teammate reviews ?\" This is how instructor view will change after implementation. <image> Requirement 3 - Instructor View Changes Changes to students view score page Code to display teammate reviews and scores is present in the /views/grades/view_my_scores file. If the instructor only selects show teammate scores? student will be able to see aggregate teammate score as shown below. <image> Requirement 3 - Show aggregate teammate scores Students will be able to see only reviews if the instructor selects show teammate reviews ? during assignment creation. <image> Requirement 3 -Show only teammate reviews Students will be able to see both the score and teammate reviews if the instructors checks both boxes from assignment configuration page. There is no option that lets reviewers see others‚Äô reviews of the same work after they submit their review of that work. Instructor view changes While creating the assignment, instructor should be able to specify if students should be allowed to see reviews done by other students for the same work. <image> Requirement 4 - Instructor view to allow students to review others work Changes to student_response controller and views The View link displays the submitted/in progress reviews of the student and is handled by the list action of the StudentReviewController (student_review_controller.rb) and the associated list view is \"/views/student_review/list.html.erb\" file. We plan to add another link Other Reviews to the partial _reponses view. This link would be visible only if the show_other_reviews option has been enabled by the instructor and the review for the topic has been submitted by the student. This link would be next to each of the Review Topics submitted by the student of that assignment. <image> Requirement 4 - Student view - link to view other submitted reviews <image> Requirement 4 - Student view - Reviews submitted by other reviewers for the same work. The existing implementation of expertiza doesn‚Äôt provide a student the option to not see review scores or the text feedback. Sometimes a student might just want to see the scores and not the reviews and other times might want to see the reviews and not the scores. If the value is set to 0 then the student can view both scores and feedback, if the value is set to 1 then the student can view only the scores and if the value is set to 2, then the student can view only the feedback. Student View Task page changes In the student task view, the page where the student can submit work, view scores, review others, etc. we added a new option for the student to change review settings. Clicking on that link takes the student to the change_reviewsettings page where the student can choose to either view both scores and feedback or just scores or feedback. Review page changes In the partial to view the reviews _review.html.erb, conditions have been added to check the value of the reviewsetting variable. Based on the value of the variable, either both the scores and feedback or just the scores or just the feedback is displayed to the student.", ["The document is very readable.", "The document explains the changes well.", "The only thing I would have liked to see is a description of the changes to the code.", "Also, the code changes are not described in prose.", "the code changes are shown in a list, but not in prose, and the code is not described.", "that the code changes are shown in a list, but not in prose, and the code is not described is a shame.", "I would've liked to know what changes were made to the test plan.", "And the test plans are not explained. There is no description of how the tests work."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0]], "156": ["Expertiza uses the jquery‚Äôs date-time picker widget for setting dates and times on various views. Over the years, different developers used different version and formats of the date-time picker due to which there are inconsistencies across the expertiza project. The main problem with the date-time picker is that the widget and the date-time formats used across the expertiza project are not consistent. Moreover, the JQuery based date-time UI widget itself is on version 0.8 which is extremely old and no longer consistent with expertiza's looks and feel. The primary task of the refactor was to find, refactor and make the date-time picker consistent at all places while exploring the possibility of updating the date-time picker to a newer version or completely replacing it by another better widget which works in conjunction with modern javascript libraries. The first step in the approach was to explore the current functionality of existing date time picker. According to our solution, the existing library needed to be replaced by the new gem. Further, necessary syntactical changes were made respective to the new gem. 1. <link> Moment.js is a lightweight javascript date library for parsing, manipulating, and formatting dates. The existing date-time picker widget was replaced by the new date-time picker in the following views: 1. Edit and create assignments - app/views/assignments/edit/_due_dates.html.erb This contains fields to set the submission and review deadlines for different rounds. The existing JQuery call to the date time picker was replaced by the call to the new widget. The form includes a selection of start date and end date for signup. Following changes were made to the file: Before: <code> After: <code> 3. New survey creation - app/views/survey_deployment/new.html.erb The page contains the form to allow the creation of new surveys. The survey start and end dates can be set using the form. The old code used two separate inline onClick event to call the same DateTime picker. Before: <code> After: <code> 4. Version logs - app/views/sign_up_sheet/_due_dates.html.erb The version logs file which is only accessible to the admins uses the date tie picker to filter the search results using the start and the end date. Following changes were made to the file: Before: <code> After: <code>. The old jquery based date-time picker was replaced by a new modern bootstrap based date-time picker as shown in the pictures below. The new bootstrap date-time picker widget also has different styles which can be implemented by changing the code as per the documentation <link> . Old Date-Time Picker <image> New Date-Time Picker <image>. This refactor was mainly concerned with the date-time picker widget UI. Thus most of the testing was done manually as automated testing cannot be used to test the widget. After refactoring each of the pages using the date-time widget, rigorous testing was done to check if the date-time picker selected the right date in appropriate formats. Automated testing was performed to test the models and controllers which relied on the date-time picker for its correct functioning. The new date-time picker widget was manually tested for correctness using the following manual steps: 1. Create and edit assignments Login into instructor account -> Select Manage Assignments -> Click on the plus sign to the right -> Fill in the relevant details -> In the 'due dates' enter the submission and review deadline using the new date time picker widget -> Save -> Check if assignment with proper deadline is being created. 2. New survey creation Login into instructor account -> Select Manage assignments -> From the list of assignments select an assignment and select the 'assign survey' action-> Fill in the relevant details -> Enter the survey start and end date using the new date time picker widget -> Save -> Check if the survey is created with proper deadline. Also the datetimepicker feature with start date and end date detection should work for both admins and super-admins. <image> <image> <image>. <image>. ( <link> ) 2. GemFile.lock ( <link> ) 3. application.js ( <link> ) 4. application.scss ( <link> ) 5. assignments/edit/_due_dates.html.erb ( <link> ) 6. sign_up_sheet/_due_dates.html.erb ( <link> ) 7. survey_deployments ( <link> ) 8. _row_header.html.erb ( <link> ) 9. search.html.erb ( <link> ) 10. factories.rb ( <link> ) 11. versions_search_spec.rb ( <link> ) 12. list.html.erb ( <link> ). Github Repo: <link> Pull Request: <link>.", ["The writeup is very readable.", "The writeup explains the changes well, and explains the rationale for them.", "The only thing I would change is that the screenshots should be larger, so that the reader could zoom out and see them all.", "Also, the screenshots are not very large, and the code snippets are not clearly separated.", "the screenshots are just pasted in, with no explanation of what the screenshots are doing.", "I would have liked to see the code sequences in the document, so the reader can see what has been changed."], [1.0, 1.0, 0.0, 0.0, 1.0, 1.0]], "157": ["The Expertiza project is software to create reusable learning objects through peer review. Expertiza is an open source project and is based on ‚ÄúRuby on Rails‚Äù framework. Expertiza should be able to distribute surveys to the users. The survey can be one of the following: 1. Course survey (all the participants of the course can take it). 2. Global survey (all the users in Expertiza can take it). The survey can also be targeted (the admin can specify a group of people who will receive this survey). The three kinds of surveys in this project are: 1. 1. Assignment Survey questionnaire 2. 2. Global survey questionnaire 3. 3. Course evaluation questionnaire. 1. Survey questionnaire should be a subclass of questionnaire. 2. The creation, editing, filling in, and checking that all the questions have been answered survey should be similar to the procedure used for other types of questionnaires (e.g. peer-review questionnaires). 4. We should use the same controller method to take the survey as to fill in the peer-review, namely, response_controller. 5. We should use the same code to display the existing survey responses as to display the responses in peer reviews. 6. For each course or assignment, the admin/instructor should be able to create a survey and have some (or all) of the participants receive the survey. Assignment Survey questionnaire, Global Survey questionnaire and Course Evaluation Questionnaire are the existing models which are subclasses of questionnaire. Their display types are survey, global survey and course evaluation respectively. <image>. 1. There is a constraint that the survey has to be filled in using the same controller method as used for filling in peer review, namely response_controller. Also, the same code has to be used to display the existing survey responses as to display the responses in peer review. 2. The response_controller can be used to make sure that the survey can be taken only once by each user, depending upon the survey type and the users who are allowed to access (can be listed using 'action_allowed?'). The answers can be saved using the 'saving' method. Also, the responses can be viewed once, the survey is submitted. 1. Instructor or admin both can add survey for any course or assignment 1. The creator would be able to select the participants based on the scope of the survey, that is, all the students or all the Expertiza users or specific group of people. 2. These questions will be by default added to every survey the user creates. 4. Or, there can be option of separating the global survey and course survey. The quiz taker will take the global survey first and then the course survey. 3. In our part of project implementation, there is no need to incorporate any changes to the Assignment Questionnaire. 1. Adding columns to the 'Assignments' table: survey_id and global_survey_id. 2. Adding columns to the 'Course' table: survey_id and global_survey_id. 1. We update 'survey_id' and 'global_survey_id' in the 'assignments' table. 2. This requires checking if any entry for 'survey_id' is already present: Case TRUE: Warning to user 'Update to an existing survey'. 1. The survey is mapped to participants through 'participants' table. 2. In 'participants' table: <code> 1. Using the 'type' we can get the type of object i.e. assignment or course, and then using parent_id the particular instance of that object can be mapped to the survey and listed for the user/participant. 1. There is no explicit assigning of surveys to participants. Updating the new columns in 'assignments' and and 'courses' table is sufficient for assigning the surveys. submitted or not submitted, the user/participant can view or update, respectively, the surveys. 1. Checking the 'assignments' or 'courses' the participant has enrolled in. 2. Checking if the 'assignments' or 'courses'have active surveys (survey_id != NULL). 3. If participant has already responded to the survey, only 'View' option is available. 1. There is a global table for all the responses in Expertiza-'response_map'. All the responses in expertiza are saved in this table. 2. When participant responds to the survey, based on the survey type, the entry in the response_map is: <code> 1. The other entries are: <code> <image>. 2. Click on Manage -> Questionnaires-> Survey / Global Survey/ Course evaluation. 3. Create a new Survey/ Global Survey/ Course evaluation filling in the parameters asked for. <image> Login as student: 1. The course survey is for all the students, whereas the global survey is for a few random students using Expertiza. 2. Take the survey visible through your account.", ["The writeup is not very readable. The writeup does not explain the changes made to the code.", "the code is not described in any detail.", "There is no description of how the code is changed.", "that There is no description of how the code is changed is a very important part of the design.", "I would have liked to see the code snippets that were used to explain the design of the project.", "Also, the code changes are not described.", "the code changes are just shown in a list.", "What is needed is a description of the changes that were made to each of the files."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0]], "158": ["A staggered-deadline assignment is an assignment in which different topics have different deadlines. It can be pretty useful if different topics within an assignment can have different deadlines for submission as well as reviews. Problem 2: Manual submission and review deadline entry required for all topics Currently system requires instructor to enter submission and review deadlines for all topics. Currently this is happening, but only in case of assignments which do not have staggered deadlines. If the assignment is not a staggered deadline assignment and if its submission deadline has passed, then we prevent students from signing up for any topic in that assignment. <code> We will have to replicate a similar logic for staggered deadline assignments. The problem here is that for staggered deadline assignments, different topics might have different deadlines. <code> First we check if the topic has a specific different deadline set by the instructor, and if not, then its deadline will be the same as the common deadline for the assignment. We do this only for staggered deadline assignments as for the other assignments, this check has already taken place. Our requirement is to provide the instructor with the option to select a relative date for the submission review deadlines based on the Round1 submission deadline. The instructor would however like the ability to manually enter a custom date according to his needs. One way of dealing with the above problem would be to provide an option for the other date fields for a given assignment to chose a relative date based on the initial submission date in addition to the ability to override and manually enter a custom date. Example: 3 days after Submission deadline, 6 days after re-submission deadline. The first step will be to make this assignment a staggered deadline assignment. For doing this edit the assignment and under the General tab, make this a staggered deadline assignment. Part1: Instructor wants to assign default deadlines to a staggered assignment In this case, the default deadlines for the assignment will be filled automatically based on the submission date for Round 1. In this case no further input from the instructor is required apart from selecting the round 1 submission deadline 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. Part2: Instructor wants to enter custom deadlines for a staggered assignment In this case, the instructor has two options. He can either chose a deadline from a list of other relative deadlines from the dropdown menu for a particular round or all rounds, or he can decide to override the system enter a date manually by selecting the ‚ÄúCustom Date‚Äù option. 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. 6. Change all the deadlines for the other rounds according to your requirements by choosing the \"Custom Date\" option Part3: Instructor wants to enter a custom deadline only for a particular round In this case, the instructor can set the submission deadline for round 1. This would result in all deadlines being populated relatively according to the pre-set values. The instructor can then, if need be, modify the deadline for a particular round by either selecting a different relative date or by entering a custom date manually. 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. 6. Change all the deadlines for the necessary round by either entering a manual date or by choosing a different relative date from the dropdown. 1. Login as instructor6 2. Go to courses tab 3. For CSC/ECE 506, Spring 2014, go to edit assignments and choose New problems B 4. Edit this and make it a staggered deadline assignment. Also change the review due dates for the first round to any date beyond today 5. Now go back to assignments page and go to view review report for this assignment 6. We focus on student 5059 for this case. 7. This student has one review, go ahead and grade this review. 12. Now revert back to instructor6 and again go to view review report for this assignment. 3. Revert back to instructor6 and again go to view review report for this assignment. We created 4 new topics for this assignment. Testing for modification of dates in staggered deadlines. Case 1: Attempting to enter a date for a round that was before the previous round. Case 2: Attempting to enter a date for round1, round2 or round 3 that is out of invalid (Deadlines being before current date). Case 3: Entering an incorrect date when manually entering a deadline for a particular round for a staggered deadline.", ["The writeup is quite readable.", "The writeup explains the problem well, but the problem would have been helpful to have a bit more detail on the code changes.", "The test plan is not described, but the code is.", "This is a good thing, despite that The test plan is not described, but the code is, but I would have liked to see the code be described in more detail.", "Also, The test plan should have been described in terms of what the tests are doing.", "I would also have liked a description of the tests, and how they work."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "159": ["Expertiza is an online web application for educational purpose, and is developed using Ruby on Rails. Instructors are able to create, modify, delete and view assignments and students are able to form teams, submit assignments and make reviews using this application. The tree-display.js and its tree_display_controller.rb files are designed to allow Expertiza users to view their Assignments, Courses and Questionnaires at one place. This is the primary control page, as well as the home page for instructors on Expertiza which allows them to create, modify, delete and view Assignments. The primary problem with this is that both the files, due to their bulky and unoptimized methods, slow the rendering of UI on screen. The methods in these files can be studied and refactored to improve the overall performance of this controller and its corresponding UI. Moreover, any obsolete or unused methods can be removed and DRY principle should be implemented. This project mostly revolves around these 2 files, and would involve refactoring JavaScript more than Ruby on Rails. There may be unused methods in the controller or java script file due to previous development, maintenance and refactoring. Loading speed of the web page is slowed down by repeated interface with database regarding to same variables but by different methods. To find out unused methods in dynamically typed language like Ruby is difficult, thus our team is focusing on the suspicious methods which have neither comments nor references showing in github. All suspicious methods are tested and following shows the confirmed used methods as well as their functionality. goto_... Methods are called when the instructor clicks on the corresponding node under the \"Manage\" menu (e.g. \"goto_quetionnaires\" is called when clicking on \"Questionnaire\" node.) and the user will get redirected to corresponding pages. confirm method is called when the instructor tries to delete a course/assignment/review and chooses \"yes\" at the confirmation page. folder_node_ng_getter functions to render json of the node. (e.g. Returning all the courses data when clicking on \"Course\" node.). 1. We found one unused method bridge_to_is_available and delete it. <image>. 1. We simplified the month string representation in file app/assets/javascripts/tree_display.jsx <image> 2. We found the goto_* functions in file app/controllers/tree_display_controller.rb are not necessary and can be replaced with the goto_controller(name_parameter). However, they are called outside of the files in our scope and we did not modify them for now. <image> 3. We found a confusing variable name \"res2\" in file app/controllers/tree_display_controller.rb and changed. <image> 4. We found two confusing method names \"update_is_available\" and \"update_is_available_2\" and that \"update_is_available\" is used for checking the accessibility of users who are tas/owners while \"update_is_available_2\" is used for checking the accessibility of user who are instructors. <code> is changed to <code> and <code> is changed to <code> 5. We found three confusing method names \"initialize_fnode_2\" and \"children_node_2_ng\" and that \"res_node_for_child_2\" for corresponding nested chidren nodes (the subfolders in the tree display). <code> is changed to <code> , <code> is changed to <code> and <code> is changed to <code> 6. We renamed a few variable and method names related to update_tmp_obj <code> is changed to <code> and <code> is changed to <code>. The tree_display.js and tree_display_controller.rb are mainly related to the \"Manage\" tab and its child nodes. Thus, the following steps are needed to test the functionality from UI: 1. Log in as an instructor. 2. Click on the \"Manage\" tab as well as its child node on the tool bar and to test if they are redirected to the correct page. (Child node means \"Users\", \"Questionnaires\", \"Courses\", etc. under \"Manage\" menu or \"Review Rubrics\", \"Metareview Rubrics\", etc. under \"Questionnaires\" menu. And the reason calling it \"child node\" is because it is the variable name used in code.) 3. Click on the displayed contents to test if the details can be displayed properly. We passed all Travis CI build and Codeclimate checks.", ["The writeup is very good.", "The writeup explains the changes well, and explains the rationale for them.", "The only thing I would change is that the test plan should have been described in more detail.", "Also, the test code is not described in prose.", "that Also, the test code is not described in prose is a major weakness.", "I would have liked to see the code snippets in the document, so that the reader could understand what was done."], [1.0, 0.0, 1.0, 1.0, 1.0, 0.0]], "160": ["E1472: Connect changes to score model with changes to score views Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.1.1.1.1. <link> 1.1.1.1.2. <link> 1.1.1.1.3. <link> 1.1.1.5. <link> 1.1.1.6. <link> 1.1.1.7. <link> 1.4. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.5. <link> 1.1.1. <link> 1.1.2. <link> 1.6. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.7. <link> 1.8. <link> 1.1.1. <link> 1.1.2. <link> 1.9. <link> 1.10. <link> 1.1.1. <link> 1.1.2. <link> 1.11. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.12. <link> 1.13. <link>. One of the Expertiza features is to report scores to both students and the instructor. The student can see the feedback from other students, such as the max score, the min score and the average score. Current System (After Refactoring Grades_controller): <link> <code> Student: user1600 and user1601 Password: test Original System (Before Refactoring Grades_controller): <link> <code> Student: user1600 and user1601 Password: test All our test result based on the following test cases on expertiza, please follow these step to get it. <code> Student: <code>. <code>. <code> <code> <code> <code> <code> <code>. <code> <code>. <code> <code>. <code>. <code>. <code>. <code>. <code>. The view method reports everyone‚Äôs grades to an instructor, and the view_my_scores method reports peer-review scores to a student. The grades_controller class is responsible for displaying grades to students (via view_my_scores) and instructors or Teaching Assistant (via the view method). <image>. 1. view method : handle the functionality of viewing the assignments of the whole class. 1. view_my_scores : take care of displaying the scores pertaining to an assignment to a single user. <image> The figure above mainly illustrates the process of viewing scores for different actors. The instructor and teaching assistant are able to view scores of all the team and could see the reviews of a selected team. Student actor can see his own scores and reviews. For example, when a student want to view his/her grades, there must be something in the database (precondition). <image> The RScore class stores the variables maximum,minimum, average review scores. Create rscore class in models (rscore.rb): <code>. Before: (views/grades/_participant.html.erb) <code> After: (views/grades/_participant.html.erb) <code>. Before :(views/grades/_participant.html.erb) <code> After :(model/assignment_participant.rb) <code>. At the beginning of the final project, the function of viewing scores is very slow by students and instructor. 1. Modify get_assessments_for method in response_map.rb After doing this, the time cost of view function decreased by more than 90% Before Refactoring: <code> After Refactoring: <code>. <table> 1. Original Time for Instructor to View all scores <image> Original Time for Instructor to View all scores 1. Time for Instructor to View all scores after Refactoring <image> Time for Instructor to View all scores after Refactoring 1. Original Time for Student to View all scores <image> Original Time for Student to View all scores 1. Time for Student to View all scores after Refactoring <image> Time for Student to View all scores after Refactoring. <image>. <image>. <image>. <link> <link> <link> <link> <link>. We will stick to the UI design of the grades view and see what else we can do to further improve the performance of the system.", ["The writeup is very readable.", "The writeup explains the changes well, but The writeup would have been better to link to the code in Github.", "The test plan is not explained.", "There is no description of the tests.", "that There is no description of the tests is a very good thing.", "I would have liked to see a description of how the tests work.", "Also, The test plan should have been described in more detail."], [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0]], "161": ["Expertiza is a web application developed using Ruby on Rails that serves as a peer-review system. The application allows students to submit and peer-review learning objects (articles, code, web sites, etc)<ref> <link> </ref><ref> <link> </ref>. It is an open source project and it's codebase is maintained in GitHub. We are contributing to Expertiza as a part of our Object-Oriented Design and Development's Open-Source Software (OSS) Project. Our goal in this project is to refactor the assignment_participant model . In this Wiki Page, we will explain the changes that we have made for the same. Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.4. <link>. The assignment_participant model is subclass of Participant model and is used to maintain the list of students/users participating in a given assignment. The changes that are needed to be done are described as follows:<ref> <link> </ref> 1. Rename methods prefixed with ‚Äúget‚Äù. 2. Move methods to appropriate file helper classes. 3. Move methods to appropriate models. 4. Remove unused methods 5. Use good Ruby style guidelines in the code. <references/>.", ["The wiki page is very short, but The wiki page does explain the changes that were made.", "The wiki page is not clear why the refactorings are described in the way the refactorings are.", "The changes that are needed to be done are described as follows: Rename methods prefixed with get.", "Move methods to appropriate file helper classes.", "Remove unused methods."], [1.0, 1.0, 1.0, 1.0, 1.0]], "162": ["response.rb is the class that manages the response to all rubrics in Expertiza. if someone fills out a review form, the instance of the review form is a Response. If someone gives feedback (a ‚Äúrejoinder‚Äù) to an author, that is a Response too. Or if someone evaluates a teammate contribution, fills out a survey, or takes a quiz, they are creating a Response. Note: Method display_as_html writes the HTML for displaying a rubric. This would ordinarily be view code, but it is used by so many different views that it is done here. Questions are written out in the order of their sequence number (anyone who creates a rubric can specify sequence numbers for questions). After all questions are displayed, there is a blank for an additional comment. <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing. When the get_maximum_score() function is called it takes care of the weight of the question. It multiplies the weight to the score and adds it to the final score. <code>. All the email code has been shifted to the mailers. Comments have been removed. <image> Auto selected Reviewing. response_helper.rb contains helper methods that display the questionnaires and rearrange questions so that the most frequently answered questions are at the bottom while the less frequently answered questions are at the top. Method is no longer being used in Expertiza and has been removed. Method is no longer being used in Expertiza and has been removed. <image> Auto selected Reviewing.", ["The document is very readable.", "The document explains the changes well.", "The code snippets are well organized and well commented out.", "However, the code snippets for the email code have been removed.", "that However, the code snippets for the email code have been removed is a shame.", "Also, the screenshots are not very large.", "the screenshots are just pasted in with the email code.", "I would have liked to see the screenshots displayed in a larger font."], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], "163": ["According to the existing code workflow, the assignment of topics to teams are based on FCFS (first come first serve) basis, where a team which first signs up for a topic gets the topic while other teams are waitlisted on the same topic. Factors such as team size are not considered which are important while assigning a topic to the team and potentially can reduce many issues faced by the current system. 1. One student can sign up only for a single topic. In cases where many topics are available, a student is forced to choose a single topic among many available topics which can be a difficult task. 3. If all the teams choose a handful of topics among many topics, it would also result in unnecessary additions in the waitlist queue for those few topics resulting in a situation where all the topics are not uniformly distributed among all the teams 4. Before, signing up, if more than one student forms a team and if each student belonging to the same team tries to sign up for different topics, than those topics are allotted to individual students resulting in a situation where a team can hold more than one topic. The algorithm works by considering every team as strength of 1, representing the student in the team. After sign up the topic would be allotted to the team based on a lottery system where a team is randomly selected for every topic. the intelligent assignment of teams. This approach is based on two important factors: 1. Team strength 2. Priority order of the topics submitted by the team. An added advantage of this approach is that, unlike the previous system, the intelligent team assignment system allows each team to bid for multiple topics which increases the chance of every team getting at least one topic that they placed their bid on. Each team can place their bids in priority order, the priority of the bids are also considered while assigning topics to the teams. For example: If TeamA is up to its maximum strength and bids for Topic1 , Topic2 , Topic3 where Topic1 has the maximum priority then TeamA has larger chance of being assigned Topic1 , but if Topic1 is already assigned (to a different team which had equal probability of getting the same topic based on team strength and bid priority) then Topic2 would be considered for assignment followed by Topic3 . Thus the priority mentioned by each team is also an important factor for assigning topics to teams. 1. Initially, every student is a team of 1 member. Before the sign up process takes place, students can merge their teams to form a larger team. 2. It is preferred that the number of members in the team should be as close as maximum strength allowed for each team to increase the chance of winning a topic. 1. Every team is allowed x bids that they can use during the sign up process to select the topics of their choice. [The value of x is decided by the instructor using class strength, number of topics created for an assignment and maximum team strength allowed for that assignment.] 2. During the sign up process, the team can place x bids on x topics of their choice in a priority order. 1. As each team can place their bids on the available topics based on topic priority. Hence every team gets to choose more than one topic of their choice. 2. The teams are assigned topics based on modified <link> <ref> <link> </ref> algorithm which considers factors such as team size and priority ensuring that the topics are no longer assigned based on FCFS basis. This approach addresses the most important issue where a topic is not assigned to the team just because the team was late to sign up for the topic as compared to the other teams. This flow chart illustrates the \"modified stable matching\" algorithm used to assign topics to teams based on the strength of the teams(bidder) and the priority in which they bid for the topic. This algorithm takes two parameters as input 1. A list of teams which are un-assigned any topic 2. A hash of team and topics which were assigned Algorithm 1. Sort the list of teams in descending order of team size 2. For each team a.Get the team_size and topics that the team placed their bid on b.Arrange the topics according to the priority order mentioned by the team i. For each of the topic, check which team is assigned this topic and store its team strength in assigned_team_size ii. If the team which is assigned this topic is not up to maximum strength and if the ( team_size + assigned_team_size <= max_strength allowed for each team) then assign this team the topic. They can associate each bid with a priority. This would in turn start assigning teams with topics based on their bid preferences. The table bid is supposed to store all the bids on the topics with their priority. Current requirement is to have only one bid per topic by an owner. When the instructor starts the intelligent assignment of topics to teams, IntelligentAssignmentController triggers the assignment algorithm. The students interact with AssignmentTopicView which lists down all the topics for the assignment and allows students to bid for topics with priority.", ["The writeup is very readable.", "The writeup explains the changes to the code, and the changes made to the existing code.", "the changes made to the existing code are described in detail, and it is easy to see how the existing code has been modified.", "However, the changes made to the existing code are not described in prose.", "the changes made to the existing code are described only in a list of items, which is not very helpful.", "Also, the test plan is not described.", "That the test plan is not described is a major weakness.", "the existing code is not explained in prose, and there is no explanation of how the tests work."], [1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "164": ["Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.1.7. <link>. <link> is an open source project based on the <link> framework. Expertiza provides a platform for instructors to create assignments and for students to set up teams to facilitate early communication and teamwork in these assignments. Expertiza also provides an environment where students can peer review other students, allowing these users to view feedback on their assignments in a timely manner. Expertiza supports submission across various document types, including the URLs and wiki pages. The following items were improved in the refactoring of the given file: 1. Long blocks of code converted into separate methods 2. Ambiguous variable names changed to meaningful variable names 3. Macros added to replace hard-coded values 4. Code clarity 5. Test Coverage. The Review Mapping Controller handles mapping a given group's assignment submission to students working in other groups for peer review. The controller handles items associated with routing submissions to reviewers, handling permissions for instructor review calibration, and controlling drafts or uncompleted reviews. Included in this controller is the ability for the instructor to specify the number of required reviews per student or the number of reviewers per team in order to have group submission automatically sent to all students' review queues. in automatic_review_mapping method, the following bits of code were added to separate methods: <code> The above was moved into the team_assignment method that assigns users to a new team. <code> Again, the above is a unnecessarily large 'if' block that could be moved to another method, one that was named validate_review_selection The following is the final block of code moved to another method from automatic_review_mapping: <code> This block was moved to the maps_strategies_for_artifacts method. Next, the assign_reviewers_for_team method was evaluated for refactor. The following blocks of code were found that seemed to go past simply what the name of the method entailed, so they were moved to other methods: <code> The above performs its own standalone operation, it's not needed in an already long method that has its own priorities. As such, it was moved to generate_insufficient_review_collection. <code> The above creates a new hash table and performs standalone operations on it, and it is used nowhere else in the assign_reviewers_for_team method. It was moved to generate_teams_hash. <code> Although the above could stay as-is in assign_reviewers_for_team, there already seems to be too much functionality in this method, which is why it was moved to insufficient_assign_reviewers. There are existing RSpec tests (spec\\controllers\\review_mapping_controller_spec.rb) for the given file; we were tasked with ensuring that our changes did not break any of the existing tests, thus retaining the previous code's functionality. For the commit associated with our final submission, all existing tests pass according to travis-ci. 1. <link> 2. <link> 3. <link>.", ["The writeup is quite readable.", "The writeup explains the changes well, but The writeup would have been helpful to have a summary of the changes, rather than just a list of them.", "The code changes are described in prose, but not in prose.", "They are presented in a single paragraph, with no prose describing The code changes.", "that They are presented in a single paragraph, with no prose describing The code changes is not a good way to explain the changes.", "It would be better to use no prose describing the changes."], [1.0, 1.0, 0.0, 1.0, 1.0, 1.0]], "165": ["The Expertiza project is system for using peer review to create reusable learning objects. Students do different assignments; then peer review selects the best work in each category, and assembles it to create a single unit.<ref> <link> </ref>. Used on the admin side of Expertiza for creating/ editing questionnaires (rubrics, surveys and quizzes). It helps in add/removing questions, options, etc for a questionnaire. Very big controller that handles a lot more than the name suggests. Functionalities need to be moved to appropriate controllers. Quiz methods are should be treated the same as any other type of questionnaire; differences between quiz questionnaires and other questionnaires should be implemented in the model class, quiz_questionnaire Turn the questionnaire into a ‚Äúform object.‚Äù The ..._questions methods: save_new_questions, delete_questions, save_questions should be in a separate class. Other classes involved: questionnaire.rb quiz_questionnaire.rb questions_controller.rb What needs to be done: Move quiz related functions to quiz_questionnaire.rb . copy, update_quiz, valid_quiz methods, clone_questionnaire_details is too long. Debug output (print statements) should be removed. Understand the functions in the controller and comment them. Ensure that the code is understandable to the next programmer who works on it. What We Have Done Method Refactoring <table> Format Refactoring Case 1: Loop Condition Change all the looping conditions into one format Before <code> After <code> Case 2: If Condition Change all the if conditions into ruby format Before <code> After <code> Case 3: Name Change all the name from \"JAVA name\" to \"Ruby name\" Before <code> After <code> Refactoring Example In models/questionnaires.rb , we add copy_questionnaires method, as shown below: <code> References <references/>. <table>. Change all the looping conditions into one format Before <code> After <code>. Change all the if conditions into ruby format Before <code> After <code>. Change all the name from \"JAVA name\" to \"Ruby name\" Before <code> After <code>. In models/questionnaires.rb , we add copy_questionnaires method, as shown below: <code>. <references/>.", ["Very good description of the changes made.", "Good description of what was done.", "Would have been helpful to have a screenshot of the code changes.", "Also, the code snippets are too long.", "the code snippets should be separated into sections.", "the code snippets should be described in more detail."], [0.0, 0.0, 1.0, 0.0, 1.0, 1.0]], "166": ["In this project, we have unit tested various methods in SignUpSheetController.rb and SignUpSheet.rb as well as refactoring these methods. We first wrote unit tests to ensure we had adequate coverage for our methods. Then, we refactored our methods with confidence found from our unit tests. We found that directly testing the functions that we refactored provided better assurances that our refactorings were correct rather than manual testing the user interface. For our unit testing, we used the RSpec framework. We choose this framework since legacy tests of our methods were implemented with RSpec<ref> <link> </ref> . We also utilized the RSpec-Mocks<ref> <link> </ref> to test functions related to the database without having to use fixtures. We wrote multiple controller tests and model tests for corresponding functions so as to test various scenarios and get 100% test coverage. We sought to obtain this high level of coverage to make refactoring more precise. We believe that highly tested code is resilient errors that could occur when refactoring. Before we started working on Expertiza<ref> <link> </ref>, running RSpec on the codebase resulted in 992 / 4184 lines of code (23.71%) covered. After our work, running RSpec on the codebase resulted in 1144 / 4278 lines of code (26.74%) covered. E.g. If you run the test in spec/controllers/sign_up_sheet_spec.rb by command \"rspec spec/controllers/sign_up_sheet_spec.rb\", then you can see the 100% line coverage for controller method save_topic_deadlines() in sign_up_sheet_controller.rb. For checking the coverage, open the index.html page coverage folder and go to respective controller. Similar, run the tests in Model and Controllers folder to see 100% test coverage for following functions. 1. Create() in SignUpSheetController 2. self.add_signup_topic() in SignUpSheet 3. save_topic_deadlines() in SignUpSheetController 4. self.confirmTopic() in SignUpSheet. We performed various refactorings on our code to increase the codes readability and remove redundancy. We extracted variable from complicated statements to increase the readability of the code. In the code base we were working with, there were a variety of lines of code that were more than 80 characters long. These lines of code were hard to read. So, we split them up into multiple lines of code by extracting statements found in function calls into their own variable. Example: <code> Became: <code>. We attempted to enforce good Ruby conventions while refactoring the code<ref> <link> </ref>. This entails doing things like correcting the formatting of the code to make it more readable. In addition to this, we converted a variety of iterators to follow good ruby conventions. For example, sign_up_sheet.rb had the function self.add_sign_up_topic(assignment_id) which contained an iteration through a set of topics while manually maintaining an index variable. Manually maintaining the index variable can be problematic for future maintenance. <code> We replaced these with the Ruby each_with_index iterator. This allows us to pass the responsibility of maintaining the count of the index to the iterator. <code> We replaced \"=>\" while passing parameter by colon (:) So that <code> became <code>. We have refactored the methods which were doing a lot of things into two or more methods so as to segregate the functionality and following the basic principal that one method should do only one thing. Also, this helped in making the methods more readable and easy to understand. E.g. In sign_up_sheet.rb Model, \"def sign_up_wailisted()\" is the new method extracted from original method self.confirmTopic(). There are many more such examples which are done as part of refactoring. 1. Clone the repo <code> 2. Change current directory to cloned repository 3. Run Command: <code> <code> 4. Check coverage: Open overage/index.html in browser and check line coverage for following methods 1.1. Create() in sign_up_sheet_controller.rb in Controllers 1.2. self.add_signup_topic() in sign_up_sheet.rb Models 1.3. save_topic_deadlines() in sign_up_sheet_controller.rb in Controllers 1.4. self.confirmTopic() in sign_up_sheet.rb in Models. We were not able to recreate the problem found in issue 580. After multiple attempts of trying to recreate the bug we began to examine the source code. We believe that someone else has already fixed the bug before we started working on the project. <references></references>.", ["The writeup is quite readable.", "The writeup explains the changes well, and explains the rationale for them.", "The only thing I would have liked to see is a more detailed description of the changes to the code.", "I would also have liked a more complete description of how the tests work.", "They are not described in prose, but in code snippets.", "that They are not described in prose, but in code snippets is not a good way to understand what They are doing."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "167": ["This page provides a description of the Expertiza based OSS project for Fall 2017. Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.4. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.6. <link> 1.1.7. <link>. <link> is an open source project. It is based on <link> framework. Expertiza is a web application which allows instructors to create new assignments, list of topics which students can sign up for. Students can also form teams for various assignments and projects. The following tasks were required to be completed in this project: 1. Issue #80: Add past-due assignments to task list. 2. Highlight with specific colors current and next due dates. 1. Past Due assignments are not present in the task list. If a student is a participant of an assignment and has not submitted the assignment before the assignment due date/deadline, then the assignment is considered as a past due/overdue assignment for that student. These past due assignments are not present in the task list and we have added this functionality to the existing system. 1. Highlighting next due dates. Different To do tasks in the task list with different due dates are highlighted with different shades of red color. An assignment that has to be submitted earlier has a redder color than assignments that have later due dates. 1. The function overdue_tasks? is added in the model student_task.rb file to fetch those tasks with current stage set as finished and which were not started by the student. <code> 1. In the list.html.erb file we used the tasks not started section as a template to construct the past due assignments section. <code> 1. The past due assignments variable from the controller contains the list of past due assignments as its contents which are looped through with a do each loop. The participant, stage and topic_id are used to obtain the due date of the assignment. Then the assignment name and its deadline are displayed. <code> 1. To highlight with specific colors current and next due dates we made several changes to the currently existing list.html.erb file. <code> The rgb() style color attribute is used to set the color of a html tag. A variable r is used to set the red color parameter in rgb function. Initially it is set to 255 which is the Darkest shade of red that is possible. Then a variable step is used to determine by what value the r variable must decrease to lessen the intensity of the red color. The size of the task list is used to initialize the step value. An if condition is used to make sure that step is initialized only when there are tasks to be completed. The task list before and after the changes are shown below. <image>. <image> The student in the example above is a participant in 6 current assignments that are displayed in the task not yet started section of the task list. Each of those is highlighted with colours as described. The student has failed to submit 6 other assignments before their respective due dates and they appear in the past-due assignments section of the task list. Following are a few test cases with respect to our code changes that can be tried from UI: 1. Login as student and check if past due assignments section is present on the task list. 2. If no such section is present, the student does not have any past due assignments. 3. Log in as an instructor and create a new assignment. 4. Set the deadline for the assignment to a date and time few minutes from the current date and time. 5. Assign the student being tested as a participant to the created assignment. 6. Login as the student and check the task list after the due date for the assignment has passed. 7. The new assignment will be in the Past Due assignment section. To check if the Tasks not yet started section has assignments highlighted with colours: 1. Login as a student and check if there are any assignments in tasks not started section. 2. If no assignments are present, the student is not involved with any current assignments. 3. Log in as an instructor and add the student as a participant to few assignments. 4. Log in as the student and now see that the assignments in tasks not yet started section are highlighted with colours as described in the wiki. Edge Cases The edge case for when there are no past due assignments for a student has been handled. In this case, no past due assignments are displayed. The edge case for when there is only one assignment in the tasks not yet started section has been handled. In this case, the assignment is highlighted with a dark red colour. 1. <link> 2. <link>.", ["The document is quite readable.", "The document describes the changes well.", "The code changes are described well.", "The code snippets are well organized.", "There is a good description of the changes to be made.", "However, The code snippets should be separated out into sections, so that the reader can see The code snippets in The code snippets entirety.", "Also, the test plan should be described.", "that Also, the test plan should be described is not a very useful approach."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0]], "168": ["This means that refactoring projects, testing projects, and Mozilla projects need to use the same rubric. The feature concluded with allowing 4 rubric scenarios for an assignment: 1. Rubric does not vary by round or by topic. 2. Rubric varies by round, but not by topic. 3. Rubric varies by topic, but not by round. 4. Rubric varies by both round and topic. Our proposed solution keeps the previous implementation, but changes rubric filtering to allow instructors/TAs to use filters that are not theirs. Following the <link> footsteps, this diagram depicts the interactions between an instructor and an assignment. Alongside editing topics and due dates, the instructor can edit what rubrics are assigned to an assignment. The topics tab allows instructors to specify which rubric associates with each topic while the rubrics tab lets the instructor determine if the assignment will vary by topic or not. <image>. Now find questionnaire by assignment questionnaire and type rather than assignment/type/round_number/topic_id. 1.3. assignment_participant.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.4. feedback_response_map.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.5. on_the_fly_calc.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.6. self_review_response_map.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.7. tag_prompt_deployment.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1. Views 1.1. edit/_rubrics.html.erb : Modify to set assignment vary by round/topic fields instead of non persisted flags 1. Helpers 1.1. assignment_helper.rb : Refactor by moving function to find questionnaire / assignment questionnaire to assignment_form.rb. 1.2. grades_helper.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.3. summary_helper.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1. DB Migrate 1.1. XXXXXXXXX_add_vary_by_topic_to_assignments.rb : Migration to add ‚Äúvary by topic‚Äù field to assignment 1.2. XXXXXXXXX_add_vary_by_round_to_assignments.rb : Migration to add ‚Äúvary by round‚Äù field to assignment 1. All of the related test files to accommodate the above changes. <image> In addition to that, we will be adding two additional boolean fields to the assignment schema: vary_by_round and vary_by_topic . As discussed earlier, in the previous implementation, these were methods that were called to determine if an assignment varied by round/topic rather than a persisted value. It would always query for the AQs by assignment id, current round number, and current topic id. However, if the assignment did not have reviews that vary by round or topic, these values would be nil on the AQ, and the previous query would fail. This means that: 1. If an assignment does not vary by round or by topic, the query for AQs will be by assignment id only. 2. If the assignment varies by round but not topic, the query for AQs will be by assignment id and round number. <image>. Here we describe manual UI Testing steps to edit an existing assignment to allow it have to specialized rubrics for different topic types. 1. Login to Expertiza using instructor account (For testing, username: instructor6 , password: password ) 2. Click on Manage > Assignments 3. Click on Edit option for any assignment, you should get following view. <image> 1. Click on Rubrics tab. You will see 2 checkboxes ( Review rubric varies by round? , Review rubric varies by topic? ) 2. Check the box for Review rubric varies by topic? 3. Go to Topics tab and verify that there is dropdown menu beside each Topic. 4. Select a rubric from dropdown menu, and click Save <image> 1. Go back to Home, and select the same assignment to edit. When you click on Topics tab, you should see the rubric you had selected. 1. This was due to how questionnaires were retrieved/found for an assignment. Staggered deadlines also rely on finding questionnaires using topic id, which isn't handled until after an assignment is made. 1. Unresolved Another quality of life improvement is that staggered deadlines and topics cannot be added to an assignment until after the assignment has been created and saved.", ["The writeup is quite readable, but The writeup does not explain the changes made to the code.", "It is not clear how the code has been changed, and the test plan is not described.", "the test plan should be described in more detail.", "Also, the code should be explained in more details."], [0.0, 0.0, 1.0, 1.0]], "169": ["This page provides a description of the Expertiza based OSS project Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.1.1.5. <link> 1.1.1.6. <link> 1.1.1.7. <link> 1.1.1.8. <link> 1.1.1.9. <link> 1.1.1.10. <link> 1.1.7. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.8. <link>. These problems are as follows: 1. Unsafe reflection method const_get called with parameter value 2. Hardwired variables in add_new_questions and save_new_questions 3. Unnecessary checks for QuizQuestionnaire, checks can be removed 4. Use guard clause to enclose methods instead of conditional 5. Removed unnecessary method 'create_questionnaire' 6. Break up create method into new 'create_questionnaire' 7. Use each_key instead of keys.each 8. Split lines of code to fit within recommended 160 character length 9. Removed useless assignment of variable in save method 10. Resolved issues involving use of unsafe reflection. Problem Method(s) save_new_questions, delete, and save_questions used conditional to wrap code instead of guard clause. Using guard clause can reduce complexity and number of lines in code. Solution For example, we go from: <code> To: <code>. Problem Method(s) create and save_new_questions have unnecessary checks for if question type is QuizQuestionnaire. Solution We removed the check in both methods. We go from: <code> To: <code>. Problem Method(s) save_new_questions and add_new_questions used hardwired variables. We go from: <code> To our code which incorporates constants. <code> With our constants at the top of the code for easy accessibility: <code>. Problem Unsafe reflection method const_get called with parameter value Solution Remove the unsafe reflection through using a variable that checks for null values. We go from: <code> To: <code>. Problem Method create_questionnaire, had no apparent calls to it. We remove the method to make the code dry. Solution For example, we remove: <code>. Problem The create method itself was 49 lines long. Solution For example, we go from: <code> To: <code>. Problem The existing code uses keys.each to iterate through the hash. Solution For example, we go from: <code> To: <code>. Problem Some of the lines of code exceed the recommended 160 characters per line. Solution For example, we go from: <code> To: <code>. Problem The existing code included assignments of variables that were not used throughout the file. In any case, we remove the variable keep the code dry. Solution For example, in the following method: <code> We remove the unnecessary variables and comments, resulting in the following method: <code>. In order to remove repetition and make the code dry, this do loop was refactored into its own method 'save_question_hash'. Solution For example, in the following method: <code> We refactor the do loop into its own method: <code>. However, in order to ensure the code edits didn't cause any previously crafted test to fail an RSpec test was ran before each commit. The command utilized to test the questionnaires controller is as follows: <code> However, if a VCL was utilized for development this following command was used instead. <code> In one case the create_questionnaire method was removed, thus in order to keep the set of tests clean the following test block was removed from the testing file: <code>. Test Log in Website url: <link> Log in: instructor6 Password: password Test Create questionnaire 1. After logging in click the Questionnaires tab. 4. Select Create Test edit/add questions: 5. Change dropbox of question type to TextArea, select Add \"1\" more. 6. Change dropbox of question type to Criterion, select Add \"2\" more. 7. Edit question content: \"Test question Textarea\", \"Test question Criterion1\", and \"Test question Criterion2\" in that order. Test Delete Questionnaire 18. Select Back. 1. Code Refactoring Best Practices <link> 2. Expertiza on Github <link> 3. Expertiza Project Fork <link> 4. Expertiza Website <link> 5. RSpec Documentation <link>.", ["The writeup is quite readable.", "The writeup explains the changes well, but The writeup would have been helpful to have the code snippets in the \"Code snippets\" section of the document, rather than just pasted in.", "the code snippets in the \"Code snippets\" section of the document are not very long, and the code is not very readable.", "The code changes are not described in prose.", "The code changes are described in code snippets, but not in prose, and it would be much better to have The code changes explained in prose (e.g., \"The existing code uses keys.each to iterate through the hash.)"], [1.0, 0.0, 0.0, 1.0, 1.0]], "170": ["It allows the instructors to create new assignments and customize new or existing assignments. Each assignment should have its own unique auto-generated submission directory, which is named based on the assignment name entered by the teacher. In the current implementation of Expertiza, there are following issues need to be addressed: Issue #1: The directory name should be auto-generated from the assignment name. Issue #2: It should be done by changing spaces in the names to underscores. E.g., the directory for Program 1 is by default \"Program_1\". Issue #3: A check should be added to prevent two assignments in the same course from having the same name. Issue #4: Verify or add if not present - a check to stop two assignments from sharing the same directory. Issue #5: On changing name of an assignment while creating it, the code shouldn't throw a NoMethodError. Fix #1: Submission directory is successfully being generated after the assignment name is typed in. If needed, the submission directory can be changed, however any modifications to the assignment name will just auto-generate it to match. Fix #2: A check was added to ensure that assignments in the same course do not share the same name. When creating a course, if the assignment name is a duplicate, it will reset the entire form. Fix #3: A check was added to ensure that assignments in the same course do not share the same submission directory. When creating a course, if the submission directory is a duplicate, it will reset the entire form. Fix #4: These checks were also put in place when modifying an existent assignment. The controller, helper and spec were modified for this project: 1. Assignments Controller - assignments_controller.rb 2. Assignments View - _general.html.erb 3. Assignemnts Controller Spec - assignments_controller_spec.rb 4. Assignments Model - assignment.rb. This is a controller that helps instructors create, modify, copy new assignments. Each assignment can be associated with specific Rubrics, Review Strategy and Due dates. This the view for creating the new assignments and editing the existing assignments. Tests and bug fixes pertaining to assignments controller. The ruby code which defines how the assignment model functions. The project primarily deals with the AssignmentsController and AssignmentsView, and changes made are as follows: The directory name is auto-generated from the assignment name typed in by the instructor. This is achieved by replacing all spaces in the names with underscores, and removing all special characters like '/','\\','$', etc from the auto-generated submission directory name. If any two assignments of the same name under the same course are attempted to be created, it is prevented and an error message is displayed to the user stating the the submission directory name already exists. The odd case of a teacher editing the name of an already existing assignment to one that already exists is also handled. Expertiza will display a similar error message stating that the assignment couldn't be saved. Most changes were made in the assignments_controller.rb file. Checks were added to ensure that an existing assignment name or submission directory did not exist when creating a new assignment. If the assignment was not created due to an error, the code would render new which would cause the assignment to be created even though it did not pass all of the checks. The following function was added to app/views/assignments/edit/_general.html.erb , to generate submission directory names with underscores replacing spaces: <code> Changes were made to the create function in assignments_controller.rb , such that it only creates the assignment directory if the one with the same name doesn't already exist: Before <code> After <code> Changes were made to the update_feedback_assignment_form_attributes function in the same file to flash an error if an edited file has the same name: Before <code> After <code> The following validations were added to app/models/assignment.rb , without these validations the user was allowed to change the assignment name or submission directory to one that already exists. <code>. The following steps must be performed to test the project UI: Step 1: Log in as an Instructor, with Username - instructor6, Password - password <image> Step 2: Create a new assignment. In this case our assignment is called \"E2054 Test Assignment\", under course CSC 216 Fall 2009 <image> Step 3: To save the assignment, the Review and Author Feedback rubrics need to be filled in <image> Step 4: On completion, the assignment will be saved <image> Step 5: If another assignment of the same name under the same course is created, the following error is displayed <image> Step 6: On editing an already made assignment to match the same details as \"E2054 Test Assignment\" <image> We get the following error: <image>. The following RSpec tests were added to the assignments_contoller_spec.rb file <code> <link>.", ["The writeup is very readable, but The writeup does not explain the changes made to the code.", "It is not clear how the tests are implemented, and the test plan is not described.", "the test plan should be described in more detail.", "Also, the code is not explained.", "that Also, the code is not explained is a shame."], [0.0, 1.0, 1.0, 1.0, 1.0]], "171": ["Expertiza allows the instructor to create new assignments and customize new or existing assignments. It also allows the instructor to create a list of topics the students can sign up for. Students can also peer review other students' submissions. The process is detailed below: 1. Steps to install Redis: <code> Run the redis-server using: <code> 1. Steps to install NodeJS on CentOS: <code> 1. Run the expertiza Rails server <code> 1. For logging in as an instructor:- Username: instructor6 Password: password 1. For logging in as an student:- Username: student17 Password: password. At present the calibration functionality is limited, the following points present the scenarios where the current implementation is lacking: 1. No support for varying rubric by round feature. 2. From the perspective of the student, lack of differentiation of review - whether its from an expert or otherwise. 3. A student is not notified once an expert submits a review. 4. Additionally, a student should be able to see how an expert rated his/her assignment - similar to how it's done in calibration results for calibrated assignments( As seen when Show Calibration Results is clicked. ). Tasks are broken down into sub-tasks as follows: 1. Refactoring: 1.1. a checkbox in the \"General\" Tab from ‚ÄúCalibrated peer-review for training?‚Äù to ‚ÄúAdd expert peer review?‚Äù 1.2. a tab name for instructor from ‚ÄúCalibration‚Äù to ‚ÄúExpert review‚Äù on the assignment setting page 1.3. partial file from ‚Äú_calibration.html.erb‚Äù to ‚Äú_expert_review.html.erb‚Äù 1.4. the link title on student side from ‚Äúshow calibration results‚Äù to ‚Äúshow expert peer-review results‚Äù 1.5. the file ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to ‚Äúresponse/show_expert_review_results_for_student.html.erb‚Äù 1.6. title in ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to start with ‚ÄúExpert review comparison report for‚Äù 2. Functionality changes 1.1. Vary-rubric-by-round - Currently, the functionality of calibration is limited. 1.2. Both TAs and instructors could do expert reviews - need to modify ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to make it support multiple expert reviews. This diagram shows the Assignment Setting page in the General tab. <image> This diagram shows the Assignment Setting page in the Calibration tab. <image> The following diagram shows the flow of control in case of peer reviews. <image>. <image>. Hence, we will also be writing test cases for the new functionality - added as a result of this project. We would also need to add additional fixtures in spec/feature to be used in the testcases. There are three main actors that interact with the new functionality, these are: 1. Instructors 2. Teaching Assistants 3. Students Hence, we would have to write tests for each of these types of users and test the expert review functionality. Some of the tests that we have in mind as of now, are as follows: 1. Instructor 1.1. Login as instructor using pre-configured credential. 1.2. Go to \"General\" tab 1.1.1. Verify \"Add expert peer review?\" present instead of \"Calibrated peer-review for training?\" 1.3. Verify whether the instructor can see \"Expert Review\" on the assignment setting page. 1.4. Perform Expert Review, based on values declared in Fixtures available to Instructor. 1. Teaching Assistant 1.1. Login as TA using pre-configured credential. 1.2. Go to \"General\" tab 1.1.1. Verify \"Add expert peer review?\" present instead of \"Calibrated peer-review for training?\" 1.3. Verify whether the TA can see \"Expert Review\" on the assignment setting page. 1.4. Perform Expert Review, based on values declared in Fixtures available to TA. 1. Student 1.1. Log in as Student using pre-configured credential. 1.2. Verify if student can see \"Show expert peer-review results\" 1.1.1. When a new expert-review is available. 1.1.2. Show nothing when nothing is available. 1.3. Testing to check if the reviews show up. 1.1.1. If added by TA. 1.1.2. If added by instructor. 1.1.3. If multiple reviews from either TA or instructor show up as a list.", ["The writeup is very readable.", "The writeup describes the changes well, and explains the rationale for them.", "The only thing I would have liked to see is a description of how the code is changed, and how the code is organized.", "Also, the test plan should have been described.", "I would also have liked a description for the tests, and a link to the code."], [1.0, 1.0, 1.0, 1.0, 1.0]], "172": ["2. A confirmation email is sent to a user of the system when they reset their Expertiza account password. In this project we have first identified all the set of scenarios where the user of the system will get an email. We have implemented tests for the following scenarios: There are various ways to create a new user account in Expertiza. Irrespective of the user creation method, the newly added user should get notified via email when his account is created in the system. This email states the username and a randomized password to allow the user to login for the first time. Below given are the ways to create new user to system. 1. By filling a user creation form An instructor can add a new user to the system by filling up a user creation form 1. By importing a CSV file The instructor can add new users to the system by importing a CSV file with user information <image> 1. By importing a CSV file to add participants to an assignment Instructor can add participants to an assignment by importing the users from a CSV. If the user listed in the CSV does not already exist in the system, then the a new user account is created and the user is added to the assignment. <image> 1. User requests an account A user can request an account by filling up a form with his details. If the superadmin approves a request, a new user account is created in the system and the user receives an account creation email notification <image>. The following features were checked for all cases as part of the email functionality when a new user is created 1. Mail delivery count increased by 1 after the mail triggered by the scenario is sent 2. Sender email-id is verified. 4. The subject is checked to be equal to 'Your Expertiza account and password has been created' We considered the following cases while testing specific to the scenario where user requests an account: 1. No email should be sent if new account requested with invalid email address 2. Super admin should receive email about new account request with a valid email address 3. Email notification should be sent to requester when super admin approves account creation request 4. No email notification should be sent to requester when super admin rejects account creation request. We used Capybara to model the scenario as follows: 1. Create user through instructor filling up the form: Admin user is created using factory class. 1. User requests a new account and account is created upon approval from superadmin Super admin is created using factory class. 1. User creation by instructor: Instructor creates new user by filling sign-up form <image> 1. User creation by user request Email count should be zero when user requests new account with an invalid email <image> Email count should be one when user requests new account with a valid email <image> 1. User creation by importing csv files Import CSV to add participants to assignment <image> Import CSV from manage users <image>. When the user tries to login, and the password entered is wrong, the user is redirected to reset password page. <image> Here the email-id entered is searched through the database, If such user account is found: url for reset is generated, with random token set as password is sent to the user. Flowchart: <image>. 1. User enters email id which is not associated with any account 1. No e-mail should be sent 1. User enters email id that's present in the user database The following features were checked inside 'it blocks' as part of verifying email functionality 1. Mail delivery count increased by 1 after the mail triggered by the scenario is sent 2. The sender mail-id is verified to be 'expertiza.development@gmail.com' 3. Receiver email id is checked to be equal to 'expertiza.development@gmail.com' . If the email id is not associated with any existing account, then email count will be zero <image> If the email id is associated with an existing account, then email count will be one <image>. However, if an account is created by adding them as participants to an assignment when they don't already have an account, e-mail notification is not being sent. The issue here was that an already existing user in the system will not get added as a participant on the assignment. Now that we have enabled the email functionality irrespective of where a new user is created from, we don't need to explicitly call the mailer from each location where new user is created. The email body was inconsistent across different scenarios. If the user does not exist in the system, new user account (if there is sufficient information about the user to create a new Expertiza account) is created If the user already exists as a participant on the assignment, do nothing Add the user to the assignment as a participant; otherwise. This way, the user(whether newly created or already an Expertiza user) gets added on the assignment as a participant. Also, the instructor should receive an email about the same. This method calls the email function to notify the reviewee <image>. <image> <image>.", ["The document is very readable.", "The document describes the changes to be made, and explains the rationale for each change.", "The test plan is well structured, and the tests are described in a readable format.", "However, the code snippets are not clearly separated.", "the code snippets are not separated from each other, and it would be helpful to have a description of what is being tested.", "Also, The test plan should have a list of the tests that are to be tested, rather than just a list."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "173": ["<link> is an <link> <link> application which is used by instructors and students for creating assignments and submitting peer reviews. Expertiza allows the instructor to create and customize assignments, create a list of topics the students can sign up for, have students work on teams and then review each other's assignments at the end. The Source code of the application can be cloned from <link> . Files involved: popUpController.rb participantsController.rb What they do PopUpController displays a review when a user (instructor or student) clicks on a list of reviews. ParticipantsController handles participants in an assignment. What's wrong with them: PopUpController contains only two prominent methods, but they are very big. ParticipantsController contains redundant code. What needs to be done: 1 popUpController.rb 1.1 Action_allowed method always returns true. It needs to be fixed. 1.2 Team_user_popup method needs refactoring. @teamId is assigned but never used. Add comments to make code more readable. Rename variables based on their usage 1.3 Refactor Participants_popup and team_users_popup methods into smaller private methods. 2 participantsController.rb 2.1 In add and update_authorization methods, permissions collection object can be used to reference its elements without assigning each element to individual private variables. 2.2 Inherit and bequeath_all methods are similar. Common statements can be migrated to private method. Add comments in code to make it easy to understand. 2.3 Cluster all the flash messages under one private method to make the code more manageable 2.4 Fix email_sent method. It contains a dummy email address. Modified Action_allowed method to return true only if... <table>. Local variables like can_submit, can_review, etc removed and permissions object referenced directly <table>. Moved common functionality of Inherit and bequeath_all to private method populate_copied_participants <table>. <table>. <table>. Login as a instructor \"instructor6/password\". Click on Assignments -> review report -> and on a team. <references/>.", ["The writeup is very readable.", "The writeup explains the changes well.", "The code snippets are well organized and well commented.", "However, The code snippets should be separated into sections, so that the reader can see what is being done and what is not.", "Also, the screenshots should be smaller, so the reader could see what has been done."], [1.0, 1.0, 1.0, 0.0, 0.0]], "174": ["<link> is a software development process that relies on the repetition of a very short development cycle, requirements are turned into very specific <link> , then the software is improved to pass the new test cases only. The TDD sequence can be can be summarized in following steps: 1. Add a Test 2. Run all tests and see if the new test fails 3. Write the code 4. Run tests 5. Refactor code 6. Repeat Advantages of using TDD: 1. Narrowing Problem Focus 2. Tidier Code 3. Not worrying about dependencies 4. Easier refactoring 5. Better Test coverage and fewer bugs. <link> is a software testing method by which individual units of source code are tested to catch errors early in the development process. For a model it involves testing the interface and on how it responds to commands and queries from outside. Model testing is bounded to the functionality of only the model under test and doesn't test how its collaborating models get affected based on this query. Unit Testing provides several benefits which can be summarized in the below points. 1. Finds problems early: Unit testing finds problems early in the development cycle. In test-driven development (TDD), which is frequently used in both extreme programming and scrum, unit tests are created before the code itself is written. When the tests pass, that code is considered complete. 2. Facilitates change: Unit testing allows the programmer to refactor code or upgrade system libraries at a later date, and make sure the module still works correctly (e.g., in regression testing). Unit tests detect changes which may break a design contract. 3. Simplifies Integration: Unit testing may reduce uncertainty in the units themselves and can be used in a bottom-up testing style approach. By testing the parts of a program first and then testing the sum of its parts, integration testing becomes much easier. 4. Documentation: Developers looking to learn what functionality is provided by a unit, and how to use it, can look at the unit tests to gain a basic understanding of the unit's interface's API. 5. Design: When software is developed using a test-driven approach, the combination of writing the unit test to specify the interface plus the refactoring activities performed after the test is passing, may take the place of formal design. Each unit test can be seen as a design element specifying classes, methods, and observable behavior. The goal of the project is to test the Menu.rb, i.e. the Menu model by writing unit tests, which are written using <link> . The unit tests are to be written such that the path coverage of menu.rb is greater than 90% and achieve the highest possible branch coverage. The goal is to test the menu model file. 4. Creating dummy entries for testing different functionalities. 5. Writing testing conditions for different functions and cross-checking with the expected outputs. Menu is a model which gives the functionality to the top menu bar in the Expertiza website. It links the menu items associated with each tab in the menu using a tree. The following Menu is displayed for the Student role : <image>. Mock/dummy objects are needed to be created for any unit testing criteria. These objects are loaded newly and deleted after every testing condition. Several methods exist for creating such objects, whose parameters need to be designed to satisfy the conditions under test. We have used factories and created the mock objects that we need to execute the tests. Menu model require several other mock objects to be created namely Node(this is a subclass in the menu class), menu_item, site_controller, controller_action,etc. A total of 21 testing conditions were required to be performed for testing all the functions in menu model file. The conditions that needed to be tested are as below: Node class 1. initialize <code> 2. setup <code> <code> <code> 3. site_controller <code> 4. controller_action <code> <code> 5. content_page <code> 6. add_child <code> Menu class 1. initialize <code> <code> <code> 2. select <code> <code> 3. get_item <code> 4. get_menu <code> 5. selected <code> 6. selected? <code> <code> 7. crumbs <code>. A screenshot of the tests passing is shown here: <image>. <image> <link>. After writing the test cases we used SimpleCov to measure the C0 coverage of our rails application. After running rake spec to run the test cases, SimpleCov creates a directory called coverage in our rails application folder. These are the learning outcomes after performing this project: 1. Writing tests using the Test Driven Development approach. 2. Writing unit tests for models and controllers in RSpec. In our case, before writing the test cases for the menu.rb we had the understand how different models interacted with each other and how each action by different users would make changes in the database schema. 1. <link> 2. <link> 3. <link> 4. <link>.", ["The writeup is very readable.", "The writeup explains the benefits of unit testing, and how The writeup is used.", "The tests are described in a very readable way.", "However, the test plan is not described in prose, and the test cases are not described.", "that However, the test plan is not described in prose, and the test cases are not described is a shame.", "They are described as tests, but They are not explained in prose.", "I would have liked to see a description of The tests, and also a screenshot of the code.", "Also, The tests are not shown in the document.", "Why not? the code is not shown. "], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0]], "175": ["Expertiza allows the instructor to create new assignments as well as edit new or existing assignments. This issue is not a bug but an additional feature to the existing import topic functionality. Issue 329 : When importing teams there are different options to handle conflicting team names Issue 328 : When importing teams, and a conflict exists there is an option to merge the two teams by inserting the new members into an existing team. we tried to import a team and selected 'Insert any new members into existing team'. No new team members were in fact inserted into the team. <code> <code>. Problem : When importing teams, and a conflict exists there is an option to merge the two teams by inserting the new members into an existing team. Solution : This was an issue to fix the functionality of Insert any new members into existing team. Problem : When importing teams there are different options to handle conflicting team names as shown in the screenshot below. We‚Äôd like to add another option to rename EXISTING team when a conflict exist. Solution : This was a request to add an option to rename existing team if there was a conflict in the team name. New code introduced was as follows: In start.html.erb In this file, the new option as displayed to the user is added <code> In team.rb In this file, the handling of the new tag \"rename_existing\" is added wherein, the old team is updated with a new name. Solution : We have modified the existing implementation for import topics to assign the teams to the topics. We have changed the files to handle another column where the teams have been assigned to topics. The column is optional because there might be topics that have not yet been assigned to any teams Expectations from the import file: 1. Assigned team name should exist in the system, otherwise the import will fail. Instructor has to make sure that the teams which are assigned in the import file should exist with same names in the system or database. 2. Instructor also need to ensure that the topic for which the team is being assigned should not be full or can accommodate new team assignment to the respective topic. We are just adding another column so the best way is to extend the existing select tag with a new option for the teams assigned. All the select tags has been changed with an additional option \"Assigned Team\". <code> model/sign_up_topic.rb The existing import function in the model import the topics to the topic table. As per the requirement and validations, topic should be imported first and then only the team can be assigned to the topic. So the existing import method has been modified to assign the team once the topic is imported in the database table. As per the edge case mentioned in the requirement document that few topics may not have any team assigned to it, so we first check if topic has any team assigned, then only it tries to map the topic with the team. <code> Changes in the application with new implementation An option column checkbox (Teams Assigned) has been added to the UI <image> A new column Assigned Team is added where the columns are being mapped. As our additional functionality is to have another column to assign team to the topic. We have to have the import test case and the assigned team change could be applied to the same test case. We use it to check if the older team gets the new name and the new team gets the requested name. 5. Click on Topic Description checkbox and import the following file. 7. Import topics. 2. Select Manage >Assignments > Edit Assignment > Topics 3. Scroll down to the screen and click on import topics 4. Upload a file with the topic details and a team assigned to topic 5. Check the Teams Assigned optional column 6. Click on import and map the columns in the mapping page 6. After submitting, team will be assigned to appropriate topic [Problem 3 (329)] 1. Login to Expertiza using username: instructor6 & password: password. 2. Select Manage > Courses or Assignments > Add Teams button > Import Team 3. In the screen that loads, select \"rename the existing team and import\" in the handle conflicts section. 4. Upload a file with the team details and select the appropriate delimiter. 5. Click on Create 6. Verify that the new team got created with the assigned name and the older team's name got changed. 2. Select Manage > Courses or Assignments > Add Teams button > Import Team 3. In the screen that loads, select \"Insert any new members into existing team\" in the handle conflicts section. 4. Upload a file with the team details and select the appropriate delimiter. 5. Click on Create 6. Verify that the existing team got updated with the new team members. Also, if there's no team in the system and instructor has used it in the import file so a new pop up can be displayed where the new team can be created or the import can be extended to create teams while assigning the topic.", ["The writeup is very readable.", "The writeup explains the changes well.", "The screenshots are very useful.", "The screenshots are very easy to read.", "I would have liked to see the code snippets that were added to the UI, so that the reader could see what was done.", "Also, The screenshots are not very large, and the code is not very detailed.", "This is a good thing, despite that Also, The screenshots are not very large, and the code is not very detailed, but This would have been better to have the code in the UI.", "The code snippets are not well organized, and it would be better to use the Github diff view to show the code."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0]], "176": ["Students can also review their teammates, making use of the teammate review questionnaire, based on their contribution to the projects. When we use these questionnaires for reviews, for example the teammate review assessment we encounter a few problems. We add in a new Question type ‚ÄòCake‚Äô, which will be extended from the Scored Question model [cake < scored question < choice question < question]. Potential ways of displaying the Cake question on the UI: 1. Stars: Existing design for teammate reviews uses stars to symbolize the contribution provided by each student. We can implement the cake type using the same. The questionnaire for reviewing teammates includes the question asking the cake (contribution) factor. Ideally, the cake should include the reviewer himself as well. But after considering code that also involves teammate reviews, what we have observed is that every assignment has the option to render reports to the instructor - showcasing different types of reports such as Review Reports, Teammate Review Reports, Self Review Reports, Answer Tagging reports. If the existing self-review feature were to be implemented, the view for the Self Review reports would also contain self-teammate reviews, which would cause inconsistencies in rendering Self Review Reports, and does not help serve the purpose of a legible report. Consider Student8529, who has reviewed himself and his teammate Student8663. With the design approach taken for this project, when Student8529 reviews himself, the review would appear under the Teammate reviewed, under the Teammate review report. 1. Student: Fills out the reviews, and chooses answers in accordance with the Cake question type imposed restrictions, if there is one. The screen for the same when a cake type question is added to the teammate review is as shown below: <image> The cake type question will always have a green circle in the background, rending the score on top of it. In order to enable a student to review him/herself as a teammate we have implemented self reviews for teammate assessment. For example: In teammate review assessment, let there be a cake type question about the amount of contribution provided by each team member. After enabling self reviews, cake has to include the author as well. In order to implement the self review feature for teammate reviews we have added a column \"is_self_teammate_review_enabled\" to the assignments table. 1. Self reviews enabled 2. A student logs on to expertiza and clicks on an assignment 3. Then he clicks on your team link 4. He should be able to see his teammates and himself (for self review) under team members 5. Total contribution for a cake type question in a teammate review should include the contribution provided by the student in the self review as well. 6. If the contribution is exceeded, a warning should appear 1. Self review disabled 1. The link for a reviewer to review himself as a team member should not show 2. The cake type questions in the teammate review should include only contributions provided by the other team members 1. Context: If self review is enabled after the assignment has been created and a few students have already given reviews, then it should give a warning. 1. Self review enabled in the middle of the assignment 2. Add teammate review for teammate1 3. Add teammate review for teammate2 (make sure it adds upto 100%) 4. Enable self review as an instructor 5. As a student, notice that a new review button is visible in the ‚Äúyour team‚Äù page. 6. Click on review, try to add contribution for self and make sure a warning appears that says that the cake is already at 100% 1. Context: If self review is disabled after the assignment has been created and a few students have already given reviews. 1. Self review disabled in the middle of the assignment 2. Enable self review as an instructor 3. Add teammate review for teammate1 4. Add teammate review for teammate2 5. Add self review (make sure it adds upto 100%) 6. Disable self review as an instructor 7. As a student, notice that the review button is NOT visible in the ‚Äúyour team‚Äù page. The test cases pass, on creation of a review questionnaire and on creation of a questionnaire with different types of questions, including the cake type questions to the questionnaire rubric. In the current implementation of cake type questions, answer objects are tracked on the basis of teammate reviews or any other review, meaning, if the cake type question is part of a Teammate Review questionnaire, then instances of answer are tracked with respect to answers given by team members, otherwise all the responses for that specific question are fetched without any correlation between answer instances and team members. As part of future scope, if there are reviews other than teammate reviews that would need to keep a track of answer objects with respect to team members, then the implementation would have to also include that specific review scenario. With the current implementation, reviews that track answers round-wise, would not be accommodated with cake type question and can be extended for the same.", ["The document is very readable, but The document does not explain the design approach, or how the code was implemented.", "The document is not clear how the design was done, and the test cases are not described.", "the test cases pass, but the code is not described in any detail.", "that the test cases pass, but the code is not described in any detail is a very important part of the document.", "I would have liked to see the code snippets that were used to illustrate the changes made to the code.", "Also, the screenshots should be larger, so that the reader could see them all."], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0]], "177": ["For users intending to view the deployed Expertiza associated with this assignment, the credentials are below: 1. Instructor login: username -> instructor6, password -> password 2. Student login: username -> student4340, password -> password 3. Student login: username -> student4405, password -> password. It‚Äôs an open source project developed on Ruby on Rails platform and it‚Äôs code is available on Github. It allows students to review each other‚Äôs work and improve their work upon this feedback. It focusses on refactoring some of the more complex methods, modifying some of the language to make it more Ruby friendly, removing some redundant code. A couple of long and complex methods were refactored from this controller along with removal of some non-functional code and a few language changes to make it Ruby style. Three methods in particular, namely conflict_notification ,calculate_all_penalties and edit were found to be too long and were in need of refactoring into smaller, easier to manage methods. Few more compact methods were created for this purpose. There were no existing test cases for the controller. This is a helper class which contains methods for constructing a table(construct_table) and to check whether an assignment has a team and metareveiw(has_team_and_metareview). We worked on the following work items(WIs) WI1 : Refactor calculate_all_penalties method into smaller methods WI2 : Move the repeated code in conflict_notification & edit methods to a separate method list_questions. WI3 : Refactor the code as per the Ruby style guidelines and incorporate the good practices WI4 : Test the conflict_notification method to test the changes made. WI5 : Move the repeated code in view and view_my_scores methods to a separate method retrieve_questions. 1. Refactoring calculate_all_penalties method This is used to calculate various penalty values for each assignment if penalty is applicable. The following changes were made: 1. This method was very complex, performing too many functions within a single method and had to be broken into 3 smaller methods each having a more well defined function. 2. The following 3 methods were created after splitting the first method <code> 3. Changes were also made to make the code follow ruby style.The language was made more ruby friendly. 4. Finally some redundant code was commented out as it was non-functional. Refactoring into smaller more specific methods: <image> Removal of non-functional code : <image> Change of language to make it more Ruby friendly: <image> 1. Move the redundant piece of code from conflict_notification & edit methods to a new method list_questions The conflict_notification method is used to help the instructors decide if one of the reviews are unfair or inaccurate. This was again split into 2 methods with some part of the code which is repeated in another method refactored into a new method. <image> Refactored #Created a method which was a duplicate in conflict_notification and edit methods <image> edit method: This method is used to edit the questionnaires. This method again has code which is repeated in the conflict_notification method and thus the repeated section was split into a new method. <image> New method: Refactored #Created a method which was a duplicate in conflict_notification and edit methods <image> Similar refactoring was performed to obtain the retrieve_questions method: <image> This is the new method created after the above refactoring: <image>. There were no existing test cases for the GradesController. We have added a new spec file 'grades_spec.rb' which covers testing scenario for the newly added method. As the model was not changed, no test cases were added for the model. Following steps needs to be performed to test this code from UI: 1. Login as instructor. Create a course and an assignment under that course. 2. Keep the has team checkbox checked while creating the assignment. Add at least two students as participants to the assignment. 3. Create topics for the assignment. 4. Sign in as one of the students who were added to the assignment. 5. Go to the assignment and sign up for a topic. 6. Submit student's work by clicking 'Your work' under that assignment. 7. Sign in as a different student which is participant of the assignment. 8. Go to Assignments--><assignment name>-->Others' work (If the link is disabled, login as instructor and change the due date of the assignment to current time). 9. Give reviews on first student's work. 10. Login as instructor or first student to look at the review grades. 1. The construct_table method in GradesHelper is not used anywhere. It has no reference in the project. method in GradesHelper can be broken down into separate methods, one each for team and metareview.", ["The writeup is very readable.", "The writeup describes the changes well.", "the changes are described in detail.", "However, the test plan is not described.", "that However, the test plan is not described is a major concern.", "There are no screenshots of the tests.", "They are just shown in a list.", "I would have liked to see They described in more detail."], [1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]], "178": ["The goal of this project was to add RSpec tests for the functionality added for project <link> . The changes submitted by project E1948 can be found <link> . See the Test Outline section to see the specifics of our testing work. For this project, our plan was to write new RSpec tests for new methods added in project E1948 for ReviewMappingHelper. In total, our team wrote 34 tests to cover the 8 new methods created or altered methods. These 8 methods are listed below. See the Test Outline for more details on the RSpec tests written these methods. This section shows the RSpec test we created for each of the methods defined in Relevant Methods above. The full test file can be found <link> . This method gets review and feedback responses for all rounds for the feedback report. Before testing this method, RSpec sets up an assignment, a review, and a reviewee. Then it creates 2 responses from the reviewer (one for each of the initial 2 rounds). During testing, these RSpec tests assures this method returns the correct amount of responses for each round. In this scenario created, each round should return 1. There is an additional two tests in this RSpec feature, testing to see if a 3rd round returns nothing if there was no response created (which there is not a 3rd response pre-setup. Likewise, there is an additional test where it creates a third response and assures that this method returns 1 for round 3. Setup <image> Tests <image>. This method gets the review score awarded based on each round of the review. Before testing this method, RSpec sets up an assignment, a reviewer, and a reviewee. Then it assignments 3 scores (one for each round) given by the reviewer. During testing, these RSpec tests check to see if this method returns the correct awarded score for each round requested. Setup <image> Tests <image>. This method checks the submission state within each round and assigns team color accordingly. The check_submission_state method calls the submitted_within_round? method to check if the submission was made in the current round and if yes then the purple color will be assigned to the team. One of the test cases tests this feature that purple color is being set or not. If no link was included by the team in the submission or the link is not a wiki link or the assignment was not submitted within the round, then the team will be assigned green color. These conditions are also being covered in the tests below. Setup <image> Tests <image> <image>. This method is a helper method for get_each_review_and_feedback_response_map. It sets the instance variables @review_responses_round_ and @feedback_response_maps_round_ after calculating the number of responses received by the team after each round. This method should return the corresponding response map associated with each round of review. The initial setup to test this method includes creating a reviewer, creating responses and review_response_map_ids. The tests check if the correct response map is returned or not for each round. Setup <image> Tests <image>. This method is a helper method for _team_score.html.erb view. It sets the metrics, namely min, max and avg score value for all reviews for a particular round and team. In the setup for the Rspec test, we create assignment, due dates for 3 rounds, student, reviewee, reviewer and user. We have 3 test cases each for round 1, round 2 and round 3. Setup <image> <image> Tests <image>. This methods checks if the link submitted for evaluation has been updated or not since the last round. The method takes in parameters round, due date and link updated time and compares the dates to check whether the latter for before the former time. The method returns false if it's not updated and true otherwise. The setup for this rspec test included creating an assignment and creating 2 rounds with corresponding due dates along with a reviewer and reviewee for the same. The first test case asserts that the method returns false when link is not updated. The second test case asserts that the method returns true when the link is updated within the due date. Setup <image> Tests <image>. 34 out of 34 tests in the review_mapping_helper_spec.rb test file. URL link of video of review_mapping_helper_spec.rb tests running and passing:- <link>. 1. We refactored get_review_metrics to get_review_volume, as per request from the professor <image> 1. We refactored get_team_colour & obtain_team_colour to read get_team_color & obtain_team_color, as per request from the professor <image> 1. We refactored calcutate_average_author_feedback_score to calculate_average_author_feedback_score, as per request from the professor <image>. <image> <image>.", ["The writeup is quite readable.", "The writeup explains the changes well, and the tests are described well.", "However, the test plan is not described in prose, and the test plan would have been better to use the Github diff view to show the changes made.", "the test plan should be described in more detail.", "Also, the screenshots are not very large, and the screenshots are not clearly displayed."], [1.0, 1.0, 1.0, 1.0, 0.0]], "179": ["Description of the current project This project is intended to make Bookmarks more user-friendly, credible and valid. Bookmarks in expertiza are created by reviewers and can be used by authors for their work on any project. On each line of the signup sheet are two icons, one for adding a bookmark to the topic, and another for viewing bookmarks on the topic. If the instructor allows the participants to create bookmarks, then only a participant has access to create and view them. He should be able to create a new Bookmark only if he enters a valid one. Problem 1 : When a user after logging into expertiza wants to add a new bookmark or view existing bookmarks for the available projects, he will click on the buttons against the specific title. Once he goes to either 'Create New Bookmark page\" or \"View existing bookmarks page\", he's not able to go back to Sign-up sheet using \"back\" button. <image> Enhancements to this problem : We can go back to Sign-up sheet after clicking on \"back\" button. <image> Problem 2 : If a user clicks \"Add Bookmarks\" button, he will be navigated to a \"Add a new bookmark page\" where he can give details of new bookmark (like URL, description etc ). <image> After creating an empty bookmark, we are displayed this message as below in the figure. <image> Problem 3: When the instructor doesn't give access for participants to add/view bookmarks, the participants are still able to access them. He un-checks \"Allow participants to add bookmarks\" button and participants are still able to access them. <image> Enhancements to this problem : Now,if the instructor un-checks the button \"Allow participants to create bookmarks? \", the actions View and Add Bookmarks are no longer visible/accessible. <image>. 1. app/views/bookmarks/list.html.erb : This file is a view for listing the existing bookmarks of a particular Title of the project. 2. app/views/bookmarks/new.html.erb : This file is a view for creating a new bookmark - (A valid one). 3. app/views/sign_up_sheet/_actions.html.erb : This file is a view for showing the actions against the title of the bookmark. 4. app/controllers/bookmarks_controller.rb : This file has the code regarding the access that instructor gives to students regarding Bookmarks. a) Back button for the page \"View Bookmark\" and \"Create Bookmark\" was resolved. 1. Login with the credentials to expertiza. 2. Go to 'My assignments' and select OSS Project/writeup. 3. Select 'Signup sheet'. Select a title and choose either 'View Bookmark' or 'Add Bookmark' button 5. If you choose 'View Bookmark', after viewing, press the back button to go back to Signup sheet. 6. You will land up in Sign-up sheet page. 7. If you choose 'Add Bookmark', you can add by giving Bookmark details and save it. 8. Now press back button. 9. You will land in Sign-up sheet page. b) Creating Blank(Empty) Bookmarks problem was resolved. 1. Login into the expertiza with the credentials. 2. Go to 'My Assignments' 3. Select OSS Project/writeup 4. Now choose the \"Sign-up sheet\". 5. You will be displayed with titles to all available OSS projects. 6. Choose the one for which you want to create/add a bookmark. 8. You should be given a warning saying \"Error occurred while creating bookmark. 9. You will still remain in the same page unless you press 'Back' button. c) Issue of having the access to create the bookmarks even though instructor denied the access was resolved 1.Login to expertiza as instructor. 3. Select OSS Project and to edit. 4. Click on 'Topic' button and see if the 'Allow participants to create bookmarks' is checked or not. 6. Now login into expertiza as student and select 'My assignments' 7. Click on OSS project/writeup. 8. Select 'Sign-up sheet' and you see all titles available for OSS projects. 9. Against each title, you can't see any buttons to either add/view bookmarks. 10. You can now repeat the process by checking in the button and see if the add and view button against the titles are accessible/not. 1. A questionnaire can be built to grade a bookmark. Questions maybe like \" How helpful was this bookmark? \", \" Did you use this bookmark for your work? 2. A reviewer should be recognized or credited if he added useful bookmarks i.e if the author has made use of the bookmark. 3. A function to add extra credits automatically if a participant had submitted more than threshold number of useful bookmarks.", ["The document is very readable.", "The document explains the changes well.", "The screenshots are very useful.", "However, the code changes are not described in prose.", "the code changes are just shown in a list of files.", "that the code changes are just shown in a list of files is not very helpful.", "I would have liked to see the code snippets in prose, so that we could understand what was done.", "Also, The screenshots are not very large.", "There is a lot of text, which is hard to read.", "You could have used a font that would have been easier to read."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0]], "180": ["If one respond to the advertisement, a join team request will be created and the topic holder can see it on ‚ÄúYour team‚Äù page. After a student gets a team and the team is not full, (s)he should also be able to send invitations to others. Fix Issue #227 : If user 'A' got a topic and user 'B' got no topic, then if A join B‚Äôs team, A‚Äôs topic is dropped and A and B end up with a new team with no topic. A user who is enrolled in an assignment and has a topic, can advertise for more team members. When another user goes on the 'your team' link, who is enrolled in the same assignment but doesn't have a team and topic yet, he will be able to see the team advertisements by other teams. This request goes to the team who had posted that advertisement. The request can be approved or denied by the team members. If there is an entry in the \"join_team_requests\" table for a user, then (s)he can only see advertisements if the corresponding \"status\" is \"D\", which implies that this user is not yet part of a team. If a user has an assignment and a topic only then (s)he will be able to advertise for team members to join their team. If a user doesn't have a topic (s)he won't be able to advertise. The scenario in which A, B were two users, A with a topic, B without a topic, A joins B's team but A's topic gets dropped; A,B become a team but with no topic. Such cases are now avoided as we have ensured that without first selecting a topic a user cannot advertise for team members nor can he send invitations to other users to join his team. If (s)he has a topic then he'll be able to see the option for advertising for teammates. If the assignment doesn't have a topic then the user will be able to send out team invitations. 1)Login as Admin, create an assignment with all the necessary details like maximum no of users per team, add topics for the assignment, enroll users(students) in the assignment. 2)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. You should be able to see the assignment now in the Assignment section. 3)Since A doesn't have a topic yet, so you won't be able to see the advertise link. 4)Go to the sign-up sheet for the assignment, select a topic. A now has a topic, so now A can advertise for team-members. 6)Login as another user(Student) or impersonate another student, say student B, whom you have enrolled in the assignment. 7)Since B doesn't have a topic yet, so you won't be able to see the advertise link. 8)Go to the sign-up sheet for the assignment, you'll be able to see a trumpet icon next to the topic that has an ad posted. 9)Click on the icon, you'll see the ad posted by A. Click on request to join A's team. 12)Login as user A or impersonate A, now you'll be able to see the team join request sent by user B. And now if you login as B or impersonate B, you will no longer be able to access the trumpet icon which is a link to all ads pertaining to topics the concerned assignment. 14)Had user A declined User Bs join request, the status in the table \"\" would change to \"D\", that means user B still doesn't have a team. So, now if you login as B or impersonate, you'll be able to see the ads again. 1)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. 2)You should be able to see the assignment now in the Assignment section. Since A doesn't have a topic yet, so you won't be able to see the advertise link. 3)Go to the sign-up sheet for the assignment, select a topic. A now has a topic, so now A can advertise for team-members. 4)This ensures that for an assignment with topics, a user can send out advertisements only if (s)he has a topic. 5)Login as Admin, create an assignment with all the necessary details like maximum no of users per team, do not add topics for the assignment, enroll users(students) in the assignment. 6)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. You should be able to see the assignment now in the Assignment section. 7)Since the assignment doesn't have any topics, therefore, you will be able to see the advertise link. You won't see a sign-up sheet since the assignment has no topics.", ["The writeup is quite readable.", "The writeup explains the changes well, and explains the rationale for them.", "However, the screenshots are not very useful.", "the screenshots are just pasted in, without any explanation of what the screenshots are doing.", "the screenshots are also not very large, and the text is not very readable.", "the screenshots should be larger, so that the reader can see the screenshots in full.", "Also, the code snippets are not well organized.", "that Also, the code snippets are not well organized is a major issue.", "I would have liked to see the code be organized in a more readable way."], [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]], "181": ["<link>. The instructor needs to watch teams being formed, and every time a new team is formed, a new mentor needs to be assigned, outside of Expertiza. This leads to a lot of work for the instructor, as well as sometimes long delays before a team is assigned a mentor. 3. When a team reaches a target size of greater than 50% of the maximum teammate capacity, then: 1.1. A mentor will be assigned to this team and notified via email. 1.2. Participants in an assignment will be identified as mentors via their participant permissions ( <link> ). Anyone with ‚Äúmentor‚Äù permission for an assignment is eligible to be automatically assigned to mentor a team when a new team is formed. Develop a trigger that: 1. Is activated when any team has been formed that has k members, where k is greater than 50% of the maximum team capacity 1.1. ex: max members = 4, trigger activated when the team size reaches 3 2. Assign a mentor to the team 1.1. Mentors should be evenly assigned to teams, so a good strategy is to assign the mentor who has the fewest teams to mentor so far. 3. Notify the mentor via email that they are now assigned to a specific team, and provide the email addresses of the team members. 4. Possibly notify the team members that they have been assigned the mentor with contact information (further discussion here). The mentor assignment feature has a few preconditions and assumptions which have been outlined below. 1. An instructor has already added an assignment without topics. 2. ‚Äúmentor‚Äù permission exist 3. There are users in said assignment with mentor permissions. 4. A mentor has yet to be assigned to said assignment. 5. Mentor assignment is done only once, does not take into consideration drop offs. <image> <link>. The value will be only present if the mentor has been automatically assigned. <image> <link> The instructor view will also need to have visibility of what mentors the teams have. <image> <link>. 1. <link>. <image> <link>. 1. <link> <image> <link> 2. <link> <image> <link> <image> <link> 3. <link> <image> <link> 4. <link> <image> <link>. This will allow for the auto assign mentor feature to be disabled if the instructor does not want the work flow executed for the assignment. One trigger had to be added to invitation.rb so when users accept invitations to join a team the mentor management logic can execute. 1. <link> <image> <link> 2. <link> <image> <link> 3. <link> <image> <link>. Two views were updated in the Expertiza application to allow the user to see who the mentor is on their team. This also had to be done in two places, since the instructor view of a team is different than the student's view of the same team. 1. <link> 2. <link>. <image> <link>. 3. Impersonate the student account you found.If there is no team, create one by inviting other student to your team, or create a team using the admin control. 4. By toggling the Auto assign mentors when team hits > 50% capacity? in the assignment configuration page you will be able to: 1.1. Enable the functionarities and logics that our team implemented. 1.2. Disable the functionarities and logics that our team implemented to allow an admin to assign mentor manully. 1. Add team members to any team under the Rock on Assignment using any following way: 1.1. Invitate/Accept the team invitation using impersonated student accounts. 1.2. Add student to team by using the admin control. 2. Observe that when the member size passing the capacity (3 for this Rock on assignment), a mentor called Student6801 will be added to the assignment team. 3. Remove the mentor and the added students of the assignment team using the admin control. the second team member added), a mentor will not be added to the assignment team. 5. You should also be able to see that mentor is showing on the team list. 1. By doing similar step as we mentioned above, you should not see any of the following: 1.1. A mentor is added to the team after the team size changed. 1.2. A mentor is displaying on the team list unless this mentor account: Student6801 is manually added or invited. 1. A team will have a mentor after addMentor is called. 2. A team will have a mentor removed after removeMentor is called. 3. The mentor with lowest number of team assigned will be return after selectMentor is called. 4. The selectMentor except not to receive any message if a team already has a mentor. 5. The selectMentor except not to receive any message if a team has size < 50% of the maximum size.", ["The document is quite readable.", "The document explains the changes well, and explains the rationale for the changes.", "The only thing I would have liked to see is a description of how the code was changed, and how the changes were made.", "that The only thing I would have liked to see is a description of how the code was changed, and how the changes were made is not a very useful description of the changes made.", "This would have been better to link to the code in Github, where it would be easier to see what was changed."], [1.0, 1.0, 1.0, 0.0, 1.0]], "182": ["The student_task/list page is the page displayed to a student after logging in into expertiza. 1. Show the record of each group collaborator(s) for each course. Another div is to display all the assignments and their information, include Assignment, Course, Topic, Current Stage, Review Grade, Badges, Stage Deadline, Copyright Grants and Make Public. Original page before modifying showing below, all the courses and all the assignments are displaying in the same table, and badges have own column. <image> <image>. Here are some existing problems and unclear parts of the pageÔºö 1. Problem1 : Consider the cases where a student might be enrolled in assignments from more than one course. In this case, assignments should be grouped by course, with the course name given before the listing of the first assignment. 1. Problem2 : Remove the column for Review Grade because it makes no sense, change Review Grade to Submission Grade. Show the actual score and show the blue button. 1. Problem3 : Delete the badges column, and if the Assignment has a badge, mark it directly next to the assignment name under the assignment column. Fixing app/views/student_task/list.html.erb original code of how to display course are showing below <code> In order to group the courses, we added a group_by method to find out which courses does this assignment belongs to, and group the assignments that has the same courses name at one table. The modified code is showing below. <code> We will print out the course name as each table head, group the assignments, and we take down Course coloum from table content since the course name is already showing as table head. Also, for the assignments that have not assigned to a course, we will print out No Course Assigned Yet . 1. Fixing app/views/student_task/list.html.erb 1. app/helpers/student_task_helper.rb For this problem, first, we change Review Grade to Submission grade, which only need to modify <code> to <code> on list.html.erb. Second, we change how we display the score. Original code is showing below <code> In the original code, each grade is assigned to /100, which is not correct because not every assignment has 10 reviews (one review count for 10 point). Since we need to display the current score on the page, we need an array to carry the current score and display it on the result. The modified code showing below. <code>. Fixing app/views/student_task/list.html.erb Since not too many assignments are able to get badges, that make badges column barely have contents. Therefore, we display it after the assignment name and delete Badges coloum. If one student gets a badge, it will display a small picture after the badged assignment. Hover over your mouse on it, and it will display the information about this badge. <code>. <code> <code>. Page showing right now <image> <image>. Since when no assignment was assigned to the student, it should not show the table content on the page. Change from <code> to <code> 1. Second, we modified spec/features/assignment_submission_spec.rb . In order to use the content inside of the original test file, we added a def function. The function is able to set up the database for testing needed, and test the necessary function from the student_task/list page. - The def function we added is showing below. <code> - Later on, we will use this list_page function on our test cases. It will show if the student_task/list page has the assignment name( Assignment1684 ) that we putted on the database. Also, since there are an assignment assigned to the student, we will expect page to have course table information ( eg. Assignment, Submission Grade, Topic, Current Stage, Stage Deadline, Publishing Rights ). Since the assignment was not being graded yet, on the submission Grade column it will show a N/A . We are using student student2064 as our user. Therefore, the page should show student2064 . We also assigned the student to team up with CSC517, test ( student_id, user type. user type will be test #random number ), and on the page it should show Students who have teamed with you CSC517, test#{n} . Next, the page should not contain other course name. Testing code is showing below. <code> 1. Next, we added a new file spec/features/student_task_spec.rb . However, instructor_interface_helper did not help us to sign up an assignment to the user. Therefore, we will testing if the user have not been signed up for an assignment, and the student_task/list page will only show the first div part. The course information table will not appear on the page. <code>. <image>.", ["The writeup is very readable.", "The writeup explains the changes well, and explains the rationale for them.", "However, The writeup does not explain the changes made to the code.", "the code is not well organized, and the screenshots are not very large.", "the screenshots are just pasted in, with no explanation of what the screenshots are doing.", "Also, the test plan is not described.", "that Also, the test plan is not described is a major problem.", "I would have liked to see a description of the tests.", "And the code is just past the code, with a single line describing what it does."], [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "183": ["For testing the changes made, the following credentials are recommended: 1. Instructor Login: username: instructor6 password: password This project does compile. It provides a platform to view assignments, manage teams, select topics and work on improvement through anonymous peer reviews. Expertiza allows the instructor to define different topics that students or teams could choose from as their assignment. Each topic can have 0 or more slots that indicate the number of students or teams that can be signed up for that topic. To improve the user experience when managing topics, the following tasks were identified: 1. Issue #971: Change create topic UI into AJAX 2. Issue #926: We need a way to sort topics by topic number in assignment#edit page 3. Issue #718: We should allow instructors to give feedback when accepting or rejecting topic suggestions. Currently, when instructors manually enter topics, they have to go back and forth between the list of the topic page (views>sign_up_sheet>_add_signup_topics.html.erb) and the create topic page(views>sign_up_sheet>new.html.erb). Adding a new topic can be done through an editable grid (see js-grid) without leaving the list of topic page, by making use of AJAX. The list should be automatically updated when a new topic is entered. <code> On the View ' app/views/sign_up_sheet/_add_signup_topics.html.erb' the following was added: <code> The content of the above tag is completely rendered via Javascript, where we use JSGrid for dynamically allowing users to Add, Delete and Update Topics on the same page. In ' app/assets/javascripts/signup.js ' file, the following was added: The following content shows how AJAX calls are handled/made to our signup controller so that the CRUD operations on the topics page is dealt with <code> The Preview View for Topics Management : <image> After Our Implementation using JS Grids : <image>. This task is to do with sorting the Topics according to the topic number. This functionality is taken care by Js-Grid by itself, where clicking the topic# will toggle the topics in the ascending/descending order. Sorting in Ascending Order: <image> Sorting in Descending Order : <image>. Instructors should be allowed to give feedback when accepting or rejecting topic suggestions. Earlier, feedback on topics suggested by students can be given only when the instructor wants the topic to be revised, not when (s)he is approving or rejecting it. In app/controllers/suggestion_controller.rb Including the text provided in the comment field, while approving the topic. This ensures that comments are saved when an instructor accepts a topic suggestion in the backend. <code> Including the text provided in the comment field, while rejecting the topic.This ensures that comments are saved when an instructor rejects a topic suggestion in the backend. <code> Only an instructor should be able to approve or reject a submission. Therefore, only for instructor role, approve and reject submission options will be provided. <code> Comments can be added even during topic approval or rejection. <image> Comments during approval or rejection get reflected in the feedback list. <image>. 1. Issue #971: Change create topic UI into AJAX 1. Login as an instructor. It will automatically go to the manage courses page 2. Click Assignments tab next to Courses 3. Select the assignment for which a new topic has to be added 4. Click the edit icon for the assignment and go to Topics tab 5. You will be able to see the topics list in a grid format. Click on add icon on the right side corner of the grid 6. You can also edit an existing entry by just clicking on that row in the grid without being redirected to a new page 1. Issue #926: Sort topics by topic number in assignment#edit page. 1. Log in as any user or instructor. 2. Go to the assignments list. Note: this is not the manage assignments for instructors. 3. Click into a finished assignment. 4. Click into a current assignment. 1. Issue #718: 1. Login as an instructor. It will automatically go to the manage courses page. 2. Click on the \"Manage Notifications\" link above the \"Courses\" and \"Assignments\" links. 3. You will be directed to a creation page for notifications. The notification will display on the first page the user is shown. It will disappear when they change or reload the page. Note: instructors on the management page will retain the notification if they switch between Assignments, Courses, and Questionnaires. This is because the JavaScript does not actually reload the page. If the assignment is found, it loads all the topics and checks if the rendered format is json along with a http status 'OK'. If the assignment is not found, an empty json is rendered.", ["The document is very readable.", "The document explains the changes well.", "The only thing I would have liked to see was a description of the changes made to the code.", "Also, the code snippets are not very long.", "the code snippets are just pasted in, with no explanation of what the code snippets are doing.", "that the code snippets are just pasted in, with no explanation of what the code snippets are doing is not a good way to show the changes.", "I would like to see the code in Github diff view."], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0]], "184": ["Currently we have a few classifiers that can detect useful features of review comments, such as whether they contain suggestions. The suggestion-detection algorithm has been coded as a web service, and other detection algorithms, such as problem detection and sentiment analysis, also exist as newer web services..but they need to be integrated properly using API calls in expertiza code. But later on we faced many issues such as: 1) The API call links were outdated 2) The new link that we found were incompatible with the previous work 3) The planned task of adding new API calls as per Carl Colglaizer's Framework turned out to be irrelevant or not required for this project, so we dropped it. So we decided to start with integrating these API Calls from scratch. Features we added in this project 1. Setting up a config file 'review_metric.yml' where instructor can select what review metric to display for the current assignments 2. Based on the selection made by professor, API calls (sentiment, problem, sugegstion) are made and a colorful table is displayed below the review form for student to review 3. The total time taken for making these API calls will be displayed below the table. This design pattern helped us achieve the decoupling and abstraction of implementation code base (makeARequest Function) of API call from the calling function (getReviewFeedback function). Later, refactoring of _response_analysis.html.erb partial further decoupled the implementation. Thus, in a nutshell, application of facade pattern along with some refactoring lead to a decoupled implementation of integration of all 3 API calls. <image>. In the partial view file _response_analysis.html.erb file, we added new javascript functions to make, process and display output of API calls. 1. review_metric.yml config file <code> <image> 1. response_controller.rb <code> <image> 1. response.html.rb <code> <image> 1. _response_analysis.html.erb - fetch_response_comments() function <code> <image> 1. _response_analysis.html.erb - getReviewFeedback() function <code> <image> 1. _response_analysis.html.erb - makeARequest() function <code> <image> 1. _response_analysis.html.erb - combine_api_output() function <code> <image> 1. _response_analysis.html.erb - generateTable() function <code> <image>. 1. <link> for problem metrics only 2. <link> for sentiment metrics only 3. <link> for suggestions metrics only. In order to make the API call, the partial view \"_response_analysis.html.erb\" is rendered in \"response.html.erb\" view file which will be responsible for sending a JSON input to the web service. The input will contain the review comment written by the user and when the student hits the \"Get review feedback button\" the comments will be sent to these api calls in the following json format: Below is a sample input <code> Once the request is sent, we expect the output to be in the following format: Sample Output: (for sentiment analysis API call) <code> Sample Output: (for problem detection API call) <code> Sample Output: (for suggestion detection API call) <code> These outputs (which is a JSON) will be parsed and the concerned metrics such as the sentiment, problem and suggestion will be extracted so the user will be able to view a summarized result of how well their review comments are. In addition, the result will be presented in a colorful tabular format to the user after they hit the \"Get Review Feedback\" button. Also, the total time taken for making these API calls will be displayed below the table. Rspec tests for the same have been written in response_controller_spec.rb <image>. 1. The functionality was written on the client side in javascript solely in _response_analysis.html.erb 2. To test this view, any type of review must be accessible as a student. 3. There is a button at the bottom of the review called 'Get Review Feedback'. 4. When pressing button, API calls are issued and the metrics will show up within the table (a sample of which is displayed below). 5. API calls are slow and will take time to process until the 'Loading...' text disappears. 6. You can modify the comments and click the 'Get Review Feedback' button again to get new feedback, that too can be achieved without the need of saving the review, but still saving the review first is a better option to approach this. 7. All the review feedback for the comments will be displayed in a colorful table. <image>. 1. <link> 2. <link> (the link is mentioned here for records. 3. <link> 4. <link> (make sure you change branch to 'beta' branch if the page doesn't load by default to beta branch) 5. <link>.", ["The writeup is quite readable, but The writeup could have been improved by including more code snippets.", "The screenshots are not very useful, and the code snippets are not clearly separated.", "The screenshots are just pasted in, with no explanation of what The screenshots are doing.", "It would have been better to use the Github diff view, which would have shown the code in a more readable format."], [1.0, 0.0, 1.0, 1.0]], "185": ["1. Renaming done on the UI as well as on the backend 2. Varible names refactored appropritely 3. Flash messages changed accordingly. The error which is raised is due to the following validation present in the model late_policy.rb. 1. After discussing with professor we have decided to increase the max penalty limit to 100 2. Added a flash error message in the create function of late_policies_controller.rb <code>. 1. Added a back link in which redirects the user to edit assignment page. 2. Saved the assignment object in a session variable when the user clicks on the the edit asignment icon 3. We also added a back button on index page since there was no direct way of going back to edit assignment page once a late policy was created. 4. We also added padding between the edit and delete links on index page <code>. While testing this issue we noticed that the functionality was working perfectly fine, however, it was not user friendly. 1. We decided to add a tooltip icon explaining how this functionality works 2. We also inproved its UI by adding the alignment and padding. 1. Added test file late_policies_controller_spec.rb with appropriate test cases 2. Added test file late_policies_spec.rb with appropriate test cases. 1. <link> 2. <link> 3. <link> 4. <link>. 1. <link> 2. <link>.", ["The writeup is quite readable.", "The writeup explains the changes well.", "The only thing I would have liked to see was a link to the code that would have been added to the wiki page.", "that The only thing I would have liked to see was a link to the code that would have been added to the wiki page is not a problem that has been fixed by the code.", "I would also have liked a link back to the UI, which would have explained what was done."], [1.0, 1.0, 1.0, 0.0, 1.0]], "186": ["<link> is a large project developed as a combined effort of students and faculty using the <link> framework. 0536558. Additional funding from the <link> <link> (LITRE) program, the NCSU <link> , the NCSU <link> Initiative, and the Center for Advanced Computing and Communication. Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.4. <link> 1.1.1. <link> 1.1.2. <link> 1.5. <link> 1.1.1. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.1.2. <link>. The goal of this project is to use both Bootstrap and AngularJS to improve the look of the entire Expertiza including the representations of buttons, tables, and other elements. Certain changes in design will also improve the efficiency of the web app when it comes to the amount of time it takes for a page to be loaded. We plan to improve the user experience by replacing the plain html buttons with stylish bootstrap buttons. To make the design of Expertiza consistent, our goal is to replace this plain-styled text with color coded Bootstrap buttons. The new design of Expertiza will include the fixed menu bar on the top of the page. As it can be seen on the screenshot, the user has scrolled down the page, but the menu bar is still visible on the top of the page, making it convenient for the user to navigate throughout the website. <image>. Please refer to the later part of this article: <link> for viewing the current design Now, when trying to open manage-courses, all records are loaded before rendering them onto the page, which takes too long time to load and is not responsive at all. Better practice is on Virgin American‚Äôs website: <link> When the website is representing the calendar, the price for each day is not actually loaded. <image> So in Expertiza, we can create several buttons for course semesters in the page. And if the list is still too long and takes a long time load, we can use a ‚Äòshow more‚Äô button ,or automatically load more data when the scroll bar reaching the end of the page, to minimize the content we need to load after one single mouse click. <image>. We will need to reduce the number of buttons. So we can replace them to 5 buttons with responsive design, that is, no redirecting happens after clicking on the buttons. <image>. Please refer to the later part of this article: <link>. That takes a long time to load and the length of review list is too long. <image>. As an assignment with a goal of improving the graphic design and responsiveness of Expertiza web application, this project mainly follows design patterns from two design pattern groups: structural and behavioral. Another structural design pattern that will be seen in this project is Front Controller pattern. While this pattern suggests that there is a single controller that takes all the requests, when we have both Rails and AngularJS coexisting, we can think of Rails framework as being the \"single bridge\" to the database from AngularJS's stand point. AngularJS, being an outstanding front-end framework, will interact with the user and pass all the request to Rails framework. Rails framework then queries/updates the database and provides AngularJS with the data. Finally, the third structural design pattern that this project follows is Module pattern. Modules are one of the essential constructs in the skeleton of AngularJS framework and, hence, this project is bound to follow module pattern. <image>. Since the large part of this project is to iterate through the database query and show the data to the user with a reduced delay, this project follows the well known Iterator pattern. This approach greatly improves the user experience since it does not leave the user waiting empty-handed until Rails framework completes the full query of the database. <image>. 2. Bootstrap will be applied for better user interfaces. <image>. 2. The database should not be executed before the user clicks on the button. 3. Bootstrap will be applied for better user interfaces. <image>. 1. The list is too long: if there are 20k users in the database, there will be 20k rows in this table in a one page! 1. Load only a given number of records to the view, such as 100 records, when accessing into this page for the first time.", ["The writeup is quite readable, but The writeup does not explain the changes made to the code.", "It is not clear how the code is organized, and the screenshots are not clearly displayed.", "The design patterns are not described.", "The design patterns are just shown, with no explanation of how The design patterns are implemented.", "that The design patterns are just shown, with no explanation of how The design patterns are implemented is a shame, because the design patterns should be described in more detail."], [1.0, 0.0, 0.0, 1.0, 1.0]], "187": ["This project works on improving the search functionality of Expertiza, by adding search bars if not present, introducing advanced search feature where user can search on the basis of more than one parameters and making the search functionality appear more elegant. 1. An instructor or administrator can search for a user by name, user-ID, or other characteristics. 2. An instructor should be able to search for assignments by name, due date, or other characteristics. 5. An instructor or administrator should be able to search for all the assignments that a particular user has participated in. In the current system workflow, we found that the user is unable to search in the Manage Users view. In the proposed workflow, we plan to enable the user to search by all the columns in the UI viz. The user will be able to apply multiple filters at a time and the output of the query will match all filters applied. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. However, the search is case sensitive. In the proposed system, the user will be able to search for an assignment using additional filters such as Creation Date and Updated Date along with Assignment Name. The user will also be able to apply multiple filters at a time and the output of the query will match all filters applied. To search for an assignment by Creation Date, the user will be prompted with a calendar where he can select a date and all the assignments created on or before the selected date will be displayed. To apply multiple filters, user can tap on the Advanced Search button available, adjacent to the Search button; a hidden div will then be rendered below containing textboxes for all the columns. All assignments that were created before the selected date for Creation Date or Updated Date columns and the ones that match other filters will be returned. A empty list will be returned if the search criteria doesn't match any records in the database. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. The existing system does not have a search functionality under Questionnaires. The user will be able to apply multiple filters at a time and the output of the query will match all the filters applied. To search for an assignment by Creation Date, the user will be prompted with a calendar where he can select a date and all the assignments created on or before the selected date will be displayed. To apply multiple filters, user can tap on the Advanced Search button available, adjacent to the Search button; a hidden div will then be rendered below containing textboxes for all the columns. All assignments that were created before the selected date for Creation Date or Updated Date columns and the ones that match other filters will be returned. A empty list will be returned if the search criteria doesn't match any records in the database. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. The existing system does not have a search functionality under Reviews. The user will be able to apply multiple filters at a time and the output of the query will match all the filters applied. The user will be able to apply multiple filters at a time and the output of the query will match all filters applied. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. 1. Search by user name 2. Search by user name that does not exist 3. Search by user email 4. Search by user email that does not exist 5. Search by user email containing a substring 6. Search by user full name 7. Search by user full name is empty 8. Search by user name and email 9. Search for assignments participated. 1. Search by user name 2. Search by institution 3. Search by creation date 4. Search by updated date. 1. Search by name 2. Search by courses used in 3. Search by assignments used in. 2. Search by score 3. Search by text comment length 4. Search by reviewer and reviewee.", ["The document is quite readable.", "The document explains the changes well, but The document would have been better if the design doc had included more screenshots of the changes made to the code.", "more screenshots of the changes made to the code are not very large, and the textboxes are not clearly defined.", "the design doc should have included a description of the design of the new functionality.", "The document also should have explained how the new filters work."], [1.0, 0.0, 0.0, 1.0, 1.0]], "188": ["The scores for different users, participants and teams for several assignments belong to different courses are calculated for multiple views. This code needs to be made faster. Requirement: Participant.find(participant id).scores # should return a Hash or new object, with a single database query. This method should return the scores of a participant from all the assignments in which the participant has submitted. 1. Participant already has its own participant id. Each user has a different participant for each assignment so we do not need to take participant id as the parameter. 2. This also means it should return a hash that will contain the scores of all the assignments in which this user is a participant since participant id changes each time. A new view was required since this view did not exist previously. A new link has been added to the user's homepage: <image> On clicking on this link, the user will be able see his scores for all the assignments he/she has participated in. This is a new view and will look as below: <image>. We needed to write a method and add a view that computed and displayed the scores of a user across all the assignments user has participated in. We added a new method all_scores in the grades_controller.rb. This method executes the following steps: 1. :Executes the below sql query: <code> The user_id is of the current user is passed as a parameter to this query. Once the hash is created and populated accordingly, this hash is used by the view to display to the user. Requirement: assignment.scores # should return a Hash or new object, with a single database query. This method should return scores of all the participants in an assignment. Instead, we get the scores in the query itself thereby reducing the complexity of the code. 2. The previous code was calling several methods that computed the different parts of the score in a loop. We tried to reduce this by having the database query (wherever possible) do most of the work for the method and the method just populate the hash. 3. Even though the single query approach works faster, for assignments that have a lot of responses, we noticed that the code still took some time to complete. The query in itself runs fast (when executed directly on the SQL server). The scores are computed in the get_scores method of the assignment.rb. For all quiz questionnaires taken by the participant, get all the quiz responses. Create a hash and store the score computed by calling Score.compute_quiz_scores. The total score is then calculated and stored in the hash by calling compute_total_score for each participant. 2. For all teams that participated in this assignment, get the scores into the hash by calling Score.compute_scores for each assessment and questions. Each of them might query the database adding to the time taken. We refactored this code to have the following steps: 1. Created an empty hash before hand. 2. Run a single SQL query that will return all the data required by the hash. 3. Loop through the result set to populate the hash. This speeds up the code since there is only a single SQL query that will get executed. The query is outside the loop and hence reduces the time required. The old code and the new code were tested against the same database, on the same machine and network and it was observed that there was a significant reduction in time taken to get the scores. Snapshot of the time taken for the previous method: <image> Snapshot of the time taken for the method after the above changes: <image> As can be observed, the improvement is significant. Requirements: Add a method course.scores which should return a Hash. This method should return scores of all the participants enrolled in a course. 1. We needed to get the scores of all users for all assignments for a given course. A new view was required since this view did not exist previously. This view will be displayed on clicking on the View Scores option in the Actions panel of the courses as highlighted below: <image> On selecting the highlighted option above, the following page will be displayed: <image>. We needed to write a method and add a view that computed and displayed the scores of all users that have enrolled in a course. This method does the following steps: 1. Creates an empty hash. 2. Runs a single SQL query as below: <code> The course id is passed as a parameter to this query. 1. The result returned from the query is used to populate the hash. This hash is then used to display the different parts of the view. 3. Avoided method calls where values could be obtained in the same SQL query itself. 2. The SQL queries could be compiled into database views. However, if such is required, the query can be made into a database view. 3. The view_my_scores method in the grades_controller can also be made similarly fast by replacing multiple database queries and loops with a single query.", ["The document is very readable.", "The document explains the changes well.", "the changes are described in detail.", "However, the changes are not described in prose.", "the changes are described only in snippets, with no explanation of how the code works.", "that the changes are described only in snippets, with no explanation of how the code works is not very helpful.", "For example of that that the changes are described only in snippets, with no explanation of how the code works is not very helpful : the test plan is not described.", "There is no description of the tests.", "Also, the screenshots are not shown in The document.", "I would have liked to see a description of how they were tested."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0]], "189": ["<link> is an <link> <link> application designed to support team/individual student projects which involves team creation, project sign up, project submissions, document upload (almost any format), and carry out multiple peer review processes for learning and educational purpose. This Open Source application can be cloned from <link> , the latest active branch is <link> . <link> supports email functionality within a Rails application, which involves sending and receiving emails from and to an application. Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.4. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.6. <link> 1.1.7. <link> 1.1.8. <link>. Another major issue is the migration issue from <link> to <link> as a result of which many of the unsupported features for Rails 4 have stopped working. Expertiza has two different Mailer implementations based on type of <link> : Synchronous events and Asynchronous events.<ref> <link> </ref> The synchronous events refer to events that should be immediately notified. All synchronous events are triggered by <link> and the call is made to app/mailers/mailer.rb (formally as model in /app/models/) via the sync_message() method call. Here mailer.rb extends <link> class. The required email template has been added for both generic_message and sync_message method calls. They are sync_message.html.erb and sync_message.text.erb <code> 3. Correct <link> and <link> codes have been added to app/views/mailer/generic_message.html.erb 4. The following line in the sync_message(defn) method has been commented out from app/mailers/mailer.rb in order to encode email correctly.<ref> <link> </ref> <code> 5. The following method calls in the following files have been changed. a) app/controllers/grades_controller.rb b) app/models/courses_users.rb c) app/models/participant.rb Original: <code> Changed: <code>. The asynchronous events are registered to <link> object and a <link> server must be activated to carry out the task. The DelayedMailer class acts as a wrapper class (i.e., adapter pattern <ref> <link> </ref>) to the Mailer class in the /app/mailers/mailer.rb via the delayed_message() method call. These events are added to the <link> by Delayed::Job.enqueue() command. Each event as record is stored in the delayed_job table, which can be browsed on <link> . Most of them are database migration files. To eliminate future table creation issues with <link> gem, we have also changed the integer byte length of <link> tables from 10 to 8 and have revised the <link> methods inside the migration files to improve efficiency. <code> Changes to data migration files are illustrated as follows: Original: <code> Changed: <code> Detailed code changed can be found at <link> . The <link> implementation was done via <link> gem <ref> <link> </ref> but it has not been parsed correctly. 2. The following lines have been added to Gemfile <code> 3. The following parsing errors in app/controllers/assignment_controller.rb have been corrected. Original: <code> Changed: <code> 4. The following code in ap/views/assignments/edit/_rubrics.html.erb has been changed. Original: <code> Changed: <code>. <link> is a <link> framework for <link> programming language. Inspired by <link> , it resembles a <link> specification. To test the emailer features, we have restored <link> test cases for both delayed_mailer.rb (asynchronous maier) and mailer.rb (synchronous mailer). Currently, the fixture<ref> <link> </ref> files are not completed and loading them into the test database may cause failure for the test, so we recommend to comment out the following line in the /spec/rails_helper.rb <code> Future developers must take extreme care to make sure all fixture files work before enable this option. <code>. 5. Enter your <link> server account settings in config/environments/production.rb file. 6. Start the rails server by entering <code> 5. Start the delayed_job server by executing <code>.", ["The writeup is very readable.", "The writeup describes the changes well.", "The code changes are described well.", "The test plan is not described well, but the code is described well enough.", "I would have liked to see the code snippets in the \"before\" and \"after\" sections of the code be separated.", "This would have made it easier to understand what was done.", "Also, The test plan should have been described in more detail."], [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0]], "190": ["Student should be able to navigate to that page through the link provided in timeline. <image> 1. Viewing the timeline 1. Use case id:1 2. Use case description: View timeline in 'Your work' page of selected assignment 3. Actor: Student 4. Precondition: Student should be logged into Expertiza 5. Post condition: Student can view the due dates and timestamps of the activities, if any. 2. Viewing the due dates 1. Use case id:2 2. Use case description: View due dates only when no submissions have been made 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment 5. Post condition: Student will view only dues dates in timeline when no submissions are made. 3. Viewing hyperlink submissions in timeline 1. Use case id:3 2. Use case description: View hyperlink with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have made a hyperlink submission 5. Post condition: Student will view hyperlink of the submitted link with timestamp in timeline 4. Viewing files uploaded in timeline 1. Use case id:4 2. Use case description: View file name with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted a file 5. Post condition: Student will view file name with timestamp in timeline and would be able to download the file upon clicking on filename. 5. Viewing links to submitted reviews with round number 1. Use case id:5 2. Use case description: View review links with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted a review 5. Post condition: Student will view review link with timestamp and round number in timeline and would be redirected to the review submission upon clicking on the link. 6. Viewing links to author feedback 1. Use case id:6 2. Use case description: View author feedback links with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted an author feedback 5. Post condition: Student will view author feedback link with timestamp in timeline and would be redirected to the author feedback submission upon clicking on the link. Currently when a student logs into Expertiza, he could see the student task list page. In this project, a timeline in the student task list page would be added to navigate student to the due dates and the necessary links easily and keep a track of them. After the addition of the functionality, the student task list page would have the timeline as shown below. Timeline feature is used to display timeline with due dates, submitted links, submitted files, self review, reviews performed(multiple rounds) and Author Feedback. 1. When the student doesn't submit the assignment on time , due date passed would be shown in the timeline. 2. If the hyperlink submitted by student doesnt get submitted properly, it would not show any link to hyperlink on timeline. <image> <image> <image> Testcase 1: A hyperlink is submitted and expect to find 'submit Hyperlink' in the student task page. Testcase 2: A file is submitted and expect to find 'submit File' in the student task page. Expect to find 'round 1 review' in the student task page. Check timeline for 'submit Hyperlink', 'submit File' and 'round 1 review'. <image>. 1. Step1 : Login to Expertiza as Student 2. Step2 : Click the Assignments Tab 3. Step3 : Select an Assignment of choice 4. Step4 : Select 'Your Work' Link and the Timeline would be displayed with only due dates <image> 1. Step5 : Submit a hyperlink in 'Your Work' 2. Step6 : The hyperlink submitted would be refelcted in the Timeline along with the Timestamp. <image> 1. Step7 : Click on the hyperlink displayed which would redirect to the submitted link page. 2. Step8 : Upload a File in 'Your Work' 3. Step9 : The uploaded filename would be reflected in the Timeline along with the Timestamp. <image> 1. Step10 : Submit a review 2. Step11 : The submitted review link would be reflected in the Timeline along with the Timestamp and Round number page. <image> <image> 1. Step12 : Click on the review link displayed to be redirected to the submitted review link page. 3. Step14 : The submitted feedback link would be reflected in the Timeline along with the Timestamp. <image> 1. Step15 : Click on the round review link displayed to be redirected to the submitted feedback link page.", ["The writeup is very readable, but The writeup does not explain the changes made to the code.", "It is not clear how the code is changed, and the test plan is not described.", "the test plan should be described in more detail.", "Also, the screenshots are not clearly displayed.", "the screenshots are just pasted in, with no explanation of what the screenshots are doing.", "that the screenshots are just pasted in, with no explanation of what the screenshots are doing is a shame.", "I would have liked to see the code snippets be shown in a larger font, so that the reader could see them all."], [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0]], "191": ["Once someone has peer reviewed a project, the authors of the project can also provide feedback for this review, called ‚Äúauthor feedback.‚Äù While grading peer reviews, it would be nice for the instructors to include the author feedback, since it shows how helpful the peer review actually was to the author of the project. Expertiza allows instructors to view kinds of reports of assignments in their courses such as submissions, scores, and review reports. To improve the report views, some table columns such as team name, score, the average should be made sortable by using the same existing sort library. Workflow <image>. We have to sort ‚ÄúReview done‚Äù, ‚ÄúTeam reviewed‚Äù, ‚ÄúScore awarded/Avg score‚Äù. in the ‚Äúview review report‚Äù table. <image>. We will be using tablesorter function of jQuery to sort the table.To sort the columns that have constraints, custom scripts will be created. Tablesorter supports custom sorting. By default the sorting is disabled on the columns, we must enable sorting on those columns in order to make it sortable. Three types of scenarios may arise: 1. Sorting by columns alphabetically - To sort the columns alphabetically, the table-head attribute must include sorter-true class with it. 2. Sorting by date - Sorting by date includes creating a generic format for all dates(mmddyyyy). This generic format will be used to parse dates and sorting will be done based on this format. For ‚ÄúAuthor feedback report‚Äù table, we have to change the header name ‚ÄúReview response rejoined‚Äù to ‚ÄúReview responded to‚Äù and ‚ÄúLast rejoined at‚Äù to ‚ÄúLast responded at‚Äù. Then, sort ‚ÄúRejoinder‚Äù and ‚ÄúReview ‚ÄúReview responded to‚Äù as string (alphabetically), sort ‚Äú# author feedbacks done‚Äù by the first number then the second number (same as ‚ÄúReview done‚Äù in the ‚ÄúView review report‚Äù table) and sort ‚ÄúLast responded at‚Äù as date. We will use tablesorter function of jQuery to sort the table. To sort the columns that have constraints, custom parser will be created and used on top of tablesorter. <image>. Add a header, ‚ÄúReports for [name of assignment]‚Äù at the top. We will add header on top of Dropdown menu. <image>. For Author feedback reports, when no feedback has been submitted by any student, the names of the participants appear in a strange horizontal format. Fix this so that the formatting is correct, regardless of how many participants have done author feedback. <image>. <image>. We added jquery tablesorter in the script section to sort the columns. We had to enable the sorting on various columns so we added \"sorter-true\" in class of all the table headers. <image> <image> <image> <image>. We used jQuery tablesoter to sort the data in app/views/reports/_feedback_report.html.erb. We created custom parser to sort the dates in the last column and placed it tablesorter script. Due to blank columns the tablesorter threw an error. When the sorting is done based on rejoinder column, student data in rejoinder column will be hidden. While sorting on other columns, data in rejoinder column will be made visible. <image> <image> <image> <image> <image> <image> <image>. We added a header on top of Dropdown menu. <image> <image>. For Sorting Review Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select Review Report from Drop-down menu. 5. Sort the columns by Clicking on it. For Sorting Author Feedback Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select Author Feedback report from Drop-down menu. 5. Sort the columns by Clicking on it. For Sorting Teammate Review Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select teammate review report from Drop-down menu. 5. Sort the columns by Clicking on it. For Missing Header on View Reports 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. For Rendering Proper Format in Author Feedback Report 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. From drop-down menu select Author Feedback Report.", ["The writeup is very readable.", "The writeup explains the changes well, and explains the rationale for them.", "The only thing I would have liked to see is that the \"sorter-true\" class should be included in the table headers.", "that The only thing I would have liked to see is that the \"sorter-true\" class should be included in the table headers is not a very useful feature.", "Also, the \"Sorting by date\" section should have been broken up into two parts, so that the two parts could be separated.", "I would also have liked a description of the changes made to the tablesorter function."], [1.0, 1.0, 0.0, 0.0, 0.0, 1.0]], "192": ["It uses <link> Framework. 1. Refactor automatic_review_mapping method 1.1. Write failing tests first 1.2. Split into several simpler methods and assign reasonable names 1.3. Extract duplicated code into separate methods 2. Refactor response_report method 1.1. Write failing tests first 1.2. Use factory pattern to create a corresponding report according to the switch condition 1.3. Create corresponding helper classes for different report types. Review mapping controller handles the review responses that are done on every assignment. It assigns reviews to different teams or individual student depending on the type of assignment(team project or individual project). As this method was long and complex it needed to be broken down into smaller methods with specific functionality. Original: <code> After Refactoring: <code>. This method automatic_review_mapping was very long and complex. A few methods in the controller were acting as private methods for this method and were being called only in this method. So this automatic_review_mapping method was split into smaller methods. All these small methods and the private methods were shifted to a helper class: AutomaticReviewMappingHelper. Methods 1. initialize(created) 2. automatic_review_mapping_strategy(updated) 3. execute_peer_review_strategy(updated) 4. peer_review_strategy(updated) 5. assign_reviewers_for_team(updated) The common parameters that are used in the automatic review mapping method are defined here so that they can be used as instance variables throughout for better flow of the code. <code> <code> <code> <code> <code>. This method consisted of long case statements making it a long and complex to understand. So this method was refactored using Factory Design Pattern. Original <code> After Refactoring <code>. As seen, the controller method originally was sharing a lot of instance variables with the corresponding views, and it has the long switch statements. Each switch condition is corresponding to a different type of report. Thus, different report helper classes are created for different types of report. These helper classes are grouped in the helper module: ResponseReportHelper. <code> <code> <code> <code> <code> <code> <code> <code> <code> The <link> is used to create a corresponding type of report, according to the switch condition. <code>. 1. Tests for these methods already existed. We altered them according to the refactoring that needed to be done. 2. Additional tests were added for the corner cases that weren't being tested. 4. After Refactoring the tests pass for all the test cases. 5. Test cases for automatic_review_mapping for which tests are run: 1.1. all the parameters are 0 1.2. all parameters except student_review_num are 0 1.3. calibrated parameters are 0 review_num are non-zero 1.4. Team is empty, max team size is 1 and when review_num parameters are not zero 1.5. Create Teams when team is empty 1.6. when artifacts num are non zero it should set the instance variables and call methods. 1. Test cases for response_report for which tests are run: 1.1. when type is SummaryByRevieweeAndCriteria 1.2. when type is SummaryByCriteria 1.3. when type is ReviewResponseMap 1.4. when type is FeedbackResponseMap 1.5. when assignment does not have varying_rubrics_by_round feature 1.6. when type is TeammateReviewResponseMap 1.7. when type is Calibration and participant variable is nil 1.8. when type is PlagiarismCheckerReport Tests for automatic_review_mapping: <code> Test for response report: <code> Additional Tests in the Controller: <code> Additional Tests in helper_spec: <code>. Tests passed for Revised Code: 1. Test for helper <image> 1. Test for Controller <image>. git clone <link> 1. go to expertiza folder cd expertiza 1. run bash setup.sh bash setup.sh 1. run bundle install bundle install 1. run rails server rails server 1. Use firefox in the image and test response_report method 1.1. Type in <link> 1.2. If you need to log in, use account name ‚Äúinstructor6‚Äù, and password ‚Äúpassword‚Äù. 1.3. In order to view different reports, select different types of report and click ‚ÄúSubmit‚Äù button. <image> 1. Use firefox browser in the image and test automatic_review_mapping method 1.1. Type in <link> 1.2. If you need to log in, use account name ‚Äúinstructor6‚Äù, and password ‚Äúpassword‚Äù. <image> <image> <image>. 1. <link> 2. <link> 3. <link>.", ["The writeup is very readable.", "The writeup explains the changes well.", "The code snippets are well organized and well commented.", "However, the test plan is not.", "There are too many screenshots, and The code snippets should be separated out.", "Also, the tests are not described in any detail.", "the tests are just shown in a list.", "that the tests are just shown in a list is not very helpful.", "I would have liked to see the code sequences described in more detail.", "too many screenshots are not very useful."], [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "193": ["Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.4. <link> 1.5. <link> 1.6. <link> 1.7. <link> 1.8. <link> 1.9. <link> 1.10. <link> <link> <link>. Questionnaire Controller interacts with the user to create and edit questionnaires such as review rubrics, teammate-feedback rubrics, quizzes, and surveys. This page provides a detailed description of Open Source Project on Expertiza for refactoring the questionnaire controller. Why is Refactoring Required 1. It helps in making the code more understandable 2. It makes the code more maintainable 3. To remove repetition of code. The scope of the project is to refactor Questionnaire Controller which is very huge, in order to follow the standard principle of Fat Models and slim controllers. 1. questionnaire_controller.rb 2. questionnaire_helper.rb 3. advice_controller.rb. 1. Functionality moved to quiz_questionnaire.rb. 2. edit_advice method was not being used, so it was removed. 3. save_advice moved to the advice_controller. 4. copy, update_quiz, valid_quiz methods were long and have been broken up. clone_questionnaire_details was also broken up and renamed. 5. Added comments to select_questionnaire_type 6. Debug output (print statements) have been removed. 7. Changed code to follow the global rules. 8. save_new_questions, delete_questions, save_questions have been moved to a separate class. <link> <link> <link>. A Subset of the UML class diagram including only the related classes for this project can be drawn as shown below. <image> Questionnaire Controller is the superclass of QuizQuestionnaire and all the other classes - User class, Advice class and Questionnaire classes are related model Classes to the controllers that we have modified. Several methods in Questionnaire Controller class required refactoring to ensure that the change is reflected in the entire project. The names were changed to follow method naming conventions in Ruby. Deprecated code was removed and re-coded to ensure that the code worked in future version of Rails as well. Methods that are more general in the sub classes were moved to the parent class. Some methods that calculate that were colliding with other files were moved to a helper method questionnaire_helper.rb . 1. The quiz questionnaire related methods such as view_quiz, update_quiz, new_quiz and validate_quiz are moved to questionnaire_helper.rb to make the questionnaires_controller thin and follow global rule of thin controllers and fat models . <image> 2. Non Restful method names changed accordingly to make them Restful. Before <code> After <image> 3. edit_advice method is evidently not used, and removed. This edit function is already implemented in advice_controller.rb. 4. save_advice has been moved to the advice_controller. 5. Global rule changes for using Hash - value key pair implemented [Use key: ‚Äòvalue‚Äô, not :key => ‚Äòvalue‚Äô] accordingly. <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> 6. \".eql? <code> 7. Removed duplicate and redundant code making the code DRY. <code> 8. Removed unnecessary debug prints present in the code. <code> 9. Used `&&` and `||` rather than `and` and `or` to keep boolean precedence as per global rules. <code> 10. More global rule changes. <code>. The following object oriented design principles were followed during refactoring: 1. Single Responsibility Principle : The single responsibility principle states that every context (class, function, variable, etc.) should have a single responsibility. It was maintained that each method should be involved with a single responsibility and the code that was not related to that particular functionality was moved to other method. This was also taken care of in terms of classes. The repetitive and redundant code was removed from the associated classes and methods. We tested the functionality of the questionnaires controller before and after refactoring by manually creating and listing the questionnaires, there is no change in behavior observed. After Refactoring, the questionnaire controller is working as before. <image> <image> <image>. 1. Refactoring was performed as per requirements in the files questionnaire_controller.rb, and advice_controller.rb. 2. The code from models cannot be moved directly to controllers, so the code was moved to the helper class questionnaire_helper.rb. 3. Some methods with confusing method names have also been renamed. <link> <link> <link> <link> <link>.", ["The writeup is very readable.", "The writeup explains the changes well, and explains the rationale for them.", "the changes are described clearly, and the changes are clearly described.", "However, the code is not described in prose, and the code would have been better to use the Github diff view to show the changes in more detail.", "Also, the test plan is not explained.", "that Also, the test plan is not explained is a major weakness.", "There should be a description of the tests."], [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0]], "194": ["Expertiza has a functionality that allows students and instructors to receive and give grades, respectively. This functionality is implemented in the grades_controller.rb file. This controller currently violates some essential Rails design principles including having too much calculation and having methods' names that violate Ruby naming convention. Here are the refactoring steps needed to be taken in order to fix the grades_controller.rb . 1. Create a new private method to encapsulate the population of the view model for all the necessary data (lines 102-107). 2. Simplify the logic surrounding the error flashing. The nested logic seems unnecessary (lines 190-192). 3. In line 300: 1.1. Increase readability by fixing whitespace according to the common Ruby Programming guidelines. 1.2. Return is not needed here. 1.3. Remove space between ‚Äò!‚Äô and its argument. 1.4. Use meaningful variable names and break up the expression. 4. Move these functions into grades_helper.rb and change their names to be more Ruby-like: 1.1. calculate_all_penalties 1.2. calculate_penalty_attributes 1.3. mean (also cease the usage of the assignment) 1.4. calculate_average_vector 1.5. build_score_vector 1.6. Remove_negative_scores_and_build_charts 5. The previous programmer used update_attribute, which is concerning, as validations are ignored (Line 153 and 219). 1. Comment changed that was wrong (\"head\" into \"heat\") <image> 1. Line 102-107 (New Private Method made to encapsulate this) <image> <code> <image> <code> <image> 1. Line 190-192 <image> <code> <image> 1. Line 300 <image> <code> <image> 1. Lines 153/219 <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image>. To test this controller, run the following command to verify the changes do not break any core functions. <code> <image> <image> When you run the program and get to login page. Use credentials below for instructor. <code> <image> A good student to impersonate for testing is <code> <image> <code> <image> <code> <image> <code> <image> <code> <image> 1. To Do: Add Rspec tests to grades_helper.rb Important views for using refactored functions <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code>.", ["The document is very readable.", "The document explains the changes well.", "The only thing I would have liked to see is a description of the changes to the code.", "Also, it would have been helpful to have a screenshot of the code changes.", "I would also have liked a description on how the code was changed."], [1.0, 1.0, 1.0, 0.0, 1.0]], "195": ["Expertiza is an Open Source Software project developed by NCSU. It allows the instructor to create assignments as well as modify existing assignments. Students can signup for topics in an assignment and can submit articles, codes, web-sites etc. It is a web application built on Ruby on Rails framework. It also allows students to review the submissions that have been made other students. In the current implementation only the students can sign up for topics. Because of this, no higher authority (e.g instructor) can control the signups in a straightforward manner. If the instructor wishes to assign a particular topic to a team or remove a team from a particular topic then the instructor has to impersonate that student and sign up for the topic. Due, to the current implementation, you can neither handle the mistakes in signups , nor make modifications to the existing signups without impersonation. The new implementation allows an instructor to assign a particular topic to a team as well as remove a team from a topic.This functionality has been added in views/sign_up_sheet/_all_actions.html.erb which now has a '+' sign to assign a topic to a particular user. If the instructor clicks on this, then a view will appear which takes in the username of a student to be added. When the box is filled out and the ‚Äúadd‚Äù button clicked, then the indicated user‚Äôs team is signed up for the topic. If there are no slots available for that topic then the team will be put on the waiting list. There is also a 'X' sign that will help the instructor to remove a team from a topic. Some of the scenarios where the instructor might wish to add a team would be if the sign up deadline has passed, or if the instructor has decided to update the maximum number of teams allowed to choose a particular topic. The instructor might want to drop a team from the topic if the team doesn't want to proceed with the same topic for the assignment. With the new implementation, Instructors/Teaching Assistants do not need to go through the trouble of impersonating a student in order to add or drop their team from topics. We have chosen the nested if-else approach because there were many scenarios , all of which required us to take different actions. Changes were made in the following files - 1. controllers/sign_up_sheet_controller.rb 2. views/sign_up_sheet/_all_actions.html.erb 3. views/sign_up_sheet/assign_topic.html.erb 4. views/sign_up_sheet/remove_topic.html.erb Functions added to implement functionality :- 1. update_team 2. assign_topic 3. remove_team 4. remove_topic In the sign_up_sheet controller, two major methods were added: <image> <image> Two additional icons have been added in the Actions column. The ‚Äògreen plus‚Äô icon allows you to add a team to the current topic. Clicking on the icon redirects you to a form, where the admin is required to enter the username of the person whose team he wishes to add. <image> Clicking submit then redirects back to the original page, with a flash message containing the status of the operation. <image> In case the topic has already been assigned the maximum number of teams, the new team is added to the waitlist. <image> The 'red cross' icon is used to remove a team from the given topic. Clicking on it takes the admin to a form, where he is required to enter the username of one of the team members belonging to the team that is to be removed. Submitting the form redirects the user back to the original page, with a flash message indicating the status of the remove operation. <image>. The system can take in individual users who don't have a team or topic and can add him/her to the existing teams that are enrolled for the topic. 1. <link> 2. <link> 3. <link>.", ["The document is very readable, but The document does not explain the changes made to the code.", "The document is mostly just a list of changes, with no explanation of how the code works.", "The code snippets are not very useful, and the screenshots are not large enough to be read by the reader.", "The code snippets are just pasted in, with a few comments describing the changes.", "This is not very helpful."], [1.0, 0.0, 0.0, 0.0, 1.0]], "196": ["3. In the DB the default number of meta-reviews allowed and required should be null. 6. When a user requests a new meta-review, the field which says the number of meta-reviews left ( refer to above image ‚ÄúNumbers of Meta-reviews left:‚Äù) does not change and the button to request a new meta-review disappears. The code below shows the conditional used to display the \"Request new meta-review\" button. Currently, the number of required and allowed meta-reviews is always being set to 3 in the database. When the checkbox for setting meta-review limits is unchecked, the values of number of meta-reviews allowed and required should be null. The \"Request new a meta-review\" button should be hidden when: 1. The number of meta-reviews in-progress is greater than the maximum allowed outstanding reviews. 2. The number of reviews allowed is limited AND the total number of meta-reviews completed or in-progress is greater than the number allowed. The code below shows the conditional used to display the \"Request new meta-review\" button. The user should NOT be able to see the 'Request a new meta-review to perform' button when there are no reviews available. 1.1.1. A student should NOT be able to request a meta-review on their own review. 1.1.2. When the meta-review limit on the assignment is set to 1 then a student should NOT be able to request a second meta-review. 1.1.3. The user should not be able to see the 'Request a new meta-review to perform' button when they have performed all valid reviews. 1.1.1. The user should be able to click the 'Begin' button and still see the 'Request a new meta-review to perform' button. 1.1.2. The user should NOT be able to see the 'Request a new meta-review to perform' button when they have reached the meta-review limit. 1.1.3. If the user requests two meta-reviews but has not submitted, then they should not be able to request a new meta-review. 1.1.4. The user should be able to request a meta-review if they are above their required but below the allowed number of meta-reviews. Number of meta-reviews left should decrement when a user requests a meta-review. 1.1.1. The user should see the number of meta-reviews left decrement after a new meta-review is requested. 1.1.2. The user should see the number of meta-reviews left decrement after a new meta-review is completed. All meta-review tests make meta-reviews allowed only during the meta-review round. 1.1.1. The user is able to SUBMIT a simple meta-review. and set the number of allowed and required meta-reviews. 1. User should NOT be able to see 'Request a new meta-review to perform' button when there are no reviews available. 1. User is able to SAVE a simple meta-review. 2. User is able to go BACK during a simple meta-review since this functionality is available for reviews. 3. When the limit and required number of meta-reviews on the assignment are equal, then a student will see they need to submit exactly that number of meta-reviews. 4. When there are more meta-reviews allowed than required, then a student will see they need to submit between the two numbers of meta-reviews 5. When the meta-review limits for an assignment are unset then a student will see that the number of meta-reviews aren't limited 6. A student should not see a number of required or allowed meta-reviews when there are no limits on meta-reviews 7. A student should see the number of meta-reviews decrement after a review is requested 8. A student should see the number of meta-reviews decrement after they complete a review 9. A student should not be able to request a meta-review on their own reviews 10. If the meta-review limit on the assignment is set to 1 then a student should not be able to request a second meta review 11. User should not be able to see 'Request a new meta-review to perform' button when they have reviewed all valid reviews already. 1. User should be able to request more than one meta-review before completing any 2. User should not be able to see 'Request a new meta-review to perform' button when they have reached the meta-review limit 3. User should not be able to request more than two meta-reviews without completing at least 1 4. A student should be able to request a meta-review if they are above their required but below their allowed meta-reviews <image>.", ["The document is very readable.", "The document explains the changes to be made, and explains the rationale for them.", "The code is well structured and easy to read.", "However, the code for the \"Request new meta-review\" button is not explained.", "that However, the code for the \"Request new meta-review\" button is not explained is a major issue.", "I would have liked to see The code be explained in more detail.", "Also, the test plan should be explained."], [1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0]], "197": ["A response is the object that is created when someone fills out a review rubric, such as when one writes a review, gives feedback to a reviewer, or fills out a survey. It is not the worst controller in the system, but it would be much clearer if its method names were more descriptive of what they do. This project tries to modify and refactor the response_controller.rb in a more clear way. response_controller.rb response.rb. 1. def assign_instance_vars 2. def scores 3. def new 4. def set_questionnaire 5. def set_questionnaire_for_new_response 6. def show_calibration_results_for_students. Since most of the method involved in our project is private methods and all of the public methods in response controller were already tested. Thus, we will focus on testing methods we created in the model class: response.rb spec/models/response_spec.rb will be edit in order to test our methods. We did the following refactor to make this method more clear: 1. the instance variables are actually action handles to the views from controller including \"new\" and \"edit\", thus refactoring method name to assign_action_parameters would be better to understand what this method is trying to do. 2. This method is a private helper method and is used in new and edit methods to set the action parameters for the new and edit actions <image> 1. After renaming, the method became more clear of what it's doing <image>. 1. This method was already defined in other classes and is useless in the current class, thus remove it would be a reasonable choice. <image>. 1. In the method set_content in response_controller.rb, there is one line of code that \"new_response ? set_questionnaire_for_new_response : set_questionnaire\". Thus, we can tell the method set_qustionnaire will called when new_response is false, which means that the object was triggered by an existing response. In the method set_questionnaire, the line of code that ‚Äú@questionnaire = @response.questionnaire_by_answer(answer)‚Äù, which is looking up the questionnaire answered by this existing response. Therefore, refactoring the method name to find_quesetionnaire would be better to understand. <image>. 1. In the method set_content in response_controller.rb, there is one line of code that \"new_response ? set_questionnaire_for_new_response : set_questionnaire\". Thus, we can tell the method set_qustionnaire will called when new_response is true, which means that the object was triggered by a new response. In the set_questionnaire_for_new_response method, the \"cast\" statement informs us that the new questionnaire are created based on the types or Reviewers, such as Review, Metareview, Teammate Review and so on. Therefore, refactoring the set_questionnaire_for_new_response method to create_new_questionnaire would be better to understand. <image>. 1. This method shows the result of expert review for reviewer after teacher or TA submit the calibration by editing the assignment. 2. The method makes about five database accesses and the code is quite messy and thus break it into 2 methods with the business logic moved to response.rb would be a good way to make the code in controller cleaner. <image> 1. The method get_questions_from_assignment is the part that's inside the model class and contains logic of mapping reviews with assignments in the questionnaire and return questions in the joined table <image>. <image>. <image>. <image>. 1. This method contains a complicated condition that determines whether the submission has been updated since the last time it was reviewed. If it has not, then the reviewer can edit his/her previous review. If there has been an update, then the reviewer gets a new review form to ‚Äúupdate‚Äù the review. 2. So we break the new method into two methods: new and get_most_recent_response and put the logic into the response controller class. 3. The method get_most_recent_response in the model class tests whether there has been a review since the last file or link was submitted and in the controller this method was called to get the newest response. <image> 1. The new method after refactoring, now the code is quite clear and with only one appearance of variable \"@response\" <image>. <image>. <image>. Most of the method involved in our project is private methods and all of the public methods in response controller were already tested. Thus, we will focus on testing methods we created in the model class: response.rb spec/models/response_spec.rb will be edit in order to test our refactored methods <image>.", ["The writeup is very readable.", "The writeup explains the changes well.", "The code snippets are well organized and well commented.", "However, the test plan is not described in prose.", "that However, the test plan is not described in prose is a shame.", "I would have liked to see the test code described in more detail.", "Also, the screenshots are not very large, and the test code is not very readable, which is a real shame."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "198": ["<image> This button takes the student to the create/edit Review Questionnaire page. The student then can create a new rubric. Added a new field called 'supplementary_rubric' to the 'teams' table so that the supplementary rubric could be stored. Supplementary rubric questions are visible along with instructor generated rubrics. <image> ‚ÄúView‚Äù function for a rubric displays answers submitted for the Supplementary rubric questions along with Review Questionnaire for Reviewer. <image> ‚ÄúYour Scores‚Äù function for the Reviewee displays answers submitted for the Supplementary rubric questions along with Review Questionnaire. <image> \"Alternate View\" for \"Your scores\" should also include Supplemenraty Rubric questionnaire. 3. Polymorphism 4. Inheritance Use Case Here SRQ is used for newly added field supplementaryReviewQuestions in the Teams table and it is initially set as null for all the table entries.Once a student adds a specific Questionnaire to his project this field stores the id of that Questionnaire which is stored in the Questionnaires table. <image> Use Case to Add Questionnaire Functionality: In the \"Your Work\" section, Student will be shown a button \"Manage Rubric\", when clicked, if the supplementaryReviewQuestions column in Teams table is null for that team, Questionnaire will be created and SRQ in Teams table will be updated to contain the Questionnaire ID. The student will be directed to the Edit Questionnaire page with exsiting logic. <image> Use Case for Show Questionnaire Functionality: When the student orders for new reviews, if the supplementaryReviewQuestions column in Teams table is not null for the assigned team, extract the questionnaire for supplementary reviews and append in a new section below normal Questionnaire. <image> Use Case for Show Review( and Scores) Functionality: When the Student or the Instructor checks the reviews and scores on rubric, if the supplementaryReviewQuestions column in Teams table is not null for the team, extract the questionnaire review for supplementary questions and append in a new section below normal Questionnaire Reviews. To provide the view for the scores of a team we will add one more partition containing the scores for the supplementary questionnaire and implement the already build logic to get and display the scores. 2. To check if clicking on \"Manage Supplementary Rubric button\" creates a questionnaire id in Supplementary rubric column of Teams Table. 3. To check if a reviewer creates a Rubric, the assigned student is able to see the Supplementary Review Questionnaire whenever he/she logs in and tries to review it. <code> <code> <code> <code> end. Here SRQ is used for newly added field supplementaryReviewQuestions in the Teams table and it is initially set as null for all the table entries.Once a student adds a specific Questionnaire to his project this field stores the id of that Questionnaire which is stored in the Questionnaires table. <image> Use Case to Add Questionnaire Functionality: In the \"Your Work\" section, Student will be shown a button \"Manage Rubric\", when clicked, if the supplementaryReviewQuestions column in Teams table is null for that team, Questionnaire will be created and SRQ in Teams table will be updated to contain the Questionnaire ID. The student will be directed to the Edit Questionnaire page with exsiting logic. <image> Use Case for Show Questionnaire Functionality: When the student orders for new reviews, if the supplementaryReviewQuestions column in Teams table is not null for the assigned team, extract the questionnaire for supplementary reviews and append in a new section below normal Questionnaire. <image> Use Case for Show Review( and Scores) Functionality: When the Student or the Instructor checks the reviews and scores on rubric, if the supplementaryReviewQuestions column in Teams table is not null for the team, extract the questionnaire review for supplementary questions and append in a new section below normal Questionnaire Reviews. To provide the view for the scores of a team we will add one more partition containing the scores for the supplementary questionnaire and implement the already build logic to get and display the scores. 1. Created a migration script to add a new column 'supplementary_rubric' to the Teams table 2. To add supplementary rubric: In submitted_content_controller.rb: created a new function 'manage_supplementary_rubric' <code> In the view, submitted_content/_mail.html.erb: Created a button 'Manage Supplementary rubric' to be shown in 'your work' tab <code> After this, the same functionality of adding a rubric and questions is used as before. 2. To check if clicking on \"Manage Supplementary Rubric button\" creates a questionnaire id in Supplementary rubric column of Teams Table. 3. To check if a reviewer creates a Rubric, the assigned student is able to see the Supplementary Review Questionnaire whenever he/she logs in and tries to review it. <code> <code> <code> <code> end.", ["The writeup is very readable.", "The writeup explains the changes well, and explains the rationale for each change.", "The only thing I would have liked to see is a description of how the tests work.", "that The only thing I would have liked to see is a description of how the tests work is not covered in the writeup.", "I would also have liked a description for the tests, and a link to the code.", "Also, the test plan should have been described in more detail."], [1.0, 0.0, 1.0, 1.0, 1.0, 1.0]], "199": ["Review \"tags\" are a form of feedback on Expertiza where students \"tag\" (classify) text from peer reviews, using Yes or No answers to questions chosen specifically for each tag deployment. <image>. It can be difficult for students to find a tag they missed on the Team View page, and other teams are working with ML algorithms to \"pre-tag\" as many reviews as possible, leading to a granular field of completed/incomplete tags. At this time, the only tagging feedback students see are the tag prompts and a Javascript counter with a numeric representation of how many tags have not been completed. In order to find a missed tag, students have to scroll the page and manually search for tags that aren't done. In order to help students complete all the tags for an assignment, we propose a new, dynamically generated heatgrid on the \"Your Scores\" view that breaks down reviews and tags by round, question, and review, which uses visual cues to help students find incomplete tags. The heatgrid shows both a total count of \"complete\" out of \"available\" tags, and individual tags with color-scaled feedback for completeness. The new heatgrid must handle these requirements, and display visual feedback accordingly: 1. Single and multiple round reviews 2. Reviews with and without tag prompts 3. Dynamically update as tags are completed 4. Different tag deployments will use different numbers of tags per review 5. Use of existing review row-sort functionality 6. Not rely on the database for tag data, as AnswerTag database rows may not exist until tags are clicked. For example, if there are 370 tags in total on this page and 10 of them have already been tagged, then 10/370 will be displayed. This element will also be updated dynamically when users make tag changes on this page. A simple JS function to count all the tag elements on current page. It will be invoked when the page first being rendered and also when any tags are changed by users. A simple JS function to count the number of tagged tags on the current page. It will be invoked when the page first being rendered and when any tags are changed by users. This JS helper dynamically render the page when any tags are changed by users. <image>. For manual testing purposes, we logged in as instructor6 in order to: 1. View the tagging report as an instructor/TA (Instructor tagging is permitted, and tags are separate from Student Tags) on view_team 2. Impersonate a student to view the tagging report on view_team as a student 3. View the mini-report on Alternate View both as students and instructors 4. Ensure that changing of tags updates the Tagging Report 5. Ensure that the Tagging Report interacts well with the existing layout 6. Ensure that the Tagging Report is hidden/shown when \"Hide Tags\" is clicked 7. Ensure that the Tagging Report accordions as expected when clicked 8. Confirm that mouseover events display the expected tooltips, including color scheme for the \"10 out of 250\" cell as well as color scheme for the main report body, and the Expand/Collapse tooltip 9. Ensure that the Tagging Report is hidden when there are no Tags available for a view_team page 10. Ensure that the Tagging Report was compatible with different tag deployments containing different numbers of tags A good example of functionality for a project with reviews and one with reviews can both be found with student7856. Program 2 has plenty of reviews that can be tagged and untagged and checked that the heatmap functionality is working. Program 1 does not have any reviews to tag and was checked to ensure that nothing broke due to not having any reviews to tag. Many recent assignments (2017-present) which have reviews have tag deployments. <image> 3. Both instructors and students can enter tag data. To view the instructor view, tags, and tagging heatgrid, click \"Assign Grade\". <image> 5. Click \"Your Scores\" to view the main View Team page which includes most of the functionality, including the tag heatgrid. On the main View Team Page, click a question row and change one or more tag prompts, to ensure the heatgrid and fraction are updated. c. Click \"Hide tags/Show Tags\" to show and hide all tag-related data. e. Click the row-sorter for question or average, and change one or more tag prompts to ensure the heatgrid is still updating the correct tags <image> 7. To view the \"Alternate View\", navigate back and click \"Alternate View\". This view should show a small counter near the top of the page with tag completion data. 9. We suggest now impersonating student7856 and navigating to Program 2 , then Your Scores to view a series of reviews with all tags completed so you can see how the interface behaves. 10. Finally, we suggest viewing an assignment which has reviews, but does not have a tag deployment assigned, to ensure none of the heatgrid materials related to tagging are displayed.", ["The document is very readable, and explains the changes well.", "The document is not clear how the code is organized, and the code snippets are not clearly separated.", "the code snippets should be separated out into sections, so that the reader can see the code snippets in order.", "Also, the code changes are not described in prose, which is not very helpful.", "the code snippets are shown in a list, but not in prose.", "that the code snippets are shown in a list, but not in prose is not a good way to explain the changes."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "200": ["The quality of the reviews can be improved if students are shown some example reviews while they peer review. These example reviews can either be taken from the assignment of current semester or from the same/related project of previous semesters. The objective of the project is to add a feature to show some good sample reviews while the students peer review other teams work. To enable this, students while submitting their peer review give a consent on whether their reviews can be shown as an example to others. Instructors then select a subset of these reviews to be posted as an example reviews. These example reviews are shown in the peer review page (Other's work link) to the entire class. 3. The student can remove their consent anytime, and the sample review should no longer be visible to other students. In the order of flow, 1. Student's Consent: In each review assignment, there will be a checkbox that says \"I agree to share my review as a sample for others\" then students can decide to check this box or not just before they submit reviews. Sequence Diagram: <image> 2. Instructor's Selection: The instructor can select from among the \"public\" reviews and decides which to make visible to other students doing a particular assignment, i.e. all participants in that assignment. If this review has already been shown as an example, the button should be ‚Äúremove this review from examples‚Äù instead. Sequence Diagram: <image> 3. List of Sample Reviews: A participant can see these \"exemplary\" reviews by going to \"Others' work\" for the assignment in question, and clicking on one or more links that say, e.g., \"Sample review\". And it should be shown just below the title ‚ÄúReview for ...‚Äù. 1) Add 'visibility' column to responses 2) Add new Table 'sample_reviews' 2. Mapping of Reviews and Assignment: The example reviews can either be taken from an assignment of the current course or it could be from an assignment from a previous course. One idea is that when clicking to ‚Äúmake this review an example‚Äù, it will link to a page where you can select an assignment to which you have access (the same as the list of ‚ÄúAssignment‚Äù in the tree_display), then the example review will be shown to all participants of that specific assignment. 5. To allow instructor to select among the public reviews to shown as examples to all students a button 'Mark as an example' in the popup views. Changes corresponding to this is made in /app/views/popup/team_users_popup.html.haml 5. To enable students to see the example reviews, a link Sample reviews is added in the Other's work page. As a Student (Scenario 1): Student giving consent to make their review public 1. Log in. 4. Click on any assignment for which the review has to be submitted. 5. Assignment task page is displayed. 6. Click on \"Other's work\" to open the reviews summary page (at /student_review). 7. Chose to review any of the teams' assignments that are displayed. 8. Select a team for review and fill in the review. 9. Before submitting the review, select the checkbox that says \"I agree to share this review anonymously as an example to the entire class\". 10. After clicking on the submit button, the review submitted has been made public. As a Student (Scenario 2): Showing all the available sample reviews for respective assignment 1. Log in. 4. Click on any assignment for which the review has to be submitted. 5. Assignment task page is displayed. 6. Click on \"Other's work\" to open the reviews summary page (at /student_review). 7. Below the heading \"Reviews for ...\", click on the \"Sample reviews\" link. 8. This opens a page where the student can view all example reviews for that assignment. 5. Displays a list of reviews submitted by students. 7. Displays the summary of reviews submitted by that student, with a \"Make as an example\" button on the right of every review. 8. Click on \"Make as an example\" for the intended reviews, which opens a popup that displays a list of all assignments that are a part of the instructor's courses. 9. From this list select all assignments for which the review has to be shown as a sample. 10. Click on 'Publish Sample Reviews' after selection (this closes the popup). 11. Navigate to view reviews of that particular assignment and click on \"Sample Reviews\". 12. A new page is opened that lists out all the sample reviews of the assignment. The first set of tests are for testing scenario of i) a student making his review public/private and i) student viewing the sample reviews. The second set of tests are for testing i) instructor marking a review as an example and ii) selecting the assignments to which the reviews has to be shown.", ["The document is quite readable.", "The document explains the changes well, but The document would have been helpful to have a description of how the code was changed.", "The code snippets are not clearly separated.", "The code snippets are just pasted in, with no explanation of what The code snippets are doing.", "Also, the test plan is not described.", "that Also, the test plan is not described is a major weakness.", "There should be a description, e.g., of the tests, and a description.", "The screenshots are just shown with a black background."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "201": ["Keeping this in mind our code is set to work under the following conditions: 1. Assignment teams created for an assignment without topics 2. Mentors ( Instructors and TAs ) are only assigned to assignment teams if they have been added to an assignment as participants We've created the following <link> to demonstrate the added functionality. As well as the following <link> which demonstrates what happens when teams are created when no mentors have been added as participants to an assignment. 1. Assign a TA or instructor as a mentor for a team created for an assignment without topics. Do not put email code in the Team class). <link>. Our implementation begins when an assignment team is created. If the assignment is associated with a topic, the created team will not be assigned a mentor. This hash is created from the TAs and instructors added to the assignment as participants. The keys of the hash correspond to the mentor's participant id while their values are the number of times the mentor has been assigned to mentor teams. The mentor with the lowest number of assigned teams will be the next mentor assigned to a newly created team. Once the team is assigned a mentor, an email is sent out to the mentor and students in the team to notify them of their mentor assignment. First Design: <image> Ultimately we were able to implement the following design: Final Design: <image> We created the following assignment_teams_mentors table with the following connections to existing tables. The new table created is responsible for storing all the mentors assigned to the various teams created. This column will help determine what TAs and instructors can mentor for a specified assignment. Currently instructors see the corresponding view when looking at teams associated with an assignment: <image> Our team proposed adding an additional \"Mentors\" column in the instructor view: <image> Currently students see the corresponding view when looking at their team for an assignment: <image> Our team originally proposed to add an additional \"Mentors\" section in the student view: <image>. The assignment_team_mentors table is responsible for storing all the mentors assigned to the various assignment teams created. 1.2. Created a can_mentor column for the participants table in order to be able to know who was a mentor and who was a student. <image> Models 1. assignment_team_mentor.rb 1.1. Responsible for ensuring mentor with the least number of teams mentored, gets assigned to the next team created. 1.2. Started to add mailer functionality for notifying the mentor assigned. This ensures a team only has one team mentor. This provides the flexibility of a potential mentor added as a participant to an assignment, to mentor multiple teams created for an assignment. <image> Controllers 1. teams_controller.rb 1.1. The following code was added within the create method. 1.2. Calls on AssignmentTeamMentor to assign mentor for instructor created teams. Will generate notice if unable to assign mentor to recently created team. <image> 1. 1.1. The following code was added within the list method. 1.2. A hash is generated with the assigned mentor of each team. <image> 1. student_teams_controllers.rb 1.1. The following code was added within the create method. 1.2. Calls on AssignmentTeamMentor to assign mentor for student created teams. Will generate notice if unable to assign mentor to recently created team. <image> 1. 1.1. The following code was added within the view method. <image> 1. teams_user_controller.rb 1.1. added code to send the email when a user is added to a team to the mentor. <image> 1. views/tree_display/_row_header.html.erb 1.1. displays either mentor assigned or \"No mentor assigned\" for team level. <image> 1. views/student_teams/view.html.erb 1.1. responsible for displaying to a student the mentor assigned to their team for an assignment. <image>. This button is how we decide if we need to assign mentors to a team. As an instructor we were able to confirm the following UI changes after mentors were assigned to teams: <image> As a student we were able to confirm the following UI changes when a mentor has been assigned to their team: <image> The following <link> further expands on this UI testing. As an instructor we were able to confirm the following UI changes after teams were created when no mentors had been added participants: <image> As a student we were able to confirm the following UI changes when a team was created without mentor participants for the assignment: <image> The following <link> further expands on this UI testing. 1. Providing ability to manually select the mentor for a team created. <image> 1. Refactor email functionality code and continue to develop to allow for the assignment team members to be notified of new assigned mentor or any other added members. <image>. <link> <link> <link> <link> <link>.", ["The writeup is very readable.", "The writeup explains the changes well, and explains the rationale for them.", "The code is well structured and well commented.", "However, The code is not described in prose.", "that However, The code is not described in prose is a major weakness.", "Also, the test plan is not explained.", "Would have been better to use the Github diff view to show the code changes."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "210": ["Expertiza provide the function for user to request an account, but the function is not perfect. It will enable Expertiza to handle the pending request for super-admin and add institution for user. 1. Currently, a new user can only choose institution from the dropdown. The new user should be able to add a new institution. 2. A place where a new user to write a brief introduction is needed in this page. 1. After super-admin or admin approves the request, make sure the record does not disappear on the page. And there should be an email send to email address offered by requester. 1. Modify the test of request new user method. 2. Add a new option for the drop-down bar of institution in the new user request page. 3. Add a new textarea in the new user request page, to input a new institution and introduction. 4. Add validation for new institution new institutions and introductions. 6. Add a new button on the layout. 8. Enable the system will send an email after the request is processed. So we need to add a new column for request_user table. The new table will be shown below. <image>. <image> <image> 1. Name: Instructor or Teaching Assistant request a new account 2. Actor: Instructor or Teaching Assistant 3. Other Participants: None 4. Precondition: None 5. Primary Sequence: 1. Click on ‚ÄúRequest account‚Äù. 3. Fill in a user name. 6. Select an institution. 8. Click on ‚ÄúRequest‚Äù. 2. Fill in the institution name. 1. Name: Admin or Super admin view list of new account requests 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza. 3. View the list of new account requests. 1. Alternative Flow: None 1. Name: Admin or Super admin accept a new account request 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza. 3. Select a request. 1. Alternative Flow: None 1. Name: Admin or Super admin reject a new account request 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza 2. Click on the link ‚Äú/users/list_pending_requested‚Äù. 3. Select a request. 1. Alternative Flow: None 1. Name: Admin or Super admin send an email to applicant 2. Actor: Admin or Super admin 3. Other Participants: None 4. Precondition: Instructor or Teaching Assistant has requested a new account 5. Primary Sequence: 1. Log in to Expertiza 2. Click on the link ‚Äú/users/list_pending_requested‚Äù. 3. Select a request. 4. Click on the email address. 1. Alternative Flow: None. <code> <code> <code> <code> <code>. <code> <code> <code> <code>. Below are the mock-up screens that explain ‚Äúnew account acreation‚Äù functionality in Expertiza. 1. 1.New user should click ‚Äúrequest account‚Äù for requesting a new account, then redirect to the ‚Äúrequest new ‚Äù page. <image> 1. 2.After redirect to ‚Äúrequest new ‚Äù page, new users should enter their information, includes role, name, e-mail and institution. We can enter our new institution in this textbox. The email address is clickable. <image> 1. 5.If we click the email address, the email editor will pop out. <image>. In the first part, we test the request account feature. Finally, we test if the new user can signin with new account and password. 1.Now in the new user request page, the user can add a new institution by choose 'Other' and input their own institution. <image> 2.The new institution is able to saved into institutions table as a new record. <image> 5.The administrator can access the '/users/list_pending_requested' url via ‚ÄúAdministration > Show‚Ä¶>new requests‚Äù menu <image> The admin can access the '/users/list_pending_requested' url via ‚ÄúAdministration > Manage>new requests‚Äù menu <image> 6.‚ÄúEmail Address‚Äù column in /users/list_pending_requested page clickable. <image> <image> 7.After super-admin or admin approves the request, the record does not disappear on the page. <image> 8.There is be an email send to email address offered by requester.And for super_admin and user. <image> <image>.", ["The writeup is very good, but The writeup could have been improved by adding more detail to the code.", "The writeup would have been helpful to have a description of the changes made to the test plan.", "Also, a description of the changes made to the test plan is not clear.", "the test plan is not described in any detail.", "This is a good start, despite that the test plan is not described in any detail, but a description of the changes made to the test plan should have been more detailed."], [1.0, 0.0, 1.0, 1.0, 1.0]], "211": ["It also makes it easy for the instructor to add a new topic to an assignment/project, create a new project and add students to it. This helps in improving the existing work and also provides a new way to learn. In Expertiza, user and instructor accounts are currently created by existing super administrators, instructors or TAs. For new users to access the system and experiment the features offered by Expertiza, a ‚Äúdemo-like‚Äù feature needs to implemented. The following are the set of requirements that needs to be catered with this feature: 1. Allow people to request instructor accounts over the web. This feature should also have security features such as Captchas to help avoid account creation by bots. 2. When a user account is created over the web, the super-admin should get e-mail regarding the same and also the user should be notified upon approval/denial (if denied, then reason should be specified). 3. Currently, Expertiza consists of a lot of entities that can be made publicly visible to all other users in the system. 4. A user who creates an account over the web should be pointed to an instruction page and/or video on how to create an assignment and register students for it, etc. Once a user wants to register and try the features of Expertiza, upon opening the website, one can register by filling up the form and click the register button. Once the user requests for an account creation, the super admin receives a mail informing about the request with the name of the requested user. The super admin shall then, look for the details of the user in the Review Requested Users tab and can either approve/decline the request. Once the super admin approves the user request, the user gets a mail notifying that they now have the permission to access the features of Expertiza. A temporary password in clear text is also sent in the mail for login. If the request is rejected, then the reason should be mentioned in the reason column of the form. But there is no mail sent to the user regarding that. Needs permission from super admin‚Äù that can be seen on the login page if an unregistered user tries to access the features of Expertiza. Once the user requests for an account, upon clicking the request sign up , he/she is automatically redirected to the instructions page with the video tutorials explaining various features of Expertiza and on how to access them. In _login.html.erb a new button called Request Sign Up was added for the new users to register. The register page will look as above. On clicking Request , a user will be redirected to a page like below: <image> User will have to fill up all the required details and request a signup. When a super administrator logins to his account he can go to Manage/users/review requested users menu as shown below. We have put the review requested users in the menu, rather than a separate tab, making it more flexible to integrate some more features under the users option later. <image> Super Admin can either approve/reject a user. The view for this page would be as shown below. This is an entirely new page wherein, the super admin can also mention the reason for a rejection of a request and view the entire list of requested users. <image> In addition to the above files a new file in instructions, named home.html.erb is created which will have all the videos explaining how Expertiza works. This is to the new user to request for an account in Expertiza and also mail all the super admins about the new user request. Upon the request, this method uses the user parameters (fields entered in the request sign-up form) and a status of 'Under review' is assigned by default. On verifying the captcha, the super admin(s) gets a mail regarding the request with the user name and the requested user is redirected to the instructions page. This is for the super admin to either approve or reject the user request and send a mail to the requested user if his/her account is created. The mail also contains a password for the user to login. We have created a new table called requested_users with table description that is similar to users . The status column, which isn't present in the users tables indicates the approval/rejection of the request of the user. Though the description of this table is similar to the users table, we thought it was better to go with a new one, keeping in view of the following advantages: 1. The users table had lot more entries which weren't needed for the requested user scenario and also vice-versa. The entries like status and reason of the requested_users table weren't necessary once the user request has been approved. 2. The users table was accessed at many places in Expertiza, so any change in that would have to be reflected at all places. It was comparatively easier to manage with a new table rather than using the existing one. The description of the table is as follows: <image>.", ["The wiki page is very good, but The wiki page could have been improved by adding more detail to the code.", "The wiki page would have been better to show the code changes in a table, rather than just a list of the changes.", "The code snippets are not very detailed, and The code snippets should be shown in a separate section.", "Also, the code is not very readable.", "I would have liked to see more detail on the code, and also on the design doc."], [1.0, 1.0, 1.0, 1.0, 1.0]], "212": ["Students submit their work and review other‚Äôs work and provide feedback. Wiki link: <link> Github link: <link>. 1. The current Expertiza UI for reviewing uses a simple html text area for each criterion, which starting to look dull for the users. 2. Moreover, the current form still uses plain old HTML form that sent the text entered in several text areas to the controller only after the user clicks the submit button. Moreover, we found that the review text contains misspelled words and incorrect use of English grammar that makes the review hard to understand. Updates in requirements as of 11 November, 2017 4.Replace the text area with a rich text editor that allows user to customize the fonts, bold, insert link to images / videos (possibly generate a thumbnails of the links). Approach: We have replaced text area in the review form with <link> rich text editor. There are many rich text editors available like <link> , <link> , etc. Usage 1. Gem used: <link> 2. Behaviour of TinyMCE can be modified by making changes in config/tinymce.yml 1.1. Plugins embedded: 1.1.1. Link : Allows a reviewer to link external resources such as website URLs 1.1.2. Media : Adds the ability for reviewers to be able to add HTML5 video and audio elements to the editable area. 1.1.3. Code Sample : Lets a reviewer insert and embed syntax color highlighted code snippets into the editable area. 3. Initializing TinyMCE: To initialize tinyMCE in the new text area add the \"tinymce\" class as mentioned in the below example and ensure it has a unique ID. <code> Then invoke the tinymce helper to initialize TinyMCE: <code>. Approach: We have replaced drop-down used for giving scores in the review form with <link> . Now reviewer has to select a number of stars for each review questions instead of selecting a value from drop down. 3. No logical changes have been done to embed this feature in the form. Usage 1. bower install <link> . 2. Initializing star rating: To initialize star rating in the new select box apply the javascript as mentioned in the below example and ensure it has a unique ID. <code>. Approach: The current design of the system clears all the data in the text fields once a session for the user has been ended. We are making an AJAX call to save user entered text from the current text box as soon as user switches to next text box. This AJAX call is made every 10 seconds to save the content, also the user gets to see the green tick showing the last time when his user entered text has been saved. UTF-8 :To solve UTF-8 encoding problem, we can make a form accept only UTF-8 characters by using an attribute of the form tag. But most of the characters, including a lot of characters from languages other than English, are present in UTF-8 character set so the application will work perfectly fine on just allowing UTF-8 characters in the text box. Below is the code snippet on the same. <code> Spellcheck : Since we have used rich text format, spellcheck is being handled by the same and we have just enabled the spellcheck option for the browser. Below screens are for criterian based review forms. We have used DRY principle, we have made changes in the existing code and even used the same javascript functions. Manual test cases plans: 1. Field Widths ‚Äì If the screen contains text boxes that allow data entry and the width of data entered does not exceed the width of the form. 2. Save and Submit Review ‚Äì If the screen has the save and submit review buttons. 3. Cosmetic Inconsistencies ‚Äì The screen look, feel and design should match the other screens in your application. 4. Spelling ‚Äì Ensure that you have test cases that look for spelling errors. 6. Screen Font Type - Ensure that the screen font family matches from screen to screen. 7. Backlink - Ensure that backlink is present on the screen. 8. Review draft is saved - Ensure that user draft version is saved automatically in every 30 seconds. 9. Star rating- ensure that rating stars are displayed on the screen in place of the select dropdown. Automation testing: We are keeping the same test cases since as per our implementation to improve the review UI, we have not changed anything on the id and the class elements of the javascript, we have just changed the CSS elements, so basically, we have not broken the existing test cases. 1. Embedding more plugins in TinyMCE like inserting images, special characters, tables, etc. 2. Embedding code snippets from GitHub to enable the reviewer to link authors code using 'permalink' feature of GitHub. 3. Using multi-step review form having one review question per step. This will improve the user experience while reviewing others work. Demo <link> .", ["The writeup is very good, but The writeup could have been better if The writeup had explained the changes made to the code.", "The writeup would have been helpful to have a description of the changes, and how they were made.", "Also, The writeup would have helped to have more information about the changes that were made to code snippets.", "The code snippets are not shown in the document, but the code snippets themselves are.", "that The code snippets are not shown in the document, but the code snippets themselves are is a good example of how the code is described.", "But it would be better if the code snippet was shown in a larger font. "], [1.0, 0.0, 1.0, 0.0, 0.0, 0.0]], "213": ["Expertiza has two kinds of review strategies, as specified in the Review Strategy tab of assignment creation: Auto-selected Reviews are not preassigned, but when a student comes to do a review, (s)he can select from the reviews that are available at that point. Instructor-selected Instructor decides in advance who reviews whom.Until now, when the strategy is auto-selected, there has been no maximum on the number of reviews a student could select. So students can review as many topics as they want. Set a maximum on the number of reviews a student can choose with auto-selected reviewing. This requirement needs changes to the instructor view and student‚Äôs review page. Instructor view changes While creating the assignment, instructor should be able to specify maximum on the number of reviews done by each student. We added checkbox for this selection under Review Strategy tab of instructor view. If the instructor selects this checkbox, he‚Äôll be prompted to enter the value for the maximum reviews allowed for each student. There are no changes to assignments controller. Instructor view looks as shown below. <image> Requirement 1 - Instructor View Changes Student Topic Review page changes Students review topics page is displayed by list method of Student_review_controller . <image> Requirement 1 - Student View Changes. If the student selects some topic and want to drop for some reason, he/she need to contact instructor to drop that review. Student Topic Review page changes Students review topics page is displayed by list method of Student_review_controller . <image> Requirement 2 - Allow students to drop reviews <image> Requirement 2 - Allow students to drop reviews only if Review has not been submitted. While creating the assignments instructor can allow students to see their teammate score by selecting Show teammate reviews? But this option shows both the scores and teammate reviews on the grades/view_my_score page. Instructor view changes General tab of assignment creation has \"show teammate reviews ?\" option. \"show teammate scores ?\" , \"show teammate reviews?\" . \"Show teammate reviews ?\" This is how instructor view will change after implementation. <image> Requirement 3 - Instructor View Changes Changes to students view score page Code to display teammate reviews and scores is present in the /views/grades/view_my_scores file. If the instructor only selects show teammate scores? student will be able to see aggregate teammate score as shown below. <image> Requirement 3 - Show aggregate teammate scores Students will be able to see only reviews if the instructor selects show teammate reviews ? during assignment creation. <image> Requirement 3 -Show only teammate reviews Students will be able to see both the score and teammate reviews if the instructors checks both boxes from assignment configuration page. There is no option that lets reviewers see others‚Äô reviews of the same work after they submit their review of that work. Instructor view changes While creating the assignment, instructor should be able to specify if students should be allowed to see reviews done by other students for the same work. <image> Requirement 4 - Instructor view to allow students to review others work Changes to student_response controller and views The View link displays the submitted/in progress reviews of the student and is handled by the list action of the StudentReviewController (student_review_controller.rb) and the associated list view is \"/views/student_review/list.html.erb\" file. We plan to add another link Other Reviews to the partial _reponses view. This link would be visible only if the show_other_reviews option has been enabled by the instructor and the review for the topic has been submitted by the student. This link would be next to each of the Review Topics submitted by the student of that assignment. <image> Requirement 4 - Student view - link to view other submitted reviews <image> Requirement 4 - Student view - Reviews submitted by other reviewers for the same work. The existing implementation of expertiza doesn‚Äôt provide a student the option to not see review scores or the text feedback. Sometimes a student might just want to see the scores and not the reviews and other times might want to see the reviews and not the scores. If the value is set to 0 then the student can view both scores and feedback, if the value is set to 1 then the student can view only the scores and if the value is set to 2, then the student can view only the feedback. Student View Task page changes In the student task view, the page where the student can submit work, view scores, review others, etc. we added a new option for the student to change review settings. Clicking on that link takes the student to the change_reviewsettings page where the student can choose to either view both scores and feedback or just scores or feedback. Review page changes In the partial to view the reviews _review.html.erb, conditions have been added to check the value of the reviewsetting variable. Based on the value of the variable, either both the scores and feedback or just the scores or just the feedback is displayed to the student.", ["The document is very readable, but The document could have been better described.", "The document would have been helpful to have a description of the changes to the code.", "The code changes are not described in any detail.", "The code changes are just shown in the code, and it would have helped to have more detail on the changes.", "For example of that The code changes are just shown in the code, and it would have helped to have more detail on the changes : the code for the \"Show teammate scores\" section is not explained.", "that For example, the code for the \"Show teammate scores\" section is not explained is not a good example of how the code is being used.", "I would have liked to see a description on how the changes are made."], [1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0]], "214": ["Expertiza uses the jquery‚Äôs date-time picker widget for setting dates and times on various views. Over the years, different developers used different version and formats of the date-time picker due to which there are inconsistencies across the expertiza project. The main problem with the date-time picker is that the widget and the date-time formats used across the expertiza project are not consistent. Moreover, the JQuery based date-time UI widget itself is on version 0.8 which is extremely old and no longer consistent with expertiza's looks and feel. The primary task of the refactor was to find, refactor and make the date-time picker consistent at all places while exploring the possibility of updating the date-time picker to a newer version or completely replacing it by another better widget which works in conjunction with modern javascript libraries. The first step in the approach was to explore the current functionality of existing date time picker. According to our solution, the existing library needed to be replaced by the new gem. Further, necessary syntactical changes were made respective to the new gem. 1. <link> Moment.js is a lightweight javascript date library for parsing, manipulating, and formatting dates. The existing date-time picker widget was replaced by the new date-time picker in the following views: 1. Edit and create assignments - app/views/assignments/edit/_due_dates.html.erb This contains fields to set the submission and review deadlines for different rounds. The existing JQuery call to the date time picker was replaced by the call to the new widget. The form includes a selection of start date and end date for signup. Following changes were made to the file: Before: <code> After: <code> 3. New survey creation - app/views/survey_deployment/new.html.erb The page contains the form to allow the creation of new surveys. The survey start and end dates can be set using the form. The old code used two separate inline onClick event to call the same DateTime picker. Before: <code> After: <code> 4. Version logs - app/views/sign_up_sheet/_due_dates.html.erb The version logs file which is only accessible to the admins uses the date tie picker to filter the search results using the start and the end date. Following changes were made to the file: Before: <code> After: <code>. The old jquery based date-time picker was replaced by a new modern bootstrap based date-time picker as shown in the pictures below. The new bootstrap date-time picker widget also has different styles which can be implemented by changing the code as per the documentation <link> . Old Date-Time Picker <image> New Date-Time Picker <image>. This refactor was mainly concerned with the date-time picker widget UI. Thus most of the testing was done manually as automated testing cannot be used to test the widget. After refactoring each of the pages using the date-time widget, rigorous testing was done to check if the date-time picker selected the right date in appropriate formats. Automated testing was performed to test the models and controllers which relied on the date-time picker for its correct functioning. The new date-time picker widget was manually tested for correctness using the following manual steps: 1. Create and edit assignments Login into instructor account -> Select Manage Assignments -> Click on the plus sign to the right -> Fill in the relevant details -> In the 'due dates' enter the submission and review deadline using the new date time picker widget -> Save -> Check if assignment with proper deadline is being created. 2. New survey creation Login into instructor account -> Select Manage assignments -> From the list of assignments select an assignment and select the 'assign survey' action-> Fill in the relevant details -> Enter the survey start and end date using the new date time picker widget -> Save -> Check if the survey is created with proper deadline. Also the datetimepicker feature with start date and end date detection should work for both admins and super-admins. <image> <image> <image>. <image>. ( <link> ) 2. GemFile.lock ( <link> ) 3. application.js ( <link> ) 4. application.scss ( <link> ) 5. assignments/edit/_due_dates.html.erb ( <link> ) 6. sign_up_sheet/_due_dates.html.erb ( <link> ) 7. survey_deployments ( <link> ) 8. _row_header.html.erb ( <link> ) 9. search.html.erb ( <link> ) 10. factories.rb ( <link> ) 11. versions_search_spec.rb ( <link> ) 12. list.html.erb ( <link> ). Github Repo: <link> Pull Request: <link>.", ["The writeup is very readable.", "The writeup is very detailed, but The writeup does not explain the changes made.", "The code snippets are not explained.", "The code snippets are just shown, but The code snippets should be explained.", "The code changes are not described in prose.", "that The code changes are not described in prose is a good example of a design doc.", "I would have liked to see more detail on The code changes.", "Also, The code changes should have been described in more detail."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0]], "215": ["The Expertiza project is software to create reusable learning objects through peer review. Expertiza is an open source project and is based on ‚ÄúRuby on Rails‚Äù framework. Expertiza should be able to distribute surveys to the users. The survey can be one of the following: 1. Course survey (all the participants of the course can take it). 2. Global survey (all the users in Expertiza can take it). The survey can also be targeted (the admin can specify a group of people who will receive this survey). The three kinds of surveys in this project are: 1. 1. Assignment Survey questionnaire 2. 2. Global survey questionnaire 3. 3. Course evaluation questionnaire. 1. Survey questionnaire should be a subclass of questionnaire. 2. The creation, editing, filling in, and checking that all the questions have been answered survey should be similar to the procedure used for other types of questionnaires (e.g. peer-review questionnaires). 4. We should use the same controller method to take the survey as to fill in the peer-review, namely, response_controller. 5. We should use the same code to display the existing survey responses as to display the responses in peer reviews. 6. For each course or assignment, the admin/instructor should be able to create a survey and have some (or all) of the participants receive the survey. Assignment Survey questionnaire, Global Survey questionnaire and Course Evaluation Questionnaire are the existing models which are subclasses of questionnaire. Their display types are survey, global survey and course evaluation respectively. <image>. 1. There is a constraint that the survey has to be filled in using the same controller method as used for filling in peer review, namely response_controller. Also, the same code has to be used to display the existing survey responses as to display the responses in peer review. 2. The response_controller can be used to make sure that the survey can be taken only once by each user, depending upon the survey type and the users who are allowed to access (can be listed using 'action_allowed?'). The answers can be saved using the 'saving' method. Also, the responses can be viewed once, the survey is submitted. 1. Instructor or admin both can add survey for any course or assignment 1. The creator would be able to select the participants based on the scope of the survey, that is, all the students or all the Expertiza users or specific group of people. 2. These questions will be by default added to every survey the user creates. 4. Or, there can be option of separating the global survey and course survey. The quiz taker will take the global survey first and then the course survey. 3. In our part of project implementation, there is no need to incorporate any changes to the Assignment Questionnaire. 1. Adding columns to the 'Assignments' table: survey_id and global_survey_id. 2. Adding columns to the 'Course' table: survey_id and global_survey_id. 1. We update 'survey_id' and 'global_survey_id' in the 'assignments' table. 2. This requires checking if any entry for 'survey_id' is already present: Case TRUE: Warning to user 'Update to an existing survey'. 1. The survey is mapped to participants through 'participants' table. 2. In 'participants' table: <code> 1. Using the 'type' we can get the type of object i.e. assignment or course, and then using parent_id the particular instance of that object can be mapped to the survey and listed for the user/participant. 1. There is no explicit assigning of surveys to participants. Updating the new columns in 'assignments' and and 'courses' table is sufficient for assigning the surveys. submitted or not submitted, the user/participant can view or update, respectively, the surveys. 1. Checking the 'assignments' or 'courses' the participant has enrolled in. 2. Checking if the 'assignments' or 'courses'have active surveys (survey_id != NULL). 3. If participant has already responded to the survey, only 'View' option is available. 1. There is a global table for all the responses in Expertiza-'response_map'. All the responses in expertiza are saved in this table. 2. When participant responds to the survey, based on the survey type, the entry in the response_map is: <code> 1. The other entries are: <code> <image>. 2. Click on Manage -> Questionnaires-> Survey / Global Survey/ Course evaluation. 3. Create a new Survey/ Global Survey/ Course evaluation filling in the parameters asked for. <image> Login as student: 1. The course survey is for all the students, whereas the global survey is for a few random students using Expertiza. 2. Take the survey visible through your account.", ["The writeup is not very detailed, but The writeup is good.", "The writeup is not clear what the changes are, and the changes would be helpful to have a description of the changes made.", "The code snippets are not very long, and The code snippets should be separated out.", "The code snippets should be shown in a separate section.", "Also, the code is not described in any detail.", "that Also, the code is not described in any detail is a good example of a \"no-obvious\" design pattern.", "I would have liked to see more detail on the changes to the code."], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0]], "216": ["A staggered-deadline assignment is an assignment in which different topics have different deadlines. It can be pretty useful if different topics within an assignment can have different deadlines for submission as well as reviews. Problem 2: Manual submission and review deadline entry required for all topics Currently system requires instructor to enter submission and review deadlines for all topics. Currently this is happening, but only in case of assignments which do not have staggered deadlines. If the assignment is not a staggered deadline assignment and if its submission deadline has passed, then we prevent students from signing up for any topic in that assignment. <code> We will have to replicate a similar logic for staggered deadline assignments. The problem here is that for staggered deadline assignments, different topics might have different deadlines. <code> First we check if the topic has a specific different deadline set by the instructor, and if not, then its deadline will be the same as the common deadline for the assignment. We do this only for staggered deadline assignments as for the other assignments, this check has already taken place. Our requirement is to provide the instructor with the option to select a relative date for the submission review deadlines based on the Round1 submission deadline. The instructor would however like the ability to manually enter a custom date according to his needs. One way of dealing with the above problem would be to provide an option for the other date fields for a given assignment to chose a relative date based on the initial submission date in addition to the ability to override and manually enter a custom date. Example: 3 days after Submission deadline, 6 days after re-submission deadline. The first step will be to make this assignment a staggered deadline assignment. For doing this edit the assignment and under the General tab, make this a staggered deadline assignment. Part1: Instructor wants to assign default deadlines to a staggered assignment In this case, the default deadlines for the assignment will be filled automatically based on the submission date for Round 1. In this case no further input from the instructor is required apart from selecting the round 1 submission deadline 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. Part2: Instructor wants to enter custom deadlines for a staggered assignment In this case, the instructor has two options. He can either chose a deadline from a list of other relative deadlines from the dropdown menu for a particular round or all rounds, or he can decide to override the system enter a date manually by selecting the ‚ÄúCustom Date‚Äù option. 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. 6. Change all the deadlines for the other rounds according to your requirements by choosing the \"Custom Date\" option Part3: Instructor wants to enter a custom deadline only for a particular round In this case, the instructor can set the submission deadline for round 1. This would result in all deadlines being populated relatively according to the pre-set values. The instructor can then, if need be, modify the deadline for a particular round by either selecting a different relative date or by entering a custom date manually. 1. Login as instructor6 2. Go to assignments and either create a new one or edit a pre-existing one. 3. Change assignment type to staggered. 4. Chose a submission deadline for round 1. 5. Deadlines for all other rounds will be autopopulated. 6. Change all the deadlines for the necessary round by either entering a manual date or by choosing a different relative date from the dropdown. 1. Login as instructor6 2. Go to courses tab 3. For CSC/ECE 506, Spring 2014, go to edit assignments and choose New problems B 4. Edit this and make it a staggered deadline assignment. Also change the review due dates for the first round to any date beyond today 5. Now go back to assignments page and go to view review report for this assignment 6. We focus on student 5059 for this case. 7. This student has one review, go ahead and grade this review. 12. Now revert back to instructor6 and again go to view review report for this assignment. 3. Revert back to instructor6 and again go to view review report for this assignment. We created 4 new topics for this assignment. Testing for modification of dates in staggered deadlines. Case 1: Attempting to enter a date for a round that was before the previous round. Case 2: Attempting to enter a date for round1, round2 or round 3 that is out of invalid (Deadlines being before current date). Case 3: Entering an incorrect date when manually entering a deadline for a particular round for a staggered deadline.", ["The writeup is very good, but The writeup could have been improved by adding more detail to the code.", "The writeup would have been helpful to have a description of the changes made to the project.", "Also, the description of what was done in the tests is not very clear.", "The test plan is not described, and The test plan would have helped to have more detail on the tests.", "I would have liked to see a description on how the tests were tested."], [1.0, 1.0, 1.0, 1.0, 1.0]], "217": ["Expertiza is an online web application for educational purpose, and is developed using Ruby on Rails. Instructors are able to create, modify, delete and view assignments and students are able to form teams, submit assignments and make reviews using this application. The tree-display.js and its tree_display_controller.rb files are designed to allow Expertiza users to view their Assignments, Courses and Questionnaires at one place. This is the primary control page, as well as the home page for instructors on Expertiza which allows them to create, modify, delete and view Assignments. The primary problem with this is that both the files, due to their bulky and unoptimized methods, slow the rendering of UI on screen. The methods in these files can be studied and refactored to improve the overall performance of this controller and its corresponding UI. Moreover, any obsolete or unused methods can be removed and DRY principle should be implemented. This project mostly revolves around these 2 files, and would involve refactoring JavaScript more than Ruby on Rails. There may be unused methods in the controller or java script file due to previous development, maintenance and refactoring. Loading speed of the web page is slowed down by repeated interface with database regarding to same variables but by different methods. To find out unused methods in dynamically typed language like Ruby is difficult, thus our team is focusing on the suspicious methods which have neither comments nor references showing in github. All suspicious methods are tested and following shows the confirmed used methods as well as their functionality. goto_... Methods are called when the instructor clicks on the corresponding node under the \"Manage\" menu (e.g. \"goto_quetionnaires\" is called when clicking on \"Questionnaire\" node.) and the user will get redirected to corresponding pages. confirm method is called when the instructor tries to delete a course/assignment/review and chooses \"yes\" at the confirmation page. folder_node_ng_getter functions to render json of the node. (e.g. Returning all the courses data when clicking on \"Course\" node.). 1. We found one unused method bridge_to_is_available and delete it. <image>. 1. We simplified the month string representation in file app/assets/javascripts/tree_display.jsx <image> 2. We found the goto_* functions in file app/controllers/tree_display_controller.rb are not necessary and can be replaced with the goto_controller(name_parameter). However, they are called outside of the files in our scope and we did not modify them for now. <image> 3. We found a confusing variable name \"res2\" in file app/controllers/tree_display_controller.rb and changed. <image> 4. We found two confusing method names \"update_is_available\" and \"update_is_available_2\" and that \"update_is_available\" is used for checking the accessibility of users who are tas/owners while \"update_is_available_2\" is used for checking the accessibility of user who are instructors. <code> is changed to <code> and <code> is changed to <code> 5. We found three confusing method names \"initialize_fnode_2\" and \"children_node_2_ng\" and that \"res_node_for_child_2\" for corresponding nested chidren nodes (the subfolders in the tree display). <code> is changed to <code> , <code> is changed to <code> and <code> is changed to <code> 6. We renamed a few variable and method names related to update_tmp_obj <code> is changed to <code> and <code> is changed to <code>. The tree_display.js and tree_display_controller.rb are mainly related to the \"Manage\" tab and its child nodes. Thus, the following steps are needed to test the functionality from UI: 1. Log in as an instructor. 2. Click on the \"Manage\" tab as well as its child node on the tool bar and to test if they are redirected to the correct page. (Child node means \"Users\", \"Questionnaires\", \"Courses\", etc. under \"Manage\" menu or \"Review Rubrics\", \"Metareview Rubrics\", etc. under \"Questionnaires\" menu. And the reason calling it \"child node\" is because it is the variable name used in code.) 3. Click on the displayed contents to test if the details can be displayed properly. We passed all Travis CI build and Codeclimate checks.", ["The writeup is very good, but The writeup could have been improved by showing the code changes in more detail.", "The writeup would have been helpful to show the code snippets, and to explain the changes.", "Also, The writeup would have helped to show how the code was changed.", "the code snippets are not shown in the document, and the document would be helpful to have a link to the code.", "This would have made it easier to read."], [0.0, 1.0, 0.0, 0.0, 1.0]], "218": ["E1472: Connect changes to score model with changes to score views Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.1.1.1.1. <link> 1.1.1.1.2. <link> 1.1.1.1.3. <link> 1.1.1.5. <link> 1.1.1.6. <link> 1.1.1.7. <link> 1.4. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.5. <link> 1.1.1. <link> 1.1.2. <link> 1.6. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.7. <link> 1.8. <link> 1.1.1. <link> 1.1.2. <link> 1.9. <link> 1.10. <link> 1.1.1. <link> 1.1.2. <link> 1.11. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.12. <link> 1.13. <link>. One of the Expertiza features is to report scores to both students and the instructor. The student can see the feedback from other students, such as the max score, the min score and the average score. Current System (After Refactoring Grades_controller): <link> <code> Student: user1600 and user1601 Password: test Original System (Before Refactoring Grades_controller): <link> <code> Student: user1600 and user1601 Password: test All our test result based on the following test cases on expertiza, please follow these step to get it. <code> Student: <code>. <code>. <code> <code> <code> <code> <code> <code>. <code> <code>. <code> <code>. <code>. <code>. <code>. <code>. <code>. The view method reports everyone‚Äôs grades to an instructor, and the view_my_scores method reports peer-review scores to a student. The grades_controller class is responsible for displaying grades to students (via view_my_scores) and instructors or Teaching Assistant (via the view method). <image>. 1. view method : handle the functionality of viewing the assignments of the whole class. 1. view_my_scores : take care of displaying the scores pertaining to an assignment to a single user. <image> The figure above mainly illustrates the process of viewing scores for different actors. The instructor and teaching assistant are able to view scores of all the team and could see the reviews of a selected team. Student actor can see his own scores and reviews. For example, when a student want to view his/her grades, there must be something in the database (precondition). <image> The RScore class stores the variables maximum,minimum, average review scores. Create rscore class in models (rscore.rb): <code>. Before: (views/grades/_participant.html.erb) <code> After: (views/grades/_participant.html.erb) <code>. Before :(views/grades/_participant.html.erb) <code> After :(model/assignment_participant.rb) <code>. At the beginning of the final project, the function of viewing scores is very slow by students and instructor. 1. Modify get_assessments_for method in response_map.rb After doing this, the time cost of view function decreased by more than 90% Before Refactoring: <code> After Refactoring: <code>. <table> 1. Original Time for Instructor to View all scores <image> Original Time for Instructor to View all scores 1. Time for Instructor to View all scores after Refactoring <image> Time for Instructor to View all scores after Refactoring 1. Original Time for Student to View all scores <image> Original Time for Student to View all scores 1. Time for Student to View all scores after Refactoring <image> Time for Student to View all scores after Refactoring. <image>. <image>. <image>. <link> <link> <link> <link> <link>. We will stick to the UI design of the grades view and see what else we can do to further improve the performance of the system.", ["The document is very readable, but The document does not explain the changes made to the code.", "The document is not clear what the changes made to the code are, and the changes made to the code would be helpful to see the code snippets in the code to understand what was done.", "the code snippets in the code are not shown in The document, but the code is shown in a table.", "that the code snippets in the code are not shown in The document, but the code is shown in a table is not a good way to show the changes.", "I would have liked to see more of the code changes."], [0.0, 0.0, 0.0, 0.0, 1.0]], "219": ["Expertiza is a web application developed using Ruby on Rails that serves as a peer-review system. The application allows students to submit and peer-review learning objects (articles, code, web sites, etc)<ref> <link> </ref><ref> <link> </ref>. It is an open source project and it's codebase is maintained in GitHub. We are contributing to Expertiza as a part of our Object-Oriented Design and Development's Open-Source Software (OSS) Project. Our goal in this project is to refactor the assignment_participant model . In this Wiki Page, we will explain the changes that we have made for the same. Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.4. <link>. The assignment_participant model is subclass of Participant model and is used to maintain the list of students/users participating in a given assignment. The changes that are needed to be done are described as follows:<ref> <link> </ref> 1. Rename methods prefixed with ‚Äúget‚Äù. 2. Move methods to appropriate file helper classes. 3. Move methods to appropriate models. 4. Remove unused methods 5. Use good Ruby style guidelines in the code. <references/>.", ["The wiki page is very good.", "The wiki page explains the changes that were made, and the changes made.", "The code is very readable.", "I would have liked to see more detail on the changes.", "Also, The code is not very readable, and The code would have been better to have a link to The code.", "that Also, The code is not very readable, and The code would have been better to have a link to The code is a good example of how The code should be changed."], [1.0, 1.0, 0.0, 1.0, 1.0, 1.0]], "220": ["response.rb is the class that manages the response to all rubrics in Expertiza. if someone fills out a review form, the instance of the review form is a Response. If someone gives feedback (a ‚Äúrejoinder‚Äù) to an author, that is a Response too. Or if someone evaluates a teammate contribution, fills out a survey, or takes a quiz, they are creating a Response. Note: Method display_as_html writes the HTML for displaying a rubric. This would ordinarily be view code, but it is used by so many different views that it is done here. Questions are written out in the order of their sequence number (anyone who creates a rubric can specify sequence numbers for questions). After all questions are displayed, there is a blank for an additional comment. <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing <image> Auto selected Reviewing. When the get_maximum_score() function is called it takes care of the weight of the question. It multiplies the weight to the score and adds it to the final score. <code>. All the email code has been shifted to the mailers. Comments have been removed. <image> Auto selected Reviewing. response_helper.rb contains helper methods that display the questionnaires and rearrange questions so that the most frequently answered questions are at the bottom while the less frequently answered questions are at the top. Method is no longer being used in Expertiza and has been removed. Method is no longer being used in Expertiza and has been removed. <image> Auto selected Reviewing.", ["The wiki page is very readable, but The wiki page would have been better if The wiki page had a more detailed description of the changes made.", "The wiki page would have also been helpful to have a link to the code snippets that were changed.", "The code snippets are not shown in the document, but the code is shown in a separate tab.", "This is not a good way to show the changes.", "I would have liked to see more of the code changes.", "It would be better to show The code snippets in a table of contents."], [1.0, 1.0, 0.0, 1.0, 0.0, 1.0]], "221": ["According to the existing code workflow, the assignment of topics to teams are based on FCFS (first come first serve) basis, where a team which first signs up for a topic gets the topic while other teams are waitlisted on the same topic. Factors such as team size are not considered which are important while assigning a topic to the team and potentially can reduce many issues faced by the current system. 1. One student can sign up only for a single topic. In cases where many topics are available, a student is forced to choose a single topic among many available topics which can be a difficult task. 3. If all the teams choose a handful of topics among many topics, it would also result in unnecessary additions in the waitlist queue for those few topics resulting in a situation where all the topics are not uniformly distributed among all the teams 4. Before, signing up, if more than one student forms a team and if each student belonging to the same team tries to sign up for different topics, than those topics are allotted to individual students resulting in a situation where a team can hold more than one topic. The algorithm works by considering every team as strength of 1, representing the student in the team. After sign up the topic would be allotted to the team based on a lottery system where a team is randomly selected for every topic. the intelligent assignment of teams. This approach is based on two important factors: 1. Team strength 2. Priority order of the topics submitted by the team. An added advantage of this approach is that, unlike the previous system, the intelligent team assignment system allows each team to bid for multiple topics which increases the chance of every team getting at least one topic that they placed their bid on. Each team can place their bids in priority order, the priority of the bids are also considered while assigning topics to the teams. For example: If TeamA is up to its maximum strength and bids for Topic1 , Topic2 , Topic3 where Topic1 has the maximum priority then TeamA has larger chance of being assigned Topic1 , but if Topic1 is already assigned (to a different team which had equal probability of getting the same topic based on team strength and bid priority) then Topic2 would be considered for assignment followed by Topic3 . Thus the priority mentioned by each team is also an important factor for assigning topics to teams. 1. Initially, every student is a team of 1 member. Before the sign up process takes place, students can merge their teams to form a larger team. 2. It is preferred that the number of members in the team should be as close as maximum strength allowed for each team to increase the chance of winning a topic. 1. Every team is allowed x bids that they can use during the sign up process to select the topics of their choice. [The value of x is decided by the instructor using class strength, number of topics created for an assignment and maximum team strength allowed for that assignment.] 2. During the sign up process, the team can place x bids on x topics of their choice in a priority order. 1. As each team can place their bids on the available topics based on topic priority. Hence every team gets to choose more than one topic of their choice. 2. The teams are assigned topics based on modified <link> <ref> <link> </ref> algorithm which considers factors such as team size and priority ensuring that the topics are no longer assigned based on FCFS basis. This approach addresses the most important issue where a topic is not assigned to the team just because the team was late to sign up for the topic as compared to the other teams. This flow chart illustrates the \"modified stable matching\" algorithm used to assign topics to teams based on the strength of the teams(bidder) and the priority in which they bid for the topic. This algorithm takes two parameters as input 1. A list of teams which are un-assigned any topic 2. A hash of team and topics which were assigned Algorithm 1. Sort the list of teams in descending order of team size 2. For each team a.Get the team_size and topics that the team placed their bid on b.Arrange the topics according to the priority order mentioned by the team i. For each of the topic, check which team is assigned this topic and store its team strength in assigned_team_size ii. If the team which is assigned this topic is not up to maximum strength and if the ( team_size + assigned_team_size <= max_strength allowed for each team) then assign this team the topic. They can associate each bid with a priority. This would in turn start assigning teams with topics based on their bid preferences. The table bid is supposed to store all the bids on the topics with their priority. Current requirement is to have only one bid per topic by an owner. When the instructor starts the intelligent assignment of topics to teams, IntelligentAssignmentController triggers the assignment algorithm. The students interact with AssignmentTopicView which lists down all the topics for the assignment and allows students to bid for topics with priority.", ["The writeup is very good, but The writeup could have been more detailed.", "The writeup would have been helpful to have a more detailed description of the changes made to the code.", "Also, The writeup would have helped to have more information about the changes to the code."], [1.0, 1.0, 1.0]], "222": ["Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.1.7. <link>. <link> is an open source project based on the <link> framework. Expertiza provides a platform for instructors to create assignments and for students to set up teams to facilitate early communication and teamwork in these assignments. Expertiza also provides an environment where students can peer review other students, allowing these users to view feedback on their assignments in a timely manner. Expertiza supports submission across various document types, including the URLs and wiki pages. The following items were improved in the refactoring of the given file: 1. Long blocks of code converted into separate methods 2. Ambiguous variable names changed to meaningful variable names 3. Macros added to replace hard-coded values 4. Code clarity 5. Test Coverage. The Review Mapping Controller handles mapping a given group's assignment submission to students working in other groups for peer review. The controller handles items associated with routing submissions to reviewers, handling permissions for instructor review calibration, and controlling drafts or uncompleted reviews. Included in this controller is the ability for the instructor to specify the number of required reviews per student or the number of reviewers per team in order to have group submission automatically sent to all students' review queues. in automatic_review_mapping method, the following bits of code were added to separate methods: <code> The above was moved into the team_assignment method that assigns users to a new team. <code> Again, the above is a unnecessarily large 'if' block that could be moved to another method, one that was named validate_review_selection The following is the final block of code moved to another method from automatic_review_mapping: <code> This block was moved to the maps_strategies_for_artifacts method. Next, the assign_reviewers_for_team method was evaluated for refactor. The following blocks of code were found that seemed to go past simply what the name of the method entailed, so they were moved to other methods: <code> The above performs its own standalone operation, it's not needed in an already long method that has its own priorities. As such, it was moved to generate_insufficient_review_collection. <code> The above creates a new hash table and performs standalone operations on it, and it is used nowhere else in the assign_reviewers_for_team method. It was moved to generate_teams_hash. <code> Although the above could stay as-is in assign_reviewers_for_team, there already seems to be too much functionality in this method, which is why it was moved to insufficient_assign_reviewers. There are existing RSpec tests (spec\\controllers\\review_mapping_controller_spec.rb) for the given file; we were tasked with ensuring that our changes did not break any of the existing tests, thus retaining the previous code's functionality. For the commit associated with our final submission, all existing tests pass according to travis-ci. 1. <link> 2. <link> 3. <link>.", ["The writeup is very good, but The writeup could have been improved by showing the code changes, rather than just saying what they did.", "The writeup would have been helpful to show the code snippets that were changed, and to explain why they were changed.", "The code snippets are not explained in any detail.", "The code snippets are just shown in a list of code snippets, and it would have helped to show The code snippets in more detail."], [1.0, 1.0, 0.0, 1.0]], "223": ["The Expertiza project is system for using peer review to create reusable learning objects. Students do different assignments; then peer review selects the best work in each category, and assembles it to create a single unit.<ref> <link> </ref>. Used on the admin side of Expertiza for creating/ editing questionnaires (rubrics, surveys and quizzes). It helps in add/removing questions, options, etc for a questionnaire. Very big controller that handles a lot more than the name suggests. Functionalities need to be moved to appropriate controllers. Quiz methods are should be treated the same as any other type of questionnaire; differences between quiz questionnaires and other questionnaires should be implemented in the model class, quiz_questionnaire Turn the questionnaire into a ‚Äúform object.‚Äù The ..._questions methods: save_new_questions, delete_questions, save_questions should be in a separate class. Other classes involved: questionnaire.rb quiz_questionnaire.rb questions_controller.rb What needs to be done: Move quiz related functions to quiz_questionnaire.rb . copy, update_quiz, valid_quiz methods, clone_questionnaire_details is too long. Debug output (print statements) should be removed. Understand the functions in the controller and comment them. Ensure that the code is understandable to the next programmer who works on it. What We Have Done Method Refactoring <table> Format Refactoring Case 1: Loop Condition Change all the looping conditions into one format Before <code> After <code> Case 2: If Condition Change all the if conditions into ruby format Before <code> After <code> Case 3: Name Change all the name from \"JAVA name\" to \"Ruby name\" Before <code> After <code> Refactoring Example In models/questionnaires.rb , we add copy_questionnaires method, as shown below: <code> References <references/>. <table>. Change all the looping conditions into one format Before <code> After <code>. Change all the if conditions into ruby format Before <code> After <code>. Change all the name from \"JAVA name\" to \"Ruby name\" Before <code> After <code>. In models/questionnaires.rb , we add copy_questionnaires method, as shown below: <code>. <references/>.", ["Very good description of the changes made.", "It would have been better to have included more detail on the changes.", "The code snippets are not very readable.", "The code snippets are not clearly separated from The code snippets.", "that The code snippets are not clearly separated from The code snippets is a good start.", "I would have liked to see more detail about the changes to the code.", "Also, the code changes are not described in any detail."], [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0]], "224": ["In this project, we have unit tested various methods in SignUpSheetController.rb and SignUpSheet.rb as well as refactoring these methods. We first wrote unit tests to ensure we had adequate coverage for our methods. Then, we refactored our methods with confidence found from our unit tests. We found that directly testing the functions that we refactored provided better assurances that our refactorings were correct rather than manual testing the user interface. For our unit testing, we used the RSpec framework. We choose this framework since legacy tests of our methods were implemented with RSpec<ref> <link> </ref> . We also utilized the RSpec-Mocks<ref> <link> </ref> to test functions related to the database without having to use fixtures. We wrote multiple controller tests and model tests for corresponding functions so as to test various scenarios and get 100% test coverage. We sought to obtain this high level of coverage to make refactoring more precise. We believe that highly tested code is resilient errors that could occur when refactoring. Before we started working on Expertiza<ref> <link> </ref>, running RSpec on the codebase resulted in 992 / 4184 lines of code (23.71%) covered. After our work, running RSpec on the codebase resulted in 1144 / 4278 lines of code (26.74%) covered. E.g. If you run the test in spec/controllers/sign_up_sheet_spec.rb by command \"rspec spec/controllers/sign_up_sheet_spec.rb\", then you can see the 100% line coverage for controller method save_topic_deadlines() in sign_up_sheet_controller.rb. For checking the coverage, open the index.html page coverage folder and go to respective controller. Similar, run the tests in Model and Controllers folder to see 100% test coverage for following functions. 1. Create() in SignUpSheetController 2. self.add_signup_topic() in SignUpSheet 3. save_topic_deadlines() in SignUpSheetController 4. self.confirmTopic() in SignUpSheet. We performed various refactorings on our code to increase the codes readability and remove redundancy. We extracted variable from complicated statements to increase the readability of the code. In the code base we were working with, there were a variety of lines of code that were more than 80 characters long. These lines of code were hard to read. So, we split them up into multiple lines of code by extracting statements found in function calls into their own variable. Example: <code> Became: <code>. We attempted to enforce good Ruby conventions while refactoring the code<ref> <link> </ref>. This entails doing things like correcting the formatting of the code to make it more readable. In addition to this, we converted a variety of iterators to follow good ruby conventions. For example, sign_up_sheet.rb had the function self.add_sign_up_topic(assignment_id) which contained an iteration through a set of topics while manually maintaining an index variable. Manually maintaining the index variable can be problematic for future maintenance. <code> We replaced these with the Ruby each_with_index iterator. This allows us to pass the responsibility of maintaining the count of the index to the iterator. <code> We replaced \"=>\" while passing parameter by colon (:) So that <code> became <code>. We have refactored the methods which were doing a lot of things into two or more methods so as to segregate the functionality and following the basic principal that one method should do only one thing. Also, this helped in making the methods more readable and easy to understand. E.g. In sign_up_sheet.rb Model, \"def sign_up_wailisted()\" is the new method extracted from original method self.confirmTopic(). There are many more such examples which are done as part of refactoring. 1. Clone the repo <code> 2. Change current directory to cloned repository 3. Run Command: <code> <code> 4. Check coverage: Open overage/index.html in browser and check line coverage for following methods 1.1. Create() in sign_up_sheet_controller.rb in Controllers 1.2. self.add_signup_topic() in sign_up_sheet.rb Models 1.3. save_topic_deadlines() in sign_up_sheet_controller.rb in Controllers 1.4. self.confirmTopic() in sign_up_sheet.rb in Models. We were not able to recreate the problem found in issue 580. After multiple attempts of trying to recreate the bug we began to examine the source code. We believe that someone else has already fixed the bug before we started working on the project. <references></references>.", ["The writeup is very good.", "The writeup explains the changes well, and it's easy to read.", "However, The writeup would have been better to show the code changes, rather than just the code.", "The code is not very readable.", "I would have liked to see more detail on the code snippets.", "Also, The code is too long.", "There should be a section on how to fix The code, and how to test the code that is being refactored."], [1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]], "225": ["This page provides a description of the Expertiza based OSS project for Fall 2017. Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.4. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.6. <link> 1.1.7. <link>. <link> is an open source project. It is based on <link> framework. Expertiza is a web application which allows instructors to create new assignments, list of topics which students can sign up for. Students can also form teams for various assignments and projects. The following tasks were required to be completed in this project: 1. Issue #80: Add past-due assignments to task list. 2. Highlight with specific colors current and next due dates. 1. Past Due assignments are not present in the task list. If a student is a participant of an assignment and has not submitted the assignment before the assignment due date/deadline, then the assignment is considered as a past due/overdue assignment for that student. These past due assignments are not present in the task list and we have added this functionality to the existing system. 1. Highlighting next due dates. Different To do tasks in the task list with different due dates are highlighted with different shades of red color. An assignment that has to be submitted earlier has a redder color than assignments that have later due dates. 1. The function overdue_tasks? is added in the model student_task.rb file to fetch those tasks with current stage set as finished and which were not started by the student. <code> 1. In the list.html.erb file we used the tasks not started section as a template to construct the past due assignments section. <code> 1. The past due assignments variable from the controller contains the list of past due assignments as its contents which are looped through with a do each loop. The participant, stage and topic_id are used to obtain the due date of the assignment. Then the assignment name and its deadline are displayed. <code> 1. To highlight with specific colors current and next due dates we made several changes to the currently existing list.html.erb file. <code> The rgb() style color attribute is used to set the color of a html tag. A variable r is used to set the red color parameter in rgb function. Initially it is set to 255 which is the Darkest shade of red that is possible. Then a variable step is used to determine by what value the r variable must decrease to lessen the intensity of the red color. The size of the task list is used to initialize the step value. An if condition is used to make sure that step is initialized only when there are tasks to be completed. The task list before and after the changes are shown below. <image>. <image> The student in the example above is a participant in 6 current assignments that are displayed in the task not yet started section of the task list. Each of those is highlighted with colours as described. The student has failed to submit 6 other assignments before their respective due dates and they appear in the past-due assignments section of the task list. Following are a few test cases with respect to our code changes that can be tried from UI: 1. Login as student and check if past due assignments section is present on the task list. 2. If no such section is present, the student does not have any past due assignments. 3. Log in as an instructor and create a new assignment. 4. Set the deadline for the assignment to a date and time few minutes from the current date and time. 5. Assign the student being tested as a participant to the created assignment. 6. Login as the student and check the task list after the due date for the assignment has passed. 7. The new assignment will be in the Past Due assignment section. To check if the Tasks not yet started section has assignments highlighted with colours: 1. Login as a student and check if there are any assignments in tasks not started section. 2. If no assignments are present, the student is not involved with any current assignments. 3. Log in as an instructor and add the student as a participant to few assignments. 4. Log in as the student and now see that the assignments in tasks not yet started section are highlighted with colours as described in the wiki. Edge Cases The edge case for when there are no past due assignments for a student has been handled. In this case, no past due assignments are displayed. The edge case for when there is only one assignment in the tasks not yet started section has been handled. In this case, the assignment is highlighted with a dark red colour. 1. <link> 2. <link>.", ["The wiki page is very good.", "The wiki page explains the changes that were made, and the changes to the existing code.", "The code changes are described well.", "However, the code changes to be made are not described in detail.", "This is a good thing.", "I would have liked to see more detail on the existing code.", "The code snippets are not shown, and it would have been better to show the code snippets in the wiki.", "Also, the test plan is not described.", "There is no description of the tests."], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0]], "226": ["This means that refactoring projects, testing projects, and Mozilla projects need to use the same rubric. The feature concluded with allowing 4 rubric scenarios for an assignment: 1. Rubric does not vary by round or by topic. 2. Rubric varies by round, but not by topic. 3. Rubric varies by topic, but not by round. 4. Rubric varies by both round and topic. Our proposed solution keeps the previous implementation, but changes rubric filtering to allow instructors/TAs to use filters that are not theirs. Following the <link> footsteps, this diagram depicts the interactions between an instructor and an assignment. Alongside editing topics and due dates, the instructor can edit what rubrics are assigned to an assignment. The topics tab allows instructors to specify which rubric associates with each topic while the rubrics tab lets the instructor determine if the assignment will vary by topic or not. <image>. Now find questionnaire by assignment questionnaire and type rather than assignment/type/round_number/topic_id. 1.3. assignment_participant.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.4. feedback_response_map.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.5. on_the_fly_calc.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.6. self_review_response_map.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.7. tag_prompt_deployment.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1. Views 1.1. edit/_rubrics.html.erb : Modify to set assignment vary by round/topic fields instead of non persisted flags 1. Helpers 1.1. assignment_helper.rb : Refactor by moving function to find questionnaire / assignment questionnaire to assignment_form.rb. 1.2. grades_helper.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1.3. summary_helper.rb : Refactor to use the persisted assignment fields for varying by topic/round instead of using methods 1. DB Migrate 1.1. XXXXXXXXX_add_vary_by_topic_to_assignments.rb : Migration to add ‚Äúvary by topic‚Äù field to assignment 1.2. XXXXXXXXX_add_vary_by_round_to_assignments.rb : Migration to add ‚Äúvary by round‚Äù field to assignment 1. All of the related test files to accommodate the above changes. <image> In addition to that, we will be adding two additional boolean fields to the assignment schema: vary_by_round and vary_by_topic . As discussed earlier, in the previous implementation, these were methods that were called to determine if an assignment varied by round/topic rather than a persisted value. It would always query for the AQs by assignment id, current round number, and current topic id. However, if the assignment did not have reviews that vary by round or topic, these values would be nil on the AQ, and the previous query would fail. This means that: 1. If an assignment does not vary by round or by topic, the query for AQs will be by assignment id only. 2. If the assignment varies by round but not topic, the query for AQs will be by assignment id and round number. <image>. Here we describe manual UI Testing steps to edit an existing assignment to allow it have to specialized rubrics for different topic types. 1. Login to Expertiza using instructor account (For testing, username: instructor6 , password: password ) 2. Click on Manage > Assignments 3. Click on Edit option for any assignment, you should get following view. <image> 1. Click on Rubrics tab. You will see 2 checkboxes ( Review rubric varies by round? , Review rubric varies by topic? ) 2. Check the box for Review rubric varies by topic? 3. Go to Topics tab and verify that there is dropdown menu beside each Topic. 4. Select a rubric from dropdown menu, and click Save <image> 1. Go back to Home, and select the same assignment to edit. When you click on Topics tab, you should see the rubric you had selected. 1. This was due to how questionnaires were retrieved/found for an assignment. Staggered deadlines also rely on finding questionnaires using topic id, which isn't handled until after an assignment is made. 1. Unresolved Another quality of life improvement is that staggered deadlines and topics cannot be added to an assignment until after the assignment has been created and saved.", ["The writeup is very readable, but The writeup does not explain the changes that were made.", "The writeup is not clear how the code snippets are organized.", "the code snippets should be shown in a table of contents.", "the code snippets should be separated by the number of tests, and the number and type of tests.", "This would be helpful.", "Also, the code changes should be explained in more detail."], [0.0, 1.0, 0.0, 1.0, 1.0, 1.0]], "227": ["This page provides a description of the Expertiza based OSS project Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.1.4. <link> 1.1.1.5. <link> 1.1.1.6. <link> 1.1.1.7. <link> 1.1.1.8. <link> 1.1.1.9. <link> 1.1.1.10. <link> 1.1.7. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.8. <link>. These problems are as follows: 1. Unsafe reflection method const_get called with parameter value 2. Hardwired variables in add_new_questions and save_new_questions 3. Unnecessary checks for QuizQuestionnaire, checks can be removed 4. Use guard clause to enclose methods instead of conditional 5. Removed unnecessary method 'create_questionnaire' 6. Break up create method into new 'create_questionnaire' 7. Use each_key instead of keys.each 8. Split lines of code to fit within recommended 160 character length 9. Removed useless assignment of variable in save method 10. Resolved issues involving use of unsafe reflection. Problem Method(s) save_new_questions, delete, and save_questions used conditional to wrap code instead of guard clause. Using guard clause can reduce complexity and number of lines in code. Solution For example, we go from: <code> To: <code>. Problem Method(s) create and save_new_questions have unnecessary checks for if question type is QuizQuestionnaire. Solution We removed the check in both methods. We go from: <code> To: <code>. Problem Method(s) save_new_questions and add_new_questions used hardwired variables. We go from: <code> To our code which incorporates constants. <code> With our constants at the top of the code for easy accessibility: <code>. Problem Unsafe reflection method const_get called with parameter value Solution Remove the unsafe reflection through using a variable that checks for null values. We go from: <code> To: <code>. Problem Method create_questionnaire, had no apparent calls to it. We remove the method to make the code dry. Solution For example, we remove: <code>. Problem The create method itself was 49 lines long. Solution For example, we go from: <code> To: <code>. Problem The existing code uses keys.each to iterate through the hash. Solution For example, we go from: <code> To: <code>. Problem Some of the lines of code exceed the recommended 160 characters per line. Solution For example, we go from: <code> To: <code>. Problem The existing code included assignments of variables that were not used throughout the file. In any case, we remove the variable keep the code dry. Solution For example, in the following method: <code> We remove the unnecessary variables and comments, resulting in the following method: <code>. In order to remove repetition and make the code dry, this do loop was refactored into its own method 'save_question_hash'. Solution For example, in the following method: <code> We refactor the do loop into its own method: <code>. However, in order to ensure the code edits didn't cause any previously crafted test to fail an RSpec test was ran before each commit. The command utilized to test the questionnaires controller is as follows: <code> However, if a VCL was utilized for development this following command was used instead. <code> In one case the create_questionnaire method was removed, thus in order to keep the set of tests clean the following test block was removed from the testing file: <code>. Test Log in Website url: <link> Log in: instructor6 Password: password Test Create questionnaire 1. After logging in click the Questionnaires tab. 4. Select Create Test edit/add questions: 5. Change dropbox of question type to TextArea, select Add \"1\" more. 6. Change dropbox of question type to Criterion, select Add \"2\" more. 7. Edit question content: \"Test question Textarea\", \"Test question Criterion1\", and \"Test question Criterion2\" in that order. Test Delete Questionnaire 18. Select Back. 1. Code Refactoring Best Practices <link> 2. Expertiza on Github <link> 3. Expertiza Project Fork <link> 4. Expertiza Website <link> 5. RSpec Documentation <link>.", ["The writeup is very good, but The writeup could have been more detailed.", "The writeup would have been helpful to have a description of the changes made.", "Also, the code snippets are not shown in the table of contents.", "the code snippets are shown in a black box, and it would have helped to have the code snippets shown in more detail.", "the code snippets should be shown in prose, not in black text.", "This would have made it easier to read.", "I would also like to see a description on how the code was refactored. "], [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0]], "228": ["It allows the instructors to create new assignments and customize new or existing assignments. Each assignment should have its own unique auto-generated submission directory, which is named based on the assignment name entered by the teacher. In the current implementation of Expertiza, there are following issues need to be addressed: Issue #1: The directory name should be auto-generated from the assignment name. Issue #2: It should be done by changing spaces in the names to underscores. E.g., the directory for Program 1 is by default \"Program_1\". Issue #3: A check should be added to prevent two assignments in the same course from having the same name. Issue #4: Verify or add if not present - a check to stop two assignments from sharing the same directory. Issue #5: On changing name of an assignment while creating it, the code shouldn't throw a NoMethodError. Fix #1: Submission directory is successfully being generated after the assignment name is typed in. If needed, the submission directory can be changed, however any modifications to the assignment name will just auto-generate it to match. Fix #2: A check was added to ensure that assignments in the same course do not share the same name. When creating a course, if the assignment name is a duplicate, it will reset the entire form. Fix #3: A check was added to ensure that assignments in the same course do not share the same submission directory. When creating a course, if the submission directory is a duplicate, it will reset the entire form. Fix #4: These checks were also put in place when modifying an existent assignment. The controller, helper and spec were modified for this project: 1. Assignments Controller - assignments_controller.rb 2. Assignments View - _general.html.erb 3. Assignemnts Controller Spec - assignments_controller_spec.rb 4. Assignments Model - assignment.rb. This is a controller that helps instructors create, modify, copy new assignments. Each assignment can be associated with specific Rubrics, Review Strategy and Due dates. This the view for creating the new assignments and editing the existing assignments. Tests and bug fixes pertaining to assignments controller. The ruby code which defines how the assignment model functions. The project primarily deals with the AssignmentsController and AssignmentsView, and changes made are as follows: The directory name is auto-generated from the assignment name typed in by the instructor. This is achieved by replacing all spaces in the names with underscores, and removing all special characters like '/','\\','$', etc from the auto-generated submission directory name. If any two assignments of the same name under the same course are attempted to be created, it is prevented and an error message is displayed to the user stating the the submission directory name already exists. The odd case of a teacher editing the name of an already existing assignment to one that already exists is also handled. Expertiza will display a similar error message stating that the assignment couldn't be saved. Most changes were made in the assignments_controller.rb file. Checks were added to ensure that an existing assignment name or submission directory did not exist when creating a new assignment. If the assignment was not created due to an error, the code would render new which would cause the assignment to be created even though it did not pass all of the checks. The following function was added to app/views/assignments/edit/_general.html.erb , to generate submission directory names with underscores replacing spaces: <code> Changes were made to the create function in assignments_controller.rb , such that it only creates the assignment directory if the one with the same name doesn't already exist: Before <code> After <code> Changes were made to the update_feedback_assignment_form_attributes function in the same file to flash an error if an edited file has the same name: Before <code> After <code> The following validations were added to app/models/assignment.rb , without these validations the user was allowed to change the assignment name or submission directory to one that already exists. <code>. The following steps must be performed to test the project UI: Step 1: Log in as an Instructor, with Username - instructor6, Password - password <image> Step 2: Create a new assignment. In this case our assignment is called \"E2054 Test Assignment\", under course CSC 216 Fall 2009 <image> Step 3: To save the assignment, the Review and Author Feedback rubrics need to be filled in <image> Step 4: On completion, the assignment will be saved <image> Step 5: If another assignment of the same name under the same course is created, the following error is displayed <image> Step 6: On editing an already made assignment to match the same details as \"E2054 Test Assignment\" <image> We get the following error: <image>. The following RSpec tests were added to the assignments_contoller_spec.rb file <code> <link>.", ["The document is very readable, but The document does not explain the changes made.", "The document is not clear how the code is changed, and the code would be helpful to have a description of the changes.", "the code is not described in any detail, and the code snippets are not shown.", "that the code is not described in any detail, and the code snippets are not shown is a good thing, but the code should be explained in more detail.", "Also, the code changes are not explained in any way.", "the code changes are just shown in the code.", "I would have liked to see more detail on the changes that were made."], [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]], "229": ["Expertiza allows the instructor to create new assignments and customize new or existing assignments. It also allows the instructor to create a list of topics the students can sign up for. Students can also peer review other students' submissions. The process is detailed below: 1. Steps to install Redis: <code> Run the redis-server using: <code> 1. Steps to install NodeJS on CentOS: <code> 1. Run the expertiza Rails server <code> 1. For logging in as an instructor:- Username: instructor6 Password: password 1. For logging in as an student:- Username: student17 Password: password. At present the calibration functionality is limited, the following points present the scenarios where the current implementation is lacking: 1. No support for varying rubric by round feature. 2. From the perspective of the student, lack of differentiation of review - whether its from an expert or otherwise. 3. A student is not notified once an expert submits a review. 4. Additionally, a student should be able to see how an expert rated his/her assignment - similar to how it's done in calibration results for calibrated assignments( As seen when Show Calibration Results is clicked. ). Tasks are broken down into sub-tasks as follows: 1. Refactoring: 1.1. a checkbox in the \"General\" Tab from ‚ÄúCalibrated peer-review for training?‚Äù to ‚ÄúAdd expert peer review?‚Äù 1.2. a tab name for instructor from ‚ÄúCalibration‚Äù to ‚ÄúExpert review‚Äù on the assignment setting page 1.3. partial file from ‚Äú_calibration.html.erb‚Äù to ‚Äú_expert_review.html.erb‚Äù 1.4. the link title on student side from ‚Äúshow calibration results‚Äù to ‚Äúshow expert peer-review results‚Äù 1.5. the file ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to ‚Äúresponse/show_expert_review_results_for_student.html.erb‚Äù 1.6. title in ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to start with ‚ÄúExpert review comparison report for‚Äù 2. Functionality changes 1.1. Vary-rubric-by-round - Currently, the functionality of calibration is limited. 1.2. Both TAs and instructors could do expert reviews - need to modify ‚Äúresponse/show_calibration_results_for_student.html.erb‚Äù to make it support multiple expert reviews. This diagram shows the Assignment Setting page in the General tab. <image> This diagram shows the Assignment Setting page in the Calibration tab. <image> The following diagram shows the flow of control in case of peer reviews. <image>. <image>. Hence, we will also be writing test cases for the new functionality - added as a result of this project. We would also need to add additional fixtures in spec/feature to be used in the testcases. There are three main actors that interact with the new functionality, these are: 1. Instructors 2. Teaching Assistants 3. Students Hence, we would have to write tests for each of these types of users and test the expert review functionality. Some of the tests that we have in mind as of now, are as follows: 1. Instructor 1.1. Login as instructor using pre-configured credential. 1.2. Go to \"General\" tab 1.1.1. Verify \"Add expert peer review?\" present instead of \"Calibrated peer-review for training?\" 1.3. Verify whether the instructor can see \"Expert Review\" on the assignment setting page. 1.4. Perform Expert Review, based on values declared in Fixtures available to Instructor. 1. Teaching Assistant 1.1. Login as TA using pre-configured credential. 1.2. Go to \"General\" tab 1.1.1. Verify \"Add expert peer review?\" present instead of \"Calibrated peer-review for training?\" 1.3. Verify whether the TA can see \"Expert Review\" on the assignment setting page. 1.4. Perform Expert Review, based on values declared in Fixtures available to TA. 1. Student 1.1. Log in as Student using pre-configured credential. 1.2. Verify if student can see \"Show expert peer-review results\" 1.1.1. When a new expert-review is available. 1.1.2. Show nothing when nothing is available. 1.3. Testing to check if the reviews show up. 1.1.1. If added by TA. 1.1.2. If added by instructor. 1.1.3. If multiple reviews from either TA or instructor show up as a list.", ["The document is very readable, but The document does not explain the changes made, or how they were made.", "It is not clear how the code is organized, or what the changes are.", "The code snippets are not clearly described.", "The code snippets are not shown in the code, and The code snippets should be shown in a separate section.", "This is a good start, despite that The code snippets are not shown in the code, and The code snippets should be shown in a separate section, and the code changes are not described in any detail.", "I would have liked to see more detail on the code changes."], [1.0, 0.0, 1.0, 1.0, 1.0, 1.0]], "230": ["2. A confirmation email is sent to a user of the system when they reset their Expertiza account password. In this project we have first identified all the set of scenarios where the user of the system will get an email. We have implemented tests for the following scenarios: There are various ways to create a new user account in Expertiza. Irrespective of the user creation method, the newly added user should get notified via email when his account is created in the system. This email states the username and a randomized password to allow the user to login for the first time. Below given are the ways to create new user to system. 1. By filling a user creation form An instructor can add a new user to the system by filling up a user creation form 1. By importing a CSV file The instructor can add new users to the system by importing a CSV file with user information <image> 1. By importing a CSV file to add participants to an assignment Instructor can add participants to an assignment by importing the users from a CSV. If the user listed in the CSV does not already exist in the system, then the a new user account is created and the user is added to the assignment. <image> 1. User requests an account A user can request an account by filling up a form with his details. If the superadmin approves a request, a new user account is created in the system and the user receives an account creation email notification <image>. The following features were checked for all cases as part of the email functionality when a new user is created 1. Mail delivery count increased by 1 after the mail triggered by the scenario is sent 2. Sender email-id is verified. 4. The subject is checked to be equal to 'Your Expertiza account and password has been created' We considered the following cases while testing specific to the scenario where user requests an account: 1. No email should be sent if new account requested with invalid email address 2. Super admin should receive email about new account request with a valid email address 3. Email notification should be sent to requester when super admin approves account creation request 4. No email notification should be sent to requester when super admin rejects account creation request. We used Capybara to model the scenario as follows: 1. Create user through instructor filling up the form: Admin user is created using factory class. 1. User requests a new account and account is created upon approval from superadmin Super admin is created using factory class. 1. User creation by instructor: Instructor creates new user by filling sign-up form <image> 1. User creation by user request Email count should be zero when user requests new account with an invalid email <image> Email count should be one when user requests new account with a valid email <image> 1. User creation by importing csv files Import CSV to add participants to assignment <image> Import CSV from manage users <image>. When the user tries to login, and the password entered is wrong, the user is redirected to reset password page. <image> Here the email-id entered is searched through the database, If such user account is found: url for reset is generated, with random token set as password is sent to the user. Flowchart: <image>. 1. User enters email id which is not associated with any account 1. No e-mail should be sent 1. User enters email id that's present in the user database The following features were checked inside 'it blocks' as part of verifying email functionality 1. Mail delivery count increased by 1 after the mail triggered by the scenario is sent 2. The sender mail-id is verified to be 'expertiza.development@gmail.com' 3. Receiver email id is checked to be equal to 'expertiza.development@gmail.com' . If the email id is not associated with any existing account, then email count will be zero <image> If the email id is associated with an existing account, then email count will be one <image>. However, if an account is created by adding them as participants to an assignment when they don't already have an account, e-mail notification is not being sent. The issue here was that an already existing user in the system will not get added as a participant on the assignment. Now that we have enabled the email functionality irrespective of where a new user is created from, we don't need to explicitly call the mailer from each location where new user is created. The email body was inconsistent across different scenarios. If the user does not exist in the system, new user account (if there is sufficient information about the user to create a new Expertiza account) is created If the user already exists as a participant on the assignment, do nothing Add the user to the assignment as a participant; otherwise. This way, the user(whether newly created or already an Expertiza user) gets added on the assignment as a participant. Also, the instructor should receive an email about the same. This method calls the email function to notify the reviewee <image>. <image> <image>.", ["The writeup is very good.", "The writeup explains the changes to be made, and explains the tests that were tested.", "The code snippets are very readable.", "The code snippets are well organized, and The code snippets show the changes that were made.", "However, the code is not very detailed.", "I would have liked to see more detail on the tests, and also on the code changes.", "Also, the test plan is not described in any detail.", "This is a good example of how the code was changed."], [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0]], "231": ["<link> is an <link> <link> application which is used by instructors and students for creating assignments and submitting peer reviews. Expertiza allows the instructor to create and customize assignments, create a list of topics the students can sign up for, have students work on teams and then review each other's assignments at the end. The Source code of the application can be cloned from <link> . Files involved: popUpController.rb participantsController.rb What they do PopUpController displays a review when a user (instructor or student) clicks on a list of reviews. ParticipantsController handles participants in an assignment. What's wrong with them: PopUpController contains only two prominent methods, but they are very big. ParticipantsController contains redundant code. What needs to be done: 1 popUpController.rb 1.1 Action_allowed method always returns true. It needs to be fixed. 1.2 Team_user_popup method needs refactoring. @teamId is assigned but never used. Add comments to make code more readable. Rename variables based on their usage 1.3 Refactor Participants_popup and team_users_popup methods into smaller private methods. 2 participantsController.rb 2.1 In add and update_authorization methods, permissions collection object can be used to reference its elements without assigning each element to individual private variables. 2.2 Inherit and bequeath_all methods are similar. Common statements can be migrated to private method. Add comments in code to make it easy to understand. 2.3 Cluster all the flash messages under one private method to make the code more manageable 2.4 Fix email_sent method. It contains a dummy email address. Modified Action_allowed method to return true only if... <table>. Local variables like can_submit, can_review, etc removed and permissions object referenced directly <table>. Moved common functionality of Inherit and bequeath_all to private method populate_copied_participants <table>. <table>. <table>. Login as a instructor \"instructor6/password\". Click on Assignments -> review report -> and on a team. <references/>.", ["The writeup is very good, but The writeup could have been improved by adding more detail to the code.", "The writeup would have been helpful to have a description of the changes made.", "Also, the code snippets are not clearly separated from the code, and The writeup would have helped to have the code snippets separated.", "the code snippets should be separated from each other.", "This would have made it easier to read."], [1.0, 1.0, 0.0, 1.0, 1.0]], "232": ["<link> is a software development process that relies on the repetition of a very short development cycle, requirements are turned into very specific <link> , then the software is improved to pass the new test cases only. The TDD sequence can be can be summarized in following steps: 1. Add a Test 2. Run all tests and see if the new test fails 3. Write the code 4. Run tests 5. Refactor code 6. Repeat Advantages of using TDD: 1. Narrowing Problem Focus 2. Tidier Code 3. Not worrying about dependencies 4. Easier refactoring 5. Better Test coverage and fewer bugs. <link> is a software testing method by which individual units of source code are tested to catch errors early in the development process. For a model it involves testing the interface and on how it responds to commands and queries from outside. Model testing is bounded to the functionality of only the model under test and doesn't test how its collaborating models get affected based on this query. Unit Testing provides several benefits which can be summarized in the below points. 1. Finds problems early: Unit testing finds problems early in the development cycle. In test-driven development (TDD), which is frequently used in both extreme programming and scrum, unit tests are created before the code itself is written. When the tests pass, that code is considered complete. 2. Facilitates change: Unit testing allows the programmer to refactor code or upgrade system libraries at a later date, and make sure the module still works correctly (e.g., in regression testing). Unit tests detect changes which may break a design contract. 3. Simplifies Integration: Unit testing may reduce uncertainty in the units themselves and can be used in a bottom-up testing style approach. By testing the parts of a program first and then testing the sum of its parts, integration testing becomes much easier. 4. Documentation: Developers looking to learn what functionality is provided by a unit, and how to use it, can look at the unit tests to gain a basic understanding of the unit's interface's API. 5. Design: When software is developed using a test-driven approach, the combination of writing the unit test to specify the interface plus the refactoring activities performed after the test is passing, may take the place of formal design. Each unit test can be seen as a design element specifying classes, methods, and observable behavior. The goal of the project is to test the Menu.rb, i.e. the Menu model by writing unit tests, which are written using <link> . The unit tests are to be written such that the path coverage of menu.rb is greater than 90% and achieve the highest possible branch coverage. The goal is to test the menu model file. 4. Creating dummy entries for testing different functionalities. 5. Writing testing conditions for different functions and cross-checking with the expected outputs. Menu is a model which gives the functionality to the top menu bar in the Expertiza website. It links the menu items associated with each tab in the menu using a tree. The following Menu is displayed for the Student role : <image>. Mock/dummy objects are needed to be created for any unit testing criteria. These objects are loaded newly and deleted after every testing condition. Several methods exist for creating such objects, whose parameters need to be designed to satisfy the conditions under test. We have used factories and created the mock objects that we need to execute the tests. Menu model require several other mock objects to be created namely Node(this is a subclass in the menu class), menu_item, site_controller, controller_action,etc. A total of 21 testing conditions were required to be performed for testing all the functions in menu model file. The conditions that needed to be tested are as below: Node class 1. initialize <code> 2. setup <code> <code> <code> 3. site_controller <code> 4. controller_action <code> <code> 5. content_page <code> 6. add_child <code> Menu class 1. initialize <code> <code> <code> 2. select <code> <code> 3. get_item <code> 4. get_menu <code> 5. selected <code> 6. selected? <code> <code> 7. crumbs <code>. A screenshot of the tests passing is shown here: <image>. <image> <link>. After writing the test cases we used SimpleCov to measure the C0 coverage of our rails application. After running rake spec to run the test cases, SimpleCov creates a directory called coverage in our rails application folder. These are the learning outcomes after performing this project: 1. Writing tests using the Test Driven Development approach. 2. Writing unit tests for models and controllers in RSpec. In our case, before writing the test cases for the menu.rb we had the understand how different models interacted with each other and how each action by different users would make changes in the database schema. 1. <link> 2. <link> 3. <link> 4. <link>.", ["The writeup is very good, but The writeup could have been better if The writeup had explained the changes made to the code.", "The writeup would have been helpful to have a description of the changes, and how they were made.", "The test plan is not very detailed, and The test plan would have helped to have more information about the changes.", "Also, The test plan should have been described in more detail.", "For example of that Also, The test plan should have been described in more detail : it would be helpful to explain how the tests are tested.", "that For example, it would be helpful to explain how the tests are tested is not a very good description of what is done. "], [1.0, 1.0, 1.0, 1.0, 0.0, 0.0]], "233": ["Expertiza allows the instructor to create new assignments as well as edit new or existing assignments. This issue is not a bug but an additional feature to the existing import topic functionality. Issue 329 : When importing teams there are different options to handle conflicting team names Issue 328 : When importing teams, and a conflict exists there is an option to merge the two teams by inserting the new members into an existing team. we tried to import a team and selected 'Insert any new members into existing team'. No new team members were in fact inserted into the team. <code> <code>. Problem : When importing teams, and a conflict exists there is an option to merge the two teams by inserting the new members into an existing team. Solution : This was an issue to fix the functionality of Insert any new members into existing team. Problem : When importing teams there are different options to handle conflicting team names as shown in the screenshot below. We‚Äôd like to add another option to rename EXISTING team when a conflict exist. Solution : This was a request to add an option to rename existing team if there was a conflict in the team name. New code introduced was as follows: In start.html.erb In this file, the new option as displayed to the user is added <code> In team.rb In this file, the handling of the new tag \"rename_existing\" is added wherein, the old team is updated with a new name. Solution : We have modified the existing implementation for import topics to assign the teams to the topics. We have changed the files to handle another column where the teams have been assigned to topics. The column is optional because there might be topics that have not yet been assigned to any teams Expectations from the import file: 1. Assigned team name should exist in the system, otherwise the import will fail. Instructor has to make sure that the teams which are assigned in the import file should exist with same names in the system or database. 2. Instructor also need to ensure that the topic for which the team is being assigned should not be full or can accommodate new team assignment to the respective topic. We are just adding another column so the best way is to extend the existing select tag with a new option for the teams assigned. All the select tags has been changed with an additional option \"Assigned Team\". <code> model/sign_up_topic.rb The existing import function in the model import the topics to the topic table. As per the requirement and validations, topic should be imported first and then only the team can be assigned to the topic. So the existing import method has been modified to assign the team once the topic is imported in the database table. As per the edge case mentioned in the requirement document that few topics may not have any team assigned to it, so we first check if topic has any team assigned, then only it tries to map the topic with the team. <code> Changes in the application with new implementation An option column checkbox (Teams Assigned) has been added to the UI <image> A new column Assigned Team is added where the columns are being mapped. As our additional functionality is to have another column to assign team to the topic. We have to have the import test case and the assigned team change could be applied to the same test case. We use it to check if the older team gets the new name and the new team gets the requested name. 5. Click on Topic Description checkbox and import the following file. 7. Import topics. 2. Select Manage >Assignments > Edit Assignment > Topics 3. Scroll down to the screen and click on import topics 4. Upload a file with the topic details and a team assigned to topic 5. Check the Teams Assigned optional column 6. Click on import and map the columns in the mapping page 6. After submitting, team will be assigned to appropriate topic [Problem 3 (329)] 1. Login to Expertiza using username: instructor6 & password: password. 2. Select Manage > Courses or Assignments > Add Teams button > Import Team 3. In the screen that loads, select \"rename the existing team and import\" in the handle conflicts section. 4. Upload a file with the team details and select the appropriate delimiter. 5. Click on Create 6. Verify that the new team got created with the assigned name and the older team's name got changed. 2. Select Manage > Courses or Assignments > Add Teams button > Import Team 3. In the screen that loads, select \"Insert any new members into existing team\" in the handle conflicts section. 4. Upload a file with the team details and select the appropriate delimiter. 5. Click on Create 6. Verify that the existing team got updated with the new team members. Also, if there's no team in the system and instructor has used it in the import file so a new pop up can be displayed where the new team can be created or the import can be extended to create teams while assigning the topic.", ["The writeup is very readable.", "The writeup is very detailed, and the code snippets are well organized.", "The only thing that could be improved is that the code changes are not described in prose.", "They should have described the changes in prose, and how They were made.", "Also, the code is not described well in prose; the code would be better to show the code in prose rather than in prose (e.g., in the code).", "The code snippets should be shown in prose and not in prose as The code snippets are not very readable, and it would have been better to use prose."], [1.0, 1.0, 1.0, 1.0, 0.0, 0.0]], "234": ["Students can also review their teammates, making use of the teammate review questionnaire, based on their contribution to the projects. When we use these questionnaires for reviews, for example the teammate review assessment we encounter a few problems. We add in a new Question type ‚ÄòCake‚Äô, which will be extended from the Scored Question model [cake < scored question < choice question < question]. Potential ways of displaying the Cake question on the UI: 1. Stars: Existing design for teammate reviews uses stars to symbolize the contribution provided by each student. We can implement the cake type using the same. The questionnaire for reviewing teammates includes the question asking the cake (contribution) factor. Ideally, the cake should include the reviewer himself as well. But after considering code that also involves teammate reviews, what we have observed is that every assignment has the option to render reports to the instructor - showcasing different types of reports such as Review Reports, Teammate Review Reports, Self Review Reports, Answer Tagging reports. If the existing self-review feature were to be implemented, the view for the Self Review reports would also contain self-teammate reviews, which would cause inconsistencies in rendering Self Review Reports, and does not help serve the purpose of a legible report. Consider Student8529, who has reviewed himself and his teammate Student8663. With the design approach taken for this project, when Student8529 reviews himself, the review would appear under the Teammate reviewed, under the Teammate review report. 1. Student: Fills out the reviews, and chooses answers in accordance with the Cake question type imposed restrictions, if there is one. The screen for the same when a cake type question is added to the teammate review is as shown below: <image> The cake type question will always have a green circle in the background, rending the score on top of it. In order to enable a student to review him/herself as a teammate we have implemented self reviews for teammate assessment. For example: In teammate review assessment, let there be a cake type question about the amount of contribution provided by each team member. After enabling self reviews, cake has to include the author as well. In order to implement the self review feature for teammate reviews we have added a column \"is_self_teammate_review_enabled\" to the assignments table. 1. Self reviews enabled 2. A student logs on to expertiza and clicks on an assignment 3. Then he clicks on your team link 4. He should be able to see his teammates and himself (for self review) under team members 5. Total contribution for a cake type question in a teammate review should include the contribution provided by the student in the self review as well. 6. If the contribution is exceeded, a warning should appear 1. Self review disabled 1. The link for a reviewer to review himself as a team member should not show 2. The cake type questions in the teammate review should include only contributions provided by the other team members 1. Context: If self review is enabled after the assignment has been created and a few students have already given reviews, then it should give a warning. 1. Self review enabled in the middle of the assignment 2. Add teammate review for teammate1 3. Add teammate review for teammate2 (make sure it adds upto 100%) 4. Enable self review as an instructor 5. As a student, notice that a new review button is visible in the ‚Äúyour team‚Äù page. 6. Click on review, try to add contribution for self and make sure a warning appears that says that the cake is already at 100% 1. Context: If self review is disabled after the assignment has been created and a few students have already given reviews. 1. Self review disabled in the middle of the assignment 2. Enable self review as an instructor 3. Add teammate review for teammate1 4. Add teammate review for teammate2 5. Add self review (make sure it adds upto 100%) 6. Disable self review as an instructor 7. As a student, notice that the review button is NOT visible in the ‚Äúyour team‚Äù page. The test cases pass, on creation of a review questionnaire and on creation of a questionnaire with different types of questions, including the cake type questions to the questionnaire rubric. In the current implementation of cake type questions, answer objects are tracked on the basis of teammate reviews or any other review, meaning, if the cake type question is part of a Teammate Review questionnaire, then instances of answer are tracked with respect to answers given by team members, otherwise all the responses for that specific question are fetched without any correlation between answer instances and team members. As part of future scope, if there are reviews other than teammate reviews that would need to keep a track of answer objects with respect to team members, then the implementation would have to also include that specific review scenario. With the current implementation, reviews that track answers round-wise, would not be accommodated with cake type question and can be extended for the same.", ["The design doc is very readable, but The design doc does not explain the changes made to the code.", "It is not clear how the code is changed, and the code would be helpful to have a description of the changes.", "The design doc should have explained the changes to The design doc, and how The design doc are made.", "Also, the design docs should have a list of the code changes, and a description, so that the reader can see what changes have been made."], [0.0, 0.0, 0.0, 1.0]], "235": ["For users intending to view the deployed Expertiza associated with this assignment, the credentials are below: 1. Instructor login: username -> instructor6, password -> password 2. Student login: username -> student4340, password -> password 3. Student login: username -> student4405, password -> password. It‚Äôs an open source project developed on Ruby on Rails platform and it‚Äôs code is available on Github. It allows students to review each other‚Äôs work and improve their work upon this feedback. It focusses on refactoring some of the more complex methods, modifying some of the language to make it more Ruby friendly, removing some redundant code. A couple of long and complex methods were refactored from this controller along with removal of some non-functional code and a few language changes to make it Ruby style. Three methods in particular, namely conflict_notification ,calculate_all_penalties and edit were found to be too long and were in need of refactoring into smaller, easier to manage methods. Few more compact methods were created for this purpose. There were no existing test cases for the controller. This is a helper class which contains methods for constructing a table(construct_table) and to check whether an assignment has a team and metareveiw(has_team_and_metareview). We worked on the following work items(WIs) WI1 : Refactor calculate_all_penalties method into smaller methods WI2 : Move the repeated code in conflict_notification & edit methods to a separate method list_questions. WI3 : Refactor the code as per the Ruby style guidelines and incorporate the good practices WI4 : Test the conflict_notification method to test the changes made. WI5 : Move the repeated code in view and view_my_scores methods to a separate method retrieve_questions. 1. Refactoring calculate_all_penalties method This is used to calculate various penalty values for each assignment if penalty is applicable. The following changes were made: 1. This method was very complex, performing too many functions within a single method and had to be broken into 3 smaller methods each having a more well defined function. 2. The following 3 methods were created after splitting the first method <code> 3. Changes were also made to make the code follow ruby style.The language was made more ruby friendly. 4. Finally some redundant code was commented out as it was non-functional. Refactoring into smaller more specific methods: <image> Removal of non-functional code : <image> Change of language to make it more Ruby friendly: <image> 1. Move the redundant piece of code from conflict_notification & edit methods to a new method list_questions The conflict_notification method is used to help the instructors decide if one of the reviews are unfair or inaccurate. This was again split into 2 methods with some part of the code which is repeated in another method refactored into a new method. <image> Refactored #Created a method which was a duplicate in conflict_notification and edit methods <image> edit method: This method is used to edit the questionnaires. This method again has code which is repeated in the conflict_notification method and thus the repeated section was split into a new method. <image> New method: Refactored #Created a method which was a duplicate in conflict_notification and edit methods <image> Similar refactoring was performed to obtain the retrieve_questions method: <image> This is the new method created after the above refactoring: <image>. There were no existing test cases for the GradesController. We have added a new spec file 'grades_spec.rb' which covers testing scenario for the newly added method. As the model was not changed, no test cases were added for the model. Following steps needs to be performed to test this code from UI: 1. Login as instructor. Create a course and an assignment under that course. 2. Keep the has team checkbox checked while creating the assignment. Add at least two students as participants to the assignment. 3. Create topics for the assignment. 4. Sign in as one of the students who were added to the assignment. 5. Go to the assignment and sign up for a topic. 6. Submit student's work by clicking 'Your work' under that assignment. 7. Sign in as a different student which is participant of the assignment. 8. Go to Assignments--><assignment name>-->Others' work (If the link is disabled, login as instructor and change the due date of the assignment to current time). 9. Give reviews on first student's work. 10. Login as instructor or first student to look at the review grades. 1. The construct_table method in GradesHelper is not used anywhere. It has no reference in the project. method in GradesHelper can be broken down into separate methods, one each for team and metareview.", ["The writeup is quite good.", "The writeup explains the changes well, but The writeup could have been improved by adding more detail to the code.", "For example of that The writeup explains the changes well, but The writeup could have been improved by adding more detail to the code : The writeup would have been helpful to show the code changes in the code snippets, rather than just the code in the document.", "Also, The writeup could be improved by showing the code that was changed, rather then just the changes that were made.", "This would have helped the reader understand what was done."], [1.0, 1.0, 0.0, 0.0, 1.0]], "236": ["The goal of this project was to add RSpec tests for the functionality added for project <link> . The changes submitted by project E1948 can be found <link> . See the Test Outline section to see the specifics of our testing work. For this project, our plan was to write new RSpec tests for new methods added in project E1948 for ReviewMappingHelper. In total, our team wrote 34 tests to cover the 8 new methods created or altered methods. These 8 methods are listed below. See the Test Outline for more details on the RSpec tests written these methods. This section shows the RSpec test we created for each of the methods defined in Relevant Methods above. The full test file can be found <link> . This method gets review and feedback responses for all rounds for the feedback report. Before testing this method, RSpec sets up an assignment, a review, and a reviewee. Then it creates 2 responses from the reviewer (one for each of the initial 2 rounds). During testing, these RSpec tests assures this method returns the correct amount of responses for each round. In this scenario created, each round should return 1. There is an additional two tests in this RSpec feature, testing to see if a 3rd round returns nothing if there was no response created (which there is not a 3rd response pre-setup. Likewise, there is an additional test where it creates a third response and assures that this method returns 1 for round 3. Setup <image> Tests <image>. This method gets the review score awarded based on each round of the review. Before testing this method, RSpec sets up an assignment, a reviewer, and a reviewee. Then it assignments 3 scores (one for each round) given by the reviewer. During testing, these RSpec tests check to see if this method returns the correct awarded score for each round requested. Setup <image> Tests <image>. This method checks the submission state within each round and assigns team color accordingly. The check_submission_state method calls the submitted_within_round? method to check if the submission was made in the current round and if yes then the purple color will be assigned to the team. One of the test cases tests this feature that purple color is being set or not. If no link was included by the team in the submission or the link is not a wiki link or the assignment was not submitted within the round, then the team will be assigned green color. These conditions are also being covered in the tests below. Setup <image> Tests <image> <image>. This method is a helper method for get_each_review_and_feedback_response_map. It sets the instance variables @review_responses_round_ and @feedback_response_maps_round_ after calculating the number of responses received by the team after each round. This method should return the corresponding response map associated with each round of review. The initial setup to test this method includes creating a reviewer, creating responses and review_response_map_ids. The tests check if the correct response map is returned or not for each round. Setup <image> Tests <image>. This method is a helper method for _team_score.html.erb view. It sets the metrics, namely min, max and avg score value for all reviews for a particular round and team. In the setup for the Rspec test, we create assignment, due dates for 3 rounds, student, reviewee, reviewer and user. We have 3 test cases each for round 1, round 2 and round 3. Setup <image> <image> Tests <image>. This methods checks if the link submitted for evaluation has been updated or not since the last round. The method takes in parameters round, due date and link updated time and compares the dates to check whether the latter for before the former time. The method returns false if it's not updated and true otherwise. The setup for this rspec test included creating an assignment and creating 2 rounds with corresponding due dates along with a reviewer and reviewee for the same. The first test case asserts that the method returns false when link is not updated. The second test case asserts that the method returns true when the link is updated within the due date. Setup <image> Tests <image>. 34 out of 34 tests in the review_mapping_helper_spec.rb test file. URL link of video of review_mapping_helper_spec.rb tests running and passing:- <link>. 1. We refactored get_review_metrics to get_review_volume, as per request from the professor <image> 1. We refactored get_team_colour & obtain_team_colour to read get_team_color & obtain_team_color, as per request from the professor <image> 1. We refactored calcutate_average_author_feedback_score to calculate_average_author_feedback_score, as per request from the professor <image>. <image> <image>.", ["The writeup is quite good.", "The writeup explains the changes well, but The writeup could have been improved by adding more detail to the code.", "For example of that The writeup explains the changes well, but The writeup could have been improved by adding more detail to the code : The writeup would have been helpful to show the code changes in the code snippets, rather than just the code in the document.", "Also, The writeup could be improved by showing the code that was changed, rather then just the changes that were made.", "This would have helped the reader understand what was done.", "The writeup is very readable.", "The writeup is very detailed, and the tests are described in detail.", "the tests are well organized, and are well explained.", "I would have liked to see more of the code snippets, though.", "For example of that I would have liked to see more of the code snippets, though : the test for the get_each_review_and_feedback_response_map method is not explained.", "It is just a list of methods, and It should have been described in more detail."], [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0]], "237": ["Description of the current project This project is intended to make Bookmarks more user-friendly, credible and valid. Bookmarks in expertiza are created by reviewers and can be used by authors for their work on any project. On each line of the signup sheet are two icons, one for adding a bookmark to the topic, and another for viewing bookmarks on the topic. If the instructor allows the participants to create bookmarks, then only a participant has access to create and view them. He should be able to create a new Bookmark only if he enters a valid one. Problem 1 : When a user after logging into expertiza wants to add a new bookmark or view existing bookmarks for the available projects, he will click on the buttons against the specific title. Once he goes to either 'Create New Bookmark page\" or \"View existing bookmarks page\", he's not able to go back to Sign-up sheet using \"back\" button. <image> Enhancements to this problem : We can go back to Sign-up sheet after clicking on \"back\" button. <image> Problem 2 : If a user clicks \"Add Bookmarks\" button, he will be navigated to a \"Add a new bookmark page\" where he can give details of new bookmark (like URL, description etc ). <image> After creating an empty bookmark, we are displayed this message as below in the figure. <image> Problem 3: When the instructor doesn't give access for participants to add/view bookmarks, the participants are still able to access them. He un-checks \"Allow participants to add bookmarks\" button and participants are still able to access them. <image> Enhancements to this problem : Now,if the instructor un-checks the button \"Allow participants to create bookmarks? \", the actions View and Add Bookmarks are no longer visible/accessible. <image>. 1. app/views/bookmarks/list.html.erb : This file is a view for listing the existing bookmarks of a particular Title of the project. 2. app/views/bookmarks/new.html.erb : This file is a view for creating a new bookmark - (A valid one). 3. app/views/sign_up_sheet/_actions.html.erb : This file is a view for showing the actions against the title of the bookmark. 4. app/controllers/bookmarks_controller.rb : This file has the code regarding the access that instructor gives to students regarding Bookmarks. a) Back button for the page \"View Bookmark\" and \"Create Bookmark\" was resolved. 1. Login with the credentials to expertiza. 2. Go to 'My assignments' and select OSS Project/writeup. 3. Select 'Signup sheet'. Select a title and choose either 'View Bookmark' or 'Add Bookmark' button 5. If you choose 'View Bookmark', after viewing, press the back button to go back to Signup sheet. 6. You will land up in Sign-up sheet page. 7. If you choose 'Add Bookmark', you can add by giving Bookmark details and save it. 8. Now press back button. 9. You will land in Sign-up sheet page. b) Creating Blank(Empty) Bookmarks problem was resolved. 1. Login into the expertiza with the credentials. 2. Go to 'My Assignments' 3. Select OSS Project/writeup 4. Now choose the \"Sign-up sheet\". 5. You will be displayed with titles to all available OSS projects. 6. Choose the one for which you want to create/add a bookmark. 8. You should be given a warning saying \"Error occurred while creating bookmark. 9. You will still remain in the same page unless you press 'Back' button. c) Issue of having the access to create the bookmarks even though instructor denied the access was resolved 1.Login to expertiza as instructor. 3. Select OSS Project and to edit. 4. Click on 'Topic' button and see if the 'Allow participants to create bookmarks' is checked or not. 6. Now login into expertiza as student and select 'My assignments' 7. Click on OSS project/writeup. 8. Select 'Sign-up sheet' and you see all titles available for OSS projects. 9. Against each title, you can't see any buttons to either add/view bookmarks. 10. You can now repeat the process by checking in the button and see if the add and view button against the titles are accessible/not. 1. A questionnaire can be built to grade a bookmark. Questions maybe like \" How helpful was this bookmark? \", \" Did you use this bookmark for your work? 2. A reviewer should be recognized or credited if he added useful bookmarks i.e if the author has made use of the bookmark. 3. A function to add extra credits automatically if a participant had submitted more than threshold number of useful bookmarks.", ["The writeup is very good.", "The writeup explains the problems well, and explains the solutions.", "However, The writeup does not explain the changes made to the code.", "the code is not explained in any detail.", "that the code is not explained in any detail is a good thing.", "I would have liked to see more detail on the changes.", "Also, the code snippets are not shown in the document.", "the code snippets are just shown in a list of files.", "What should have been shown is the code for the code that was changed.", "That is not very helpful.", "There should be a link to the changes in the code."], [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "238": ["If one respond to the advertisement, a join team request will be created and the topic holder can see it on ‚ÄúYour team‚Äù page. After a student gets a team and the team is not full, (s)he should also be able to send invitations to others. Fix Issue #227 : If user 'A' got a topic and user 'B' got no topic, then if A join B‚Äôs team, A‚Äôs topic is dropped and A and B end up with a new team with no topic. A user who is enrolled in an assignment and has a topic, can advertise for more team members. When another user goes on the 'your team' link, who is enrolled in the same assignment but doesn't have a team and topic yet, he will be able to see the team advertisements by other teams. This request goes to the team who had posted that advertisement. The request can be approved or denied by the team members. If there is an entry in the \"join_team_requests\" table for a user, then (s)he can only see advertisements if the corresponding \"status\" is \"D\", which implies that this user is not yet part of a team. If a user has an assignment and a topic only then (s)he will be able to advertise for team members to join their team. If a user doesn't have a topic (s)he won't be able to advertise. The scenario in which A, B were two users, A with a topic, B without a topic, A joins B's team but A's topic gets dropped; A,B become a team but with no topic. Such cases are now avoided as we have ensured that without first selecting a topic a user cannot advertise for team members nor can he send invitations to other users to join his team. If (s)he has a topic then he'll be able to see the option for advertising for teammates. If the assignment doesn't have a topic then the user will be able to send out team invitations. 1)Login as Admin, create an assignment with all the necessary details like maximum no of users per team, add topics for the assignment, enroll users(students) in the assignment. 2)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. You should be able to see the assignment now in the Assignment section. 3)Since A doesn't have a topic yet, so you won't be able to see the advertise link. 4)Go to the sign-up sheet for the assignment, select a topic. A now has a topic, so now A can advertise for team-members. 6)Login as another user(Student) or impersonate another student, say student B, whom you have enrolled in the assignment. 7)Since B doesn't have a topic yet, so you won't be able to see the advertise link. 8)Go to the sign-up sheet for the assignment, you'll be able to see a trumpet icon next to the topic that has an ad posted. 9)Click on the icon, you'll see the ad posted by A. Click on request to join A's team. 12)Login as user A or impersonate A, now you'll be able to see the team join request sent by user B. And now if you login as B or impersonate B, you will no longer be able to access the trumpet icon which is a link to all ads pertaining to topics the concerned assignment. 14)Had user A declined User Bs join request, the status in the table \"\" would change to \"D\", that means user B still doesn't have a team. So, now if you login as B or impersonate, you'll be able to see the ads again. 1)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. 2)You should be able to see the assignment now in the Assignment section. Since A doesn't have a topic yet, so you won't be able to see the advertise link. 3)Go to the sign-up sheet for the assignment, select a topic. A now has a topic, so now A can advertise for team-members. 4)This ensures that for an assignment with topics, a user can send out advertisements only if (s)he has a topic. 5)Login as Admin, create an assignment with all the necessary details like maximum no of users per team, do not add topics for the assignment, enroll users(students) in the assignment. 6)Login as user(Student) or impersonate a student, say student A, whom you have enrolled in the assignment. You should be able to see the assignment now in the Assignment section. 7)Since the assignment doesn't have any topics, therefore, you will be able to see the advertise link. You won't see a sign-up sheet since the assignment has no topics.", ["The writeup is quite good, but The writeup could have been improved by adding more detail to the code.", "The writeup would have been helpful to have a description of the changes made to the project.", "a description of the changes made to the project is not very clear.", "The code snippets are not clearly explained."], [1.0, 1.0, 1.0, 1.0]], "239": ["<link>. The instructor needs to watch teams being formed, and every time a new team is formed, a new mentor needs to be assigned, outside of Expertiza. This leads to a lot of work for the instructor, as well as sometimes long delays before a team is assigned a mentor. 3. When a team reaches a target size of greater than 50% of the maximum teammate capacity, then: 1.1. A mentor will be assigned to this team and notified via email. 1.2. Participants in an assignment will be identified as mentors via their participant permissions ( <link> ). Anyone with ‚Äúmentor‚Äù permission for an assignment is eligible to be automatically assigned to mentor a team when a new team is formed. Develop a trigger that: 1. Is activated when any team has been formed that has k members, where k is greater than 50% of the maximum team capacity 1.1. ex: max members = 4, trigger activated when the team size reaches 3 2. Assign a mentor to the team 1.1. Mentors should be evenly assigned to teams, so a good strategy is to assign the mentor who has the fewest teams to mentor so far. 3. Notify the mentor via email that they are now assigned to a specific team, and provide the email addresses of the team members. 4. Possibly notify the team members that they have been assigned the mentor with contact information (further discussion here). The mentor assignment feature has a few preconditions and assumptions which have been outlined below. 1. An instructor has already added an assignment without topics. 2. ‚Äúmentor‚Äù permission exist 3. There are users in said assignment with mentor permissions. 4. A mentor has yet to be assigned to said assignment. 5. Mentor assignment is done only once, does not take into consideration drop offs. <image> <link>. The value will be only present if the mentor has been automatically assigned. <image> <link> The instructor view will also need to have visibility of what mentors the teams have. <image> <link>. 1. <link>. <image> <link>. 1. <link> <image> <link> 2. <link> <image> <link> <image> <link> 3. <link> <image> <link> 4. <link> <image> <link>. This will allow for the auto assign mentor feature to be disabled if the instructor does not want the work flow executed for the assignment. One trigger had to be added to invitation.rb so when users accept invitations to join a team the mentor management logic can execute. 1. <link> <image> <link> 2. <link> <image> <link> 3. <link> <image> <link>. Two views were updated in the Expertiza application to allow the user to see who the mentor is on their team. This also had to be done in two places, since the instructor view of a team is different than the student's view of the same team. 1. <link> 2. <link>. <image> <link>. 3. Impersonate the student account you found.If there is no team, create one by inviting other student to your team, or create a team using the admin control. 4. By toggling the Auto assign mentors when team hits > 50% capacity? in the assignment configuration page you will be able to: 1.1. Enable the functionarities and logics that our team implemented. 1.2. Disable the functionarities and logics that our team implemented to allow an admin to assign mentor manully. 1. Add team members to any team under the Rock on Assignment using any following way: 1.1. Invitate/Accept the team invitation using impersonated student accounts. 1.2. Add student to team by using the admin control. 2. Observe that when the member size passing the capacity (3 for this Rock on assignment), a mentor called Student6801 will be added to the assignment team. 3. Remove the mentor and the added students of the assignment team using the admin control. the second team member added), a mentor will not be added to the assignment team. 5. You should also be able to see that mentor is showing on the team list. 1. By doing similar step as we mentioned above, you should not see any of the following: 1.1. A mentor is added to the team after the team size changed. 1.2. A mentor is displaying on the team list unless this mentor account: Student6801 is manually added or invited. 1. A team will have a mentor after addMentor is called. 2. A team will have a mentor removed after removeMentor is called. 3. The mentor with lowest number of team assigned will be return after selectMentor is called. 4. The selectMentor except not to receive any message if a team already has a mentor. 5. The selectMentor except not to receive any message if a team has size < 50% of the maximum size.", ["The document is very readable, but The document does not explain the changes made to the code.", "It is not clear how the code is changed, and the code would be helpful to see the code changes.", "the code is not described in any detail, and the code snippets are not shown.", "This is a good thing, but the code should be explained in more detail.", "Also, the code has been changed, but not in a way that would be easy to read.", "For example of that Also, the code has been changed, but not in a way that would be easy to read : the \"Mentor\" section should have been replaced with a list of the teams that have been assigned mentors."], [1.0, 1.0, 0.0, 1.0, 0.0, 0.0]], "240": ["The student_task/list page is the page displayed to a student after logging in into expertiza. 1. Show the record of each group collaborator(s) for each course. Another div is to display all the assignments and their information, include Assignment, Course, Topic, Current Stage, Review Grade, Badges, Stage Deadline, Copyright Grants and Make Public. Original page before modifying showing below, all the courses and all the assignments are displaying in the same table, and badges have own column. <image> <image>. Here are some existing problems and unclear parts of the pageÔºö 1. Problem1 : Consider the cases where a student might be enrolled in assignments from more than one course. In this case, assignments should be grouped by course, with the course name given before the listing of the first assignment. 1. Problem2 : Remove the column for Review Grade because it makes no sense, change Review Grade to Submission Grade. Show the actual score and show the blue button. 1. Problem3 : Delete the badges column, and if the Assignment has a badge, mark it directly next to the assignment name under the assignment column. Fixing app/views/student_task/list.html.erb original code of how to display course are showing below <code> In order to group the courses, we added a group_by method to find out which courses does this assignment belongs to, and group the assignments that has the same courses name at one table. The modified code is showing below. <code> We will print out the course name as each table head, group the assignments, and we take down Course coloum from table content since the course name is already showing as table head. Also, for the assignments that have not assigned to a course, we will print out No Course Assigned Yet . 1. Fixing app/views/student_task/list.html.erb 1. app/helpers/student_task_helper.rb For this problem, first, we change Review Grade to Submission grade, which only need to modify <code> to <code> on list.html.erb. Second, we change how we display the score. Original code is showing below <code> In the original code, each grade is assigned to /100, which is not correct because not every assignment has 10 reviews (one review count for 10 point). Since we need to display the current score on the page, we need an array to carry the current score and display it on the result. The modified code showing below. <code>. Fixing app/views/student_task/list.html.erb Since not too many assignments are able to get badges, that make badges column barely have contents. Therefore, we display it after the assignment name and delete Badges coloum. If one student gets a badge, it will display a small picture after the badged assignment. Hover over your mouse on it, and it will display the information about this badge. <code>. <code> <code>. Page showing right now <image> <image>. Since when no assignment was assigned to the student, it should not show the table content on the page. Change from <code> to <code> 1. Second, we modified spec/features/assignment_submission_spec.rb . In order to use the content inside of the original test file, we added a def function. The function is able to set up the database for testing needed, and test the necessary function from the student_task/list page. - The def function we added is showing below. <code> - Later on, we will use this list_page function on our test cases. It will show if the student_task/list page has the assignment name( Assignment1684 ) that we putted on the database. Also, since there are an assignment assigned to the student, we will expect page to have course table information ( eg. Assignment, Submission Grade, Topic, Current Stage, Stage Deadline, Publishing Rights ). Since the assignment was not being graded yet, on the submission Grade column it will show a N/A . We are using student student2064 as our user. Therefore, the page should show student2064 . We also assigned the student to team up with CSC517, test ( student_id, user type. user type will be test #random number ), and on the page it should show Students who have teamed with you CSC517, test#{n} . Next, the page should not contain other course name. Testing code is showing below. <code> 1. Next, we added a new file spec/features/student_task_spec.rb . However, instructor_interface_helper did not help us to sign up an assignment to the user. Therefore, we will testing if the user have not been signed up for an assignment, and the student_task/list page will only show the first div part. The course information table will not appear on the page. <code>. <image>.", ["The writeup is very good, but The writeup could have been improved by showing the code changes, and also by showing how the code is changed.", "The writeup would have been helpful to show the code in the code snippets, and to explain the changes.", "Also, the code for the tests is not explained, and the code for the tests would have helped to show how the tests are tested.", "The test plan is not described, and The test plan should be explained.", "This is a good start, despite that The test plan is not described, and The test plan should be explained, and the code for the tests should be shown in the description of the tests."], [1.0, 1.0, 1.0, 1.0, 1.0]], "241": ["For testing the changes made, the following credentials are recommended: 1. Instructor Login: username: instructor6 password: password This project does compile. It provides a platform to view assignments, manage teams, select topics and work on improvement through anonymous peer reviews. Expertiza allows the instructor to define different topics that students or teams could choose from as their assignment. Each topic can have 0 or more slots that indicate the number of students or teams that can be signed up for that topic. To improve the user experience when managing topics, the following tasks were identified: 1. Issue #971: Change create topic UI into AJAX 2. Issue #926: We need a way to sort topics by topic number in assignment#edit page 3. Issue #718: We should allow instructors to give feedback when accepting or rejecting topic suggestions. Currently, when instructors manually enter topics, they have to go back and forth between the list of the topic page (views>sign_up_sheet>_add_signup_topics.html.erb) and the create topic page(views>sign_up_sheet>new.html.erb). Adding a new topic can be done through an editable grid (see js-grid) without leaving the list of topic page, by making use of AJAX. The list should be automatically updated when a new topic is entered. <code> On the View ' app/views/sign_up_sheet/_add_signup_topics.html.erb' the following was added: <code> The content of the above tag is completely rendered via Javascript, where we use JSGrid for dynamically allowing users to Add, Delete and Update Topics on the same page. In ' app/assets/javascripts/signup.js ' file, the following was added: The following content shows how AJAX calls are handled/made to our signup controller so that the CRUD operations on the topics page is dealt with <code> The Preview View for Topics Management : <image> After Our Implementation using JS Grids : <image>. This task is to do with sorting the Topics according to the topic number. This functionality is taken care by Js-Grid by itself, where clicking the topic# will toggle the topics in the ascending/descending order. Sorting in Ascending Order: <image> Sorting in Descending Order : <image>. Instructors should be allowed to give feedback when accepting or rejecting topic suggestions. Earlier, feedback on topics suggested by students can be given only when the instructor wants the topic to be revised, not when (s)he is approving or rejecting it. In app/controllers/suggestion_controller.rb Including the text provided in the comment field, while approving the topic. This ensures that comments are saved when an instructor accepts a topic suggestion in the backend. <code> Including the text provided in the comment field, while rejecting the topic.This ensures that comments are saved when an instructor rejects a topic suggestion in the backend. <code> Only an instructor should be able to approve or reject a submission. Therefore, only for instructor role, approve and reject submission options will be provided. <code> Comments can be added even during topic approval or rejection. <image> Comments during approval or rejection get reflected in the feedback list. <image>. 1. Issue #971: Change create topic UI into AJAX 1. Login as an instructor. It will automatically go to the manage courses page 2. Click Assignments tab next to Courses 3. Select the assignment for which a new topic has to be added 4. Click the edit icon for the assignment and go to Topics tab 5. You will be able to see the topics list in a grid format. Click on add icon on the right side corner of the grid 6. You can also edit an existing entry by just clicking on that row in the grid without being redirected to a new page 1. Issue #926: Sort topics by topic number in assignment#edit page. 1. Log in as any user or instructor. 2. Go to the assignments list. Note: this is not the manage assignments for instructors. 3. Click into a finished assignment. 4. Click into a current assignment. 1. Issue #718: 1. Login as an instructor. It will automatically go to the manage courses page. 2. Click on the \"Manage Notifications\" link above the \"Courses\" and \"Assignments\" links. 3. You will be directed to a creation page for notifications. The notification will display on the first page the user is shown. It will disappear when they change or reload the page. Note: instructors on the management page will retain the notification if they switch between Assignments, Courses, and Questionnaires. This is because the JavaScript does not actually reload the page. If the assignment is found, it loads all the topics and checks if the rendered format is json along with a http status 'OK'. If the assignment is not found, an empty json is rendered.", ["The writeup is very good.", "The writeup explains the changes made, and explains the rationale for the changes made.", "The code snippets are not too long, and The code snippets should be separated out.", "The code snippets should be shown in a separate section.", "Also, the code is not very readable.", "I would have liked to see more detail on the code changes.", "For example of that I would have liked to see more detail on the code changes : the \"Issue #971\" section should have been separated out, and the \"Issue #971\" section would have been easier to read.", "that For example, the \"Issue #971\" section should have been separated out, and the \"Issue #971\" section would have been easier to read is a good description of the changes that were made. "], [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "242": ["Currently we have a few classifiers that can detect useful features of review comments, such as whether they contain suggestions. The suggestion-detection algorithm has been coded as a web service, and other detection algorithms, such as problem detection and sentiment analysis, also exist as newer web services..but they need to be integrated properly using API calls in expertiza code. But later on we faced many issues such as: 1) The API call links were outdated 2) The new link that we found were incompatible with the previous work 3) The planned task of adding new API calls as per Carl Colglaizer's Framework turned out to be irrelevant or not required for this project, so we dropped it. So we decided to start with integrating these API Calls from scratch. Features we added in this project 1. Setting up a config file 'review_metric.yml' where instructor can select what review metric to display for the current assignments 2. Based on the selection made by professor, API calls (sentiment, problem, sugegstion) are made and a colorful table is displayed below the review form for student to review 3. The total time taken for making these API calls will be displayed below the table. This design pattern helped us achieve the decoupling and abstraction of implementation code base (makeARequest Function) of API call from the calling function (getReviewFeedback function). Later, refactoring of _response_analysis.html.erb partial further decoupled the implementation. Thus, in a nutshell, application of facade pattern along with some refactoring lead to a decoupled implementation of integration of all 3 API calls. <image>. In the partial view file _response_analysis.html.erb file, we added new javascript functions to make, process and display output of API calls. 1. review_metric.yml config file <code> <image> 1. response_controller.rb <code> <image> 1. response.html.rb <code> <image> 1. _response_analysis.html.erb - fetch_response_comments() function <code> <image> 1. _response_analysis.html.erb - getReviewFeedback() function <code> <image> 1. _response_analysis.html.erb - makeARequest() function <code> <image> 1. _response_analysis.html.erb - combine_api_output() function <code> <image> 1. _response_analysis.html.erb - generateTable() function <code> <image>. 1. <link> for problem metrics only 2. <link> for sentiment metrics only 3. <link> for suggestions metrics only. In order to make the API call, the partial view \"_response_analysis.html.erb\" is rendered in \"response.html.erb\" view file which will be responsible for sending a JSON input to the web service. The input will contain the review comment written by the user and when the student hits the \"Get review feedback button\" the comments will be sent to these api calls in the following json format: Below is a sample input <code> Once the request is sent, we expect the output to be in the following format: Sample Output: (for sentiment analysis API call) <code> Sample Output: (for problem detection API call) <code> Sample Output: (for suggestion detection API call) <code> These outputs (which is a JSON) will be parsed and the concerned metrics such as the sentiment, problem and suggestion will be extracted so the user will be able to view a summarized result of how well their review comments are. In addition, the result will be presented in a colorful tabular format to the user after they hit the \"Get Review Feedback\" button. Also, the total time taken for making these API calls will be displayed below the table. Rspec tests for the same have been written in response_controller_spec.rb <image>. 1. The functionality was written on the client side in javascript solely in _response_analysis.html.erb 2. To test this view, any type of review must be accessible as a student. 3. There is a button at the bottom of the review called 'Get Review Feedback'. 4. When pressing button, API calls are issued and the metrics will show up within the table (a sample of which is displayed below). 5. API calls are slow and will take time to process until the 'Loading...' text disappears. 6. You can modify the comments and click the 'Get Review Feedback' button again to get new feedback, that too can be achieved without the need of saving the review, but still saving the review first is a better option to approach this. 7. All the review feedback for the comments will be displayed in a colorful table. <image>. 1. <link> 2. <link> (the link is mentioned here for records. 3. <link> 4. <link> (make sure you change branch to 'beta' branch if the page doesn't load by default to beta branch) 5. <link>.", ["The writeup is very good, but The writeup could have been better if The writeup had explained the changes made to the code.", "The writeup would have been helpful to have a description of the changes, and how they were made.", "Also, the code snippets are not very detailed, and the code is not clearly separated from the code, which is a problem.", "the code snippets should be separated out in a separate section.", "This would have helped the reader understand what was done."], [1.0, 1.0, 0.0, 0.0, 1.0]], "243": ["1. Renaming done on the UI as well as on the backend 2. Varible names refactored appropritely 3. Flash messages changed accordingly. The error which is raised is due to the following validation present in the model late_policy.rb. 1. After discussing with professor we have decided to increase the max penalty limit to 100 2. Added a flash error message in the create function of late_policies_controller.rb <code>. 1. Added a back link in which redirects the user to edit assignment page. 2. Saved the assignment object in a session variable when the user clicks on the the edit asignment icon 3. We also added a back button on index page since there was no direct way of going back to edit assignment page once a late policy was created. 4. We also added padding between the edit and delete links on index page <code>. While testing this issue we noticed that the functionality was working perfectly fine, however, it was not user friendly. 1. We decided to add a tooltip icon explaining how this functionality works 2. We also inproved its UI by adding the alignment and padding. 1. Added test file late_policies_controller_spec.rb with appropriate test cases 2. Added test file late_policies_spec.rb with appropriate test cases. 1. <link> 2. <link> 3. <link> 4. <link>. 1. <link> 2. <link>.", ["The wiki page is very readable.", "The wiki page explains the changes well.", "The design doc is very detailed.", "However, the test plan is not.", "There is no description of the tests, and the test plan would be helpful to have a link to the code.", "Also, the code is not described in any detail.", "that Also, the code is not described in any detail is not a good thing.", "I would have liked to see more detail on the tests."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "244": ["<link> is a large project developed as a combined effort of students and faculty using the <link> framework. 0536558. Additional funding from the <link> <link> (LITRE) program, the NCSU <link> , the NCSU <link> Initiative, and the Center for Advanced Computing and Communication. Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.1.4. <link> 1.1.5. <link> 1.1.6. <link> 1.4. <link> 1.1.1. <link> 1.1.2. <link> 1.5. <link> 1.1.1. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.1.2. <link>. The goal of this project is to use both Bootstrap and AngularJS to improve the look of the entire Expertiza including the representations of buttons, tables, and other elements. Certain changes in design will also improve the efficiency of the web app when it comes to the amount of time it takes for a page to be loaded. We plan to improve the user experience by replacing the plain html buttons with stylish bootstrap buttons. To make the design of Expertiza consistent, our goal is to replace this plain-styled text with color coded Bootstrap buttons. The new design of Expertiza will include the fixed menu bar on the top of the page. As it can be seen on the screenshot, the user has scrolled down the page, but the menu bar is still visible on the top of the page, making it convenient for the user to navigate throughout the website. <image>. Please refer to the later part of this article: <link> for viewing the current design Now, when trying to open manage-courses, all records are loaded before rendering them onto the page, which takes too long time to load and is not responsive at all. Better practice is on Virgin American‚Äôs website: <link> When the website is representing the calendar, the price for each day is not actually loaded. <image> So in Expertiza, we can create several buttons for course semesters in the page. And if the list is still too long and takes a long time load, we can use a ‚Äòshow more‚Äô button ,or automatically load more data when the scroll bar reaching the end of the page, to minimize the content we need to load after one single mouse click. <image>. We will need to reduce the number of buttons. So we can replace them to 5 buttons with responsive design, that is, no redirecting happens after clicking on the buttons. <image>. Please refer to the later part of this article: <link>. That takes a long time to load and the length of review list is too long. <image>. As an assignment with a goal of improving the graphic design and responsiveness of Expertiza web application, this project mainly follows design patterns from two design pattern groups: structural and behavioral. Another structural design pattern that will be seen in this project is Front Controller pattern. While this pattern suggests that there is a single controller that takes all the requests, when we have both Rails and AngularJS coexisting, we can think of Rails framework as being the \"single bridge\" to the database from AngularJS's stand point. AngularJS, being an outstanding front-end framework, will interact with the user and pass all the request to Rails framework. Rails framework then queries/updates the database and provides AngularJS with the data. Finally, the third structural design pattern that this project follows is Module pattern. Modules are one of the essential constructs in the skeleton of AngularJS framework and, hence, this project is bound to follow module pattern. <image>. Since the large part of this project is to iterate through the database query and show the data to the user with a reduced delay, this project follows the well known Iterator pattern. This approach greatly improves the user experience since it does not leave the user waiting empty-handed until Rails framework completes the full query of the database. <image>. 2. Bootstrap will be applied for better user interfaces. <image>. 2. The database should not be executed before the user clicks on the button. 3. Bootstrap will be applied for better user interfaces. <image>. 1. The list is too long: if there are 20k users in the database, there will be 20k rows in this table in a one page! 1. Load only a given number of records to the view, such as 100 records, when accessing into this page for the first time.", ["The design doc is very good, but The design doc would have been better to have included more detail on the changes made to the code.", "The design doc does not explain the changes that were made, and The design doc would be helpful to have a description of the changes.", "The design doc would also be helpful if The design doc had a link to the Github diff view, so that the reader could see the changes and the code that was made.", "This is a good description of what was done, despite that The design doc would also be helpful if The design doc had a link to the Github diff view, so that the reader could see the changes and the code that was made, and the design docs should have explained the changes, and why the design docs were made."], [1.0, 0.0, 1.0, 1.0]], "245": ["This project works on improving the search functionality of Expertiza, by adding search bars if not present, introducing advanced search feature where user can search on the basis of more than one parameters and making the search functionality appear more elegant. 1. An instructor or administrator can search for a user by name, user-ID, or other characteristics. 2. An instructor should be able to search for assignments by name, due date, or other characteristics. 5. An instructor or administrator should be able to search for all the assignments that a particular user has participated in. In the current system workflow, we found that the user is unable to search in the Manage Users view. In the proposed workflow, we plan to enable the user to search by all the columns in the UI viz. The user will be able to apply multiple filters at a time and the output of the query will match all filters applied. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. However, the search is case sensitive. In the proposed system, the user will be able to search for an assignment using additional filters such as Creation Date and Updated Date along with Assignment Name. The user will also be able to apply multiple filters at a time and the output of the query will match all filters applied. To search for an assignment by Creation Date, the user will be prompted with a calendar where he can select a date and all the assignments created on or before the selected date will be displayed. To apply multiple filters, user can tap on the Advanced Search button available, adjacent to the Search button; a hidden div will then be rendered below containing textboxes for all the columns. All assignments that were created before the selected date for Creation Date or Updated Date columns and the ones that match other filters will be returned. A empty list will be returned if the search criteria doesn't match any records in the database. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. The existing system does not have a search functionality under Questionnaires. The user will be able to apply multiple filters at a time and the output of the query will match all the filters applied. To search for an assignment by Creation Date, the user will be prompted with a calendar where he can select a date and all the assignments created on or before the selected date will be displayed. To apply multiple filters, user can tap on the Advanced Search button available, adjacent to the Search button; a hidden div will then be rendered below containing textboxes for all the columns. All assignments that were created before the selected date for Creation Date or Updated Date columns and the ones that match other filters will be returned. A empty list will be returned if the search criteria doesn't match any records in the database. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. The existing system does not have a search functionality under Reviews. The user will be able to apply multiple filters at a time and the output of the query will match all the filters applied. The user will be able to apply multiple filters at a time and the output of the query will match all filters applied. 1.4. To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns. 1.6. An empty list is returned if the search criteria doesn't match any valid records in the database. 1. Search by user name 2. Search by user name that does not exist 3. Search by user email 4. Search by user email that does not exist 5. Search by user email containing a substring 6. Search by user full name 7. Search by user full name is empty 8. Search by user name and email 9. Search for assignments participated. 1. Search by user name 2. Search by institution 3. Search by creation date 4. Search by updated date. 1. Search by name 2. Search by courses used in 3. Search by assignments used in. 2. Search by score 3. Search by text comment length 4. Search by reviewer and reviewee.", ["The document is very readable, but The document does not explain the changes made to the existing system.", "The document is not clear how the changes made to the existing system are made.", "The design doc does not describe the changes to the code.", "The code snippets are not explained.", "The document is not very detailed."], [1.0, 1.0, 1.0, 0.0, 1.0]], "246": ["The scores for different users, participants and teams for several assignments belong to different courses are calculated for multiple views. This code needs to be made faster. Requirement: Participant.find(participant id).scores # should return a Hash or new object, with a single database query. This method should return the scores of a participant from all the assignments in which the participant has submitted. 1. Participant already has its own participant id. Each user has a different participant for each assignment so we do not need to take participant id as the parameter. 2. This also means it should return a hash that will contain the scores of all the assignments in which this user is a participant since participant id changes each time. A new view was required since this view did not exist previously. A new link has been added to the user's homepage: <image> On clicking on this link, the user will be able see his scores for all the assignments he/she has participated in. This is a new view and will look as below: <image>. We needed to write a method and add a view that computed and displayed the scores of a user across all the assignments user has participated in. We added a new method all_scores in the grades_controller.rb. This method executes the following steps: 1. :Executes the below sql query: <code> The user_id is of the current user is passed as a parameter to this query. Once the hash is created and populated accordingly, this hash is used by the view to display to the user. Requirement: assignment.scores # should return a Hash or new object, with a single database query. This method should return scores of all the participants in an assignment. Instead, we get the scores in the query itself thereby reducing the complexity of the code. 2. The previous code was calling several methods that computed the different parts of the score in a loop. We tried to reduce this by having the database query (wherever possible) do most of the work for the method and the method just populate the hash. 3. Even though the single query approach works faster, for assignments that have a lot of responses, we noticed that the code still took some time to complete. The query in itself runs fast (when executed directly on the SQL server). The scores are computed in the get_scores method of the assignment.rb. For all quiz questionnaires taken by the participant, get all the quiz responses. Create a hash and store the score computed by calling Score.compute_quiz_scores. The total score is then calculated and stored in the hash by calling compute_total_score for each participant. 2. For all teams that participated in this assignment, get the scores into the hash by calling Score.compute_scores for each assessment and questions. Each of them might query the database adding to the time taken. We refactored this code to have the following steps: 1. Created an empty hash before hand. 2. Run a single SQL query that will return all the data required by the hash. 3. Loop through the result set to populate the hash. This speeds up the code since there is only a single SQL query that will get executed. The query is outside the loop and hence reduces the time required. The old code and the new code were tested against the same database, on the same machine and network and it was observed that there was a significant reduction in time taken to get the scores. Snapshot of the time taken for the previous method: <image> Snapshot of the time taken for the method after the above changes: <image> As can be observed, the improvement is significant. Requirements: Add a method course.scores which should return a Hash. This method should return scores of all the participants enrolled in a course. 1. We needed to get the scores of all users for all assignments for a given course. A new view was required since this view did not exist previously. This view will be displayed on clicking on the View Scores option in the Actions panel of the courses as highlighted below: <image> On selecting the highlighted option above, the following page will be displayed: <image>. We needed to write a method and add a view that computed and displayed the scores of all users that have enrolled in a course. This method does the following steps: 1. Creates an empty hash. 2. Runs a single SQL query as below: <code> The course id is passed as a parameter to this query. 1. The result returned from the query is used to populate the hash. This hash is then used to display the different parts of the view. 3. Avoided method calls where values could be obtained in the same SQL query itself. 2. The SQL queries could be compiled into database views. However, if such is required, the query can be made into a database view. 3. The view_my_scores method in the grades_controller can also be made similarly fast by replacing multiple database queries and loops with a single query.", ["The writeup is very readable, but The writeup could have been improved by showing the changes made to the code.", "The writeup would have been helpful to show the changes to the previous code, and to explain how the code was changed.", "The code changes are described in detail, but The code changes should be shown in a table of contents.", "This would have helped the reader understand The code changes.", "Also, the code snippets should be separated from the code, so that the reader can see the code snippets in a single view."], [1.0, 1.0, 0.0, 1.0, 0.0]], "247": ["<link> is an <link> <link> application designed to support team/individual student projects which involves team creation, project sign up, project submissions, document upload (almost any format), and carry out multiple peer review processes for learning and educational purpose. This Open Source application can be cloned from <link> , the latest active branch is <link> . <link> supports email functionality within a Rails application, which involves sending and receiving emails from and to an application. Contents 1.1. <link> 1.1.1. <link> 1.1.2. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.3. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.1.3. <link> 1.1.4. <link> 1.1.1.1. <link> 1.1.1.2. <link> 1.1.5. <link> 1.1.1.1. <link> 1.1.6. <link> 1.1.7. <link> 1.1.8. <link>. Another major issue is the migration issue from <link> to <link> as a result of which many of the unsupported features for Rails 4 have stopped working. Expertiza has two different Mailer implementations based on type of <link> : Synchronous events and Asynchronous events.<ref> <link> </ref> The synchronous events refer to events that should be immediately notified. All synchronous events are triggered by <link> and the call is made to app/mailers/mailer.rb (formally as model in /app/models/) via the sync_message() method call. Here mailer.rb extends <link> class. The required email template has been added for both generic_message and sync_message method calls. They are sync_message.html.erb and sync_message.text.erb <code> 3. Correct <link> and <link> codes have been added to app/views/mailer/generic_message.html.erb 4. The following line in the sync_message(defn) method has been commented out from app/mailers/mailer.rb in order to encode email correctly.<ref> <link> </ref> <code> 5. The following method calls in the following files have been changed. a) app/controllers/grades_controller.rb b) app/models/courses_users.rb c) app/models/participant.rb Original: <code> Changed: <code>. The asynchronous events are registered to <link> object and a <link> server must be activated to carry out the task. The DelayedMailer class acts as a wrapper class (i.e., adapter pattern <ref> <link> </ref>) to the Mailer class in the /app/mailers/mailer.rb via the delayed_message() method call. These events are added to the <link> by Delayed::Job.enqueue() command. Each event as record is stored in the delayed_job table, which can be browsed on <link> . Most of them are database migration files. To eliminate future table creation issues with <link> gem, we have also changed the integer byte length of <link> tables from 10 to 8 and have revised the <link> methods inside the migration files to improve efficiency. <code> Changes to data migration files are illustrated as follows: Original: <code> Changed: <code> Detailed code changed can be found at <link> . The <link> implementation was done via <link> gem <ref> <link> </ref> but it has not been parsed correctly. 2. The following lines have been added to Gemfile <code> 3. The following parsing errors in app/controllers/assignment_controller.rb have been corrected. Original: <code> Changed: <code> 4. The following code in ap/views/assignments/edit/_rubrics.html.erb has been changed. Original: <code> Changed: <code>. <link> is a <link> framework for <link> programming language. Inspired by <link> , it resembles a <link> specification. To test the emailer features, we have restored <link> test cases for both delayed_mailer.rb (asynchronous maier) and mailer.rb (synchronous mailer). Currently, the fixture<ref> <link> </ref> files are not completed and loading them into the test database may cause failure for the test, so we recommend to comment out the following line in the /spec/rails_helper.rb <code> Future developers must take extreme care to make sure all fixture files work before enable this option. <code>. 5. Enter your <link> server account settings in config/environments/production.rb file. 6. Start the rails server by entering <code> 5. Start the delayed_job server by executing <code>.", ["The writeup is very good, but The writeup could have been more detailed.", "The writeup would have been helpful to have a description of the changes to the code.", "The code changes are not explained in prose, but in prose.", "The code changes are shown in prose in prose and not prose.", "It would be better to show The code changes in prose rather than prose."], [1.0, 1.0, 0.0, 0.0, 0.0]], "248": ["Student should be able to navigate to that page through the link provided in timeline. <image> 1. Viewing the timeline 1. Use case id:1 2. Use case description: View timeline in 'Your work' page of selected assignment 3. Actor: Student 4. Precondition: Student should be logged into Expertiza 5. Post condition: Student can view the due dates and timestamps of the activities, if any. 2. Viewing the due dates 1. Use case id:2 2. Use case description: View due dates only when no submissions have been made 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment 5. Post condition: Student will view only dues dates in timeline when no submissions are made. 3. Viewing hyperlink submissions in timeline 1. Use case id:3 2. Use case description: View hyperlink with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have made a hyperlink submission 5. Post condition: Student will view hyperlink of the submitted link with timestamp in timeline 4. Viewing files uploaded in timeline 1. Use case id:4 2. Use case description: View file name with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted a file 5. Post condition: Student will view file name with timestamp in timeline and would be able to download the file upon clicking on filename. 5. Viewing links to submitted reviews with round number 1. Use case id:5 2. Use case description: View review links with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted a review 5. Post condition: Student will view review link with timestamp and round number in timeline and would be redirected to the review submission upon clicking on the link. 6. Viewing links to author feedback 1. Use case id:6 2. Use case description: View author feedback links with timestamp upon submission 3. Actor: Student 4. Precondition: Student should be logged into Expertiza, should be in 'Your work' page of selected assignment, should have submitted an author feedback 5. Post condition: Student will view author feedback link with timestamp in timeline and would be redirected to the author feedback submission upon clicking on the link. Currently when a student logs into Expertiza, he could see the student task list page. In this project, a timeline in the student task list page would be added to navigate student to the due dates and the necessary links easily and keep a track of them. After the addition of the functionality, the student task list page would have the timeline as shown below. Timeline feature is used to display timeline with due dates, submitted links, submitted files, self review, reviews performed(multiple rounds) and Author Feedback. 1. When the student doesn't submit the assignment on time , due date passed would be shown in the timeline. 2. If the hyperlink submitted by student doesnt get submitted properly, it would not show any link to hyperlink on timeline. <image> <image> <image> Testcase 1: A hyperlink is submitted and expect to find 'submit Hyperlink' in the student task page. Testcase 2: A file is submitted and expect to find 'submit File' in the student task page. Expect to find 'round 1 review' in the student task page. Check timeline for 'submit Hyperlink', 'submit File' and 'round 1 review'. <image>. 1. Step1 : Login to Expertiza as Student 2. Step2 : Click the Assignments Tab 3. Step3 : Select an Assignment of choice 4. Step4 : Select 'Your Work' Link and the Timeline would be displayed with only due dates <image> 1. Step5 : Submit a hyperlink in 'Your Work' 2. Step6 : The hyperlink submitted would be refelcted in the Timeline along with the Timestamp. <image> 1. Step7 : Click on the hyperlink displayed which would redirect to the submitted link page. 2. Step8 : Upload a File in 'Your Work' 3. Step9 : The uploaded filename would be reflected in the Timeline along with the Timestamp. <image> 1. Step10 : Submit a review 2. Step11 : The submitted review link would be reflected in the Timeline along with the Timestamp and Round number page. <image> <image> 1. Step12 : Click on the review link displayed to be redirected to the submitted review link page. 3. Step14 : The submitted feedback link would be reflected in the Timeline along with the Timestamp. <image> 1. Step15 : Click on the round review link displayed to be redirected to the submitted feedback link page.", ["The design doc is very readable.", "The design doc explains the changes well, and the changes are described in detail.", "The design doc also explains the rationale for the changes, and how The design doc were made.", "However, The design doc does not explain how the changes were made, and The design doc would be helpful to have a copy of the code to see how the code was changed.", "Also, the code snippets are not shown in the document, and the code snippets are not explained in any detail."], [1.0, 1.0, 1.0, 0.0, 0.0]], "249": ["Once someone has peer reviewed a project, the authors of the project can also provide feedback for this review, called ‚Äúauthor feedback.‚Äù While grading peer reviews, it would be nice for the instructors to include the author feedback, since it shows how helpful the peer review actually was to the author of the project. Expertiza allows instructors to view kinds of reports of assignments in their courses such as submissions, scores, and review reports. To improve the report views, some table columns such as team name, score, the average should be made sortable by using the same existing sort library. Workflow <image>. We have to sort ‚ÄúReview done‚Äù, ‚ÄúTeam reviewed‚Äù, ‚ÄúScore awarded/Avg score‚Äù. in the ‚Äúview review report‚Äù table. <image>. We will be using tablesorter function of jQuery to sort the table.To sort the columns that have constraints, custom scripts will be created. Tablesorter supports custom sorting. By default the sorting is disabled on the columns, we must enable sorting on those columns in order to make it sortable. Three types of scenarios may arise: 1. Sorting by columns alphabetically - To sort the columns alphabetically, the table-head attribute must include sorter-true class with it. 2. Sorting by date - Sorting by date includes creating a generic format for all dates(mmddyyyy). This generic format will be used to parse dates and sorting will be done based on this format. For ‚ÄúAuthor feedback report‚Äù table, we have to change the header name ‚ÄúReview response rejoined‚Äù to ‚ÄúReview responded to‚Äù and ‚ÄúLast rejoined at‚Äù to ‚ÄúLast responded at‚Äù. Then, sort ‚ÄúRejoinder‚Äù and ‚ÄúReview ‚ÄúReview responded to‚Äù as string (alphabetically), sort ‚Äú# author feedbacks done‚Äù by the first number then the second number (same as ‚ÄúReview done‚Äù in the ‚ÄúView review report‚Äù table) and sort ‚ÄúLast responded at‚Äù as date. We will use tablesorter function of jQuery to sort the table. To sort the columns that have constraints, custom parser will be created and used on top of tablesorter. <image>. Add a header, ‚ÄúReports for [name of assignment]‚Äù at the top. We will add header on top of Dropdown menu. <image>. For Author feedback reports, when no feedback has been submitted by any student, the names of the participants appear in a strange horizontal format. Fix this so that the formatting is correct, regardless of how many participants have done author feedback. <image>. <image>. We added jquery tablesorter in the script section to sort the columns. We had to enable the sorting on various columns so we added \"sorter-true\" in class of all the table headers. <image> <image> <image> <image>. We used jQuery tablesoter to sort the data in app/views/reports/_feedback_report.html.erb. We created custom parser to sort the dates in the last column and placed it tablesorter script. Due to blank columns the tablesorter threw an error. When the sorting is done based on rejoinder column, student data in rejoinder column will be hidden. While sorting on other columns, data in rejoinder column will be made visible. <image> <image> <image> <image> <image> <image> <image>. We added a header on top of Dropdown menu. <image> <image>. For Sorting Review Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select Review Report from Drop-down menu. 5. Sort the columns by Clicking on it. For Sorting Author Feedback Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select Author Feedback report from Drop-down menu. 5. Sort the columns by Clicking on it. For Sorting Teammate Review Report Table 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. Select teammate review report from Drop-down menu. 5. Sort the columns by Clicking on it. For Missing Header on View Reports 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. For Rendering Proper Format in Author Feedback Report 1. Login to expertiza using the above credentials. 2. Under Manage Notifications tab click on Assignments. 3. Under Assignments click view report. 4. From drop-down menu select Author Feedback Report.", ["The writeup is very good.", "The writeup explains the changes made, but The writeup would have been better if The writeup had explained how the code was changed.", "The code snippets are not explained in any detail.", "The code snippets are just shown in a list of files.", "that The code snippets are just shown in a list of files is not very helpful.", "I would have liked to see more detail on the changes.", "Also, The code snippets should be shown in more detail."], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0]], "250": ["It uses <link> Framework. 1. Refactor automatic_review_mapping method 1.1. Write failing tests first 1.2. Split into several simpler methods and assign reasonable names 1.3. Extract duplicated code into separate methods 2. Refactor response_report method 1.1. Write failing tests first 1.2. Use factory pattern to create a corresponding report according to the switch condition 1.3. Create corresponding helper classes for different report types. Review mapping controller handles the review responses that are done on every assignment. It assigns reviews to different teams or individual student depending on the type of assignment(team project or individual project). As this method was long and complex it needed to be broken down into smaller methods with specific functionality. Original: <code> After Refactoring: <code>. This method automatic_review_mapping was very long and complex. A few methods in the controller were acting as private methods for this method and were being called only in this method. So this automatic_review_mapping method was split into smaller methods. All these small methods and the private methods were shifted to a helper class: AutomaticReviewMappingHelper. Methods 1. initialize(created) 2. automatic_review_mapping_strategy(updated) 3. execute_peer_review_strategy(updated) 4. peer_review_strategy(updated) 5. assign_reviewers_for_team(updated) The common parameters that are used in the automatic review mapping method are defined here so that they can be used as instance variables throughout for better flow of the code. <code> <code> <code> <code> <code>. This method consisted of long case statements making it a long and complex to understand. So this method was refactored using Factory Design Pattern. Original <code> After Refactoring <code>. As seen, the controller method originally was sharing a lot of instance variables with the corresponding views, and it has the long switch statements. Each switch condition is corresponding to a different type of report. Thus, different report helper classes are created for different types of report. These helper classes are grouped in the helper module: ResponseReportHelper. <code> <code> <code> <code> <code> <code> <code> <code> <code> The <link> is used to create a corresponding type of report, according to the switch condition. <code>. 1. Tests for these methods already existed. We altered them according to the refactoring that needed to be done. 2. Additional tests were added for the corner cases that weren't being tested. 4. After Refactoring the tests pass for all the test cases. 5. Test cases for automatic_review_mapping for which tests are run: 1.1. all the parameters are 0 1.2. all parameters except student_review_num are 0 1.3. calibrated parameters are 0 review_num are non-zero 1.4. Team is empty, max team size is 1 and when review_num parameters are not zero 1.5. Create Teams when team is empty 1.6. when artifacts num are non zero it should set the instance variables and call methods. 1. Test cases for response_report for which tests are run: 1.1. when type is SummaryByRevieweeAndCriteria 1.2. when type is SummaryByCriteria 1.3. when type is ReviewResponseMap 1.4. when type is FeedbackResponseMap 1.5. when assignment does not have varying_rubrics_by_round feature 1.6. when type is TeammateReviewResponseMap 1.7. when type is Calibration and participant variable is nil 1.8. when type is PlagiarismCheckerReport Tests for automatic_review_mapping: <code> Test for response report: <code> Additional Tests in the Controller: <code> Additional Tests in helper_spec: <code>. Tests passed for Revised Code: 1. Test for helper <image> 1. Test for Controller <image>. git clone <link> 1. go to expertiza folder cd expertiza 1. run bash setup.sh bash setup.sh 1. run bundle install bundle install 1. run rails server rails server 1. Use firefox in the image and test response_report method 1.1. Type in <link> 1.2. If you need to log in, use account name ‚Äúinstructor6‚Äù, and password ‚Äúpassword‚Äù. 1.3. In order to view different reports, select different types of report and click ‚ÄúSubmit‚Äù button. <image> 1. Use firefox browser in the image and test automatic_review_mapping method 1.1. Type in <link> 1.2. If you need to log in, use account name ‚Äúinstructor6‚Äù, and password ‚Äúpassword‚Äù. <image> <image> <image>. 1. <link> 2. <link> 3. <link>.", ["The writeup is very good.", "The writeup explains the changes well, but The writeup could have been improved by a bit more detail.", "The code snippets are not very long, and The code snippets should be separated out.", "The code snippets should be shown in a larger font, and it would have been helpful to have a link to the code in the code.", "Also, the code is not very readable.", "I would have liked to see more of the code flow diagram.", "This is a good description of the changes, despite that I would have liked to see more of the code flow diagram, and this is not a very detailed one.", "There are a lot of screenshots."], [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0]], "251": ["Contents 1.1. <link> 1.2. <link> 1.3. <link> 1.1.1. <link> 1.1.2. <link> 1.1.3. <link> 1.4. <link> 1.5. <link> 1.6. <link> 1.7. <link> 1.8. <link> 1.9. <link> 1.10. <link> <link> <link>. Questionnaire Controller interacts with the user to create and edit questionnaires such as review rubrics, teammate-feedback rubrics, quizzes, and surveys. This page provides a detailed description of Open Source Project on Expertiza for refactoring the questionnaire controller. Why is Refactoring Required 1. It helps in making the code more understandable 2. It makes the code more maintainable 3. To remove repetition of code. The scope of the project is to refactor Questionnaire Controller which is very huge, in order to follow the standard principle of Fat Models and slim controllers. 1. questionnaire_controller.rb 2. questionnaire_helper.rb 3. advice_controller.rb. 1. Functionality moved to quiz_questionnaire.rb. 2. edit_advice method was not being used, so it was removed. 3. save_advice moved to the advice_controller. 4. copy, update_quiz, valid_quiz methods were long and have been broken up. clone_questionnaire_details was also broken up and renamed. 5. Added comments to select_questionnaire_type 6. Debug output (print statements) have been removed. 7. Changed code to follow the global rules. 8. save_new_questions, delete_questions, save_questions have been moved to a separate class. <link> <link> <link>. A Subset of the UML class diagram including only the related classes for this project can be drawn as shown below. <image> Questionnaire Controller is the superclass of QuizQuestionnaire and all the other classes - User class, Advice class and Questionnaire classes are related model Classes to the controllers that we have modified. Several methods in Questionnaire Controller class required refactoring to ensure that the change is reflected in the entire project. The names were changed to follow method naming conventions in Ruby. Deprecated code was removed and re-coded to ensure that the code worked in future version of Rails as well. Methods that are more general in the sub classes were moved to the parent class. Some methods that calculate that were colliding with other files were moved to a helper method questionnaire_helper.rb . 1. The quiz questionnaire related methods such as view_quiz, update_quiz, new_quiz and validate_quiz are moved to questionnaire_helper.rb to make the questionnaires_controller thin and follow global rule of thin controllers and fat models . <image> 2. Non Restful method names changed accordingly to make them Restful. Before <code> After <image> 3. edit_advice method is evidently not used, and removed. This edit function is already implemented in advice_controller.rb. 4. save_advice has been moved to the advice_controller. 5. Global rule changes for using Hash - value key pair implemented [Use key: ‚Äòvalue‚Äô, not :key => ‚Äòvalue‚Äô] accordingly. <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> 6. \".eql? <code> 7. Removed duplicate and redundant code making the code DRY. <code> 8. Removed unnecessary debug prints present in the code. <code> 9. Used `&&` and `||` rather than `and` and `or` to keep boolean precedence as per global rules. <code> 10. More global rule changes. <code>. The following object oriented design principles were followed during refactoring: 1. Single Responsibility Principle : The single responsibility principle states that every context (class, function, variable, etc.) should have a single responsibility. It was maintained that each method should be involved with a single responsibility and the code that was not related to that particular functionality was moved to other method. This was also taken care of in terms of classes. The repetitive and redundant code was removed from the associated classes and methods. We tested the functionality of the questionnaires controller before and after refactoring by manually creating and listing the questionnaires, there is no change in behavior observed. After Refactoring, the questionnaire controller is working as before. <image> <image> <image>. 1. Refactoring was performed as per requirements in the files questionnaire_controller.rb, and advice_controller.rb. 2. The code from models cannot be moved directly to controllers, so the code was moved to the helper class questionnaire_helper.rb. 3. Some methods with confusing method names have also been renamed. <link> <link> <link> <link> <link>.", ["The wiki page is very detailed, but The wiki page does not explain the changes made.", "The wiki page is not clear how the code is changed, and the code would be helpful to have a description of the changes.", "the code is not described in any detail, and the code snippets are not shown.", "This is a good example of a design doc, but the code changes are not described.", "They are described in prose, but not in prose.", "I would have liked to see more detail on the changes, and also on the code that was changed."], [0.0, 0.0, 0.0, 1.0, 0.0, 1.0]], "252": ["Expertiza has a functionality that allows students and instructors to receive and give grades, respectively. This functionality is implemented in the grades_controller.rb file. This controller currently violates some essential Rails design principles including having too much calculation and having methods' names that violate Ruby naming convention. Here are the refactoring steps needed to be taken in order to fix the grades_controller.rb . 1. Create a new private method to encapsulate the population of the view model for all the necessary data (lines 102-107). 2. Simplify the logic surrounding the error flashing. The nested logic seems unnecessary (lines 190-192). 3. In line 300: 1.1. Increase readability by fixing whitespace according to the common Ruby Programming guidelines. 1.2. Return is not needed here. 1.3. Remove space between ‚Äò!‚Äô and its argument. 1.4. Use meaningful variable names and break up the expression. 4. Move these functions into grades_helper.rb and change their names to be more Ruby-like: 1.1. calculate_all_penalties 1.2. calculate_penalty_attributes 1.3. mean (also cease the usage of the assignment) 1.4. calculate_average_vector 1.5. build_score_vector 1.6. Remove_negative_scores_and_build_charts 5. The previous programmer used update_attribute, which is concerning, as validations are ignored (Line 153 and 219). 1. Comment changed that was wrong (\"head\" into \"heat\") <image> 1. Line 102-107 (New Private Method made to encapsulate this) <image> <code> <image> <code> <image> 1. Line 190-192 <image> <code> <image> 1. Line 300 <image> <code> <image> 1. Lines 153/219 <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image> <code> <image> <image>. To test this controller, run the following command to verify the changes do not break any core functions. <code> <image> <image> When you run the program and get to login page. Use credentials below for instructor. <code> <image> A good student to impersonate for testing is <code> <image> <code> <image> <code> <image> <code> <image> <code> <image> 1. To Do: Add Rspec tests to grades_helper.rb Important views for using refactored functions <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code>.", ["The writeup is very readable.", "The writeup is very detailed, but The writeup does not explain the changes made.", "The code snippets are not explained in any detail.", "The code snippets are just shown.", "I would have liked to see more detail on the changes.", "For example of that I would have liked to see more detail on the changes : The code snippets should be shown in a table of contents.", "that For example, The code snippets should be shown in a table of contents is not a good way to show the changes, and it would be better to show the changes in a list."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0]], "253": ["Expertiza is an Open Source Software project developed by NCSU. It allows the instructor to create assignments as well as modify existing assignments. Students can signup for topics in an assignment and can submit articles, codes, web-sites etc. It is a web application built on Ruby on Rails framework. It also allows students to review the submissions that have been made other students. In the current implementation only the students can sign up for topics. Because of this, no higher authority (e.g instructor) can control the signups in a straightforward manner. If the instructor wishes to assign a particular topic to a team or remove a team from a particular topic then the instructor has to impersonate that student and sign up for the topic. Due, to the current implementation, you can neither handle the mistakes in signups , nor make modifications to the existing signups without impersonation. The new implementation allows an instructor to assign a particular topic to a team as well as remove a team from a topic.This functionality has been added in views/sign_up_sheet/_all_actions.html.erb which now has a '+' sign to assign a topic to a particular user. If the instructor clicks on this, then a view will appear which takes in the username of a student to be added. When the box is filled out and the ‚Äúadd‚Äù button clicked, then the indicated user‚Äôs team is signed up for the topic. If there are no slots available for that topic then the team will be put on the waiting list. There is also a 'X' sign that will help the instructor to remove a team from a topic. Some of the scenarios where the instructor might wish to add a team would be if the sign up deadline has passed, or if the instructor has decided to update the maximum number of teams allowed to choose a particular topic. The instructor might want to drop a team from the topic if the team doesn't want to proceed with the same topic for the assignment. With the new implementation, Instructors/Teaching Assistants do not need to go through the trouble of impersonating a student in order to add or drop their team from topics. We have chosen the nested if-else approach because there were many scenarios , all of which required us to take different actions. Changes were made in the following files - 1. controllers/sign_up_sheet_controller.rb 2. views/sign_up_sheet/_all_actions.html.erb 3. views/sign_up_sheet/assign_topic.html.erb 4. views/sign_up_sheet/remove_topic.html.erb Functions added to implement functionality :- 1. update_team 2. assign_topic 3. remove_team 4. remove_topic In the sign_up_sheet controller, two major methods were added: <image> <image> Two additional icons have been added in the Actions column. The ‚Äògreen plus‚Äô icon allows you to add a team to the current topic. Clicking on the icon redirects you to a form, where the admin is required to enter the username of the person whose team he wishes to add. <image> Clicking submit then redirects back to the original page, with a flash message containing the status of the operation. <image> In case the topic has already been assigned the maximum number of teams, the new team is added to the waitlist. <image> The 'red cross' icon is used to remove a team from the given topic. Clicking on it takes the admin to a form, where he is required to enter the username of one of the team members belonging to the team that is to be removed. Submitting the form redirects the user back to the original page, with a flash message indicating the status of the remove operation. <image>. The system can take in individual users who don't have a team or topic and can add him/her to the existing teams that are enrolled for the topic. 1. <link> 2. <link> 3. <link>.", ["The document is very readable, but The document does not explain the changes made.", "The document is not clear why the code snippets are not shown in the code.", "the code snippets should be shown in a separate section.", "the code snippets should be linked to the code in the document.", "Also, the code in the document is not described in any detail.", "This is a good example of a design doc, but the code in the document should be explained in more detail."], [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]], "254": ["3. In the DB the default number of meta-reviews allowed and required should be null. 6. When a user requests a new meta-review, the field which says the number of meta-reviews left ( refer to above image ‚ÄúNumbers of Meta-reviews left:‚Äù) does not change and the button to request a new meta-review disappears. The code below shows the conditional used to display the \"Request new meta-review\" button. Currently, the number of required and allowed meta-reviews is always being set to 3 in the database. When the checkbox for setting meta-review limits is unchecked, the values of number of meta-reviews allowed and required should be null. The \"Request new a meta-review\" button should be hidden when: 1. The number of meta-reviews in-progress is greater than the maximum allowed outstanding reviews. 2. The number of reviews allowed is limited AND the total number of meta-reviews completed or in-progress is greater than the number allowed. The code below shows the conditional used to display the \"Request new meta-review\" button. The user should NOT be able to see the 'Request a new meta-review to perform' button when there are no reviews available. 1.1.1. A student should NOT be able to request a meta-review on their own review. 1.1.2. When the meta-review limit on the assignment is set to 1 then a student should NOT be able to request a second meta-review. 1.1.3. The user should not be able to see the 'Request a new meta-review to perform' button when they have performed all valid reviews. 1.1.1. The user should be able to click the 'Begin' button and still see the 'Request a new meta-review to perform' button. 1.1.2. The user should NOT be able to see the 'Request a new meta-review to perform' button when they have reached the meta-review limit. 1.1.3. If the user requests two meta-reviews but has not submitted, then they should not be able to request a new meta-review. 1.1.4. The user should be able to request a meta-review if they are above their required but below the allowed number of meta-reviews. Number of meta-reviews left should decrement when a user requests a meta-review. 1.1.1. The user should see the number of meta-reviews left decrement after a new meta-review is requested. 1.1.2. The user should see the number of meta-reviews left decrement after a new meta-review is completed. All meta-review tests make meta-reviews allowed only during the meta-review round. 1.1.1. The user is able to SUBMIT a simple meta-review. and set the number of allowed and required meta-reviews. 1. User should NOT be able to see 'Request a new meta-review to perform' button when there are no reviews available. 1. User is able to SAVE a simple meta-review. 2. User is able to go BACK during a simple meta-review since this functionality is available for reviews. 3. When the limit and required number of meta-reviews on the assignment are equal, then a student will see they need to submit exactly that number of meta-reviews. 4. When there are more meta-reviews allowed than required, then a student will see they need to submit between the two numbers of meta-reviews 5. When the meta-review limits for an assignment are unset then a student will see that the number of meta-reviews aren't limited 6. A student should not see a number of required or allowed meta-reviews when there are no limits on meta-reviews 7. A student should see the number of meta-reviews decrement after a review is requested 8. A student should see the number of meta-reviews decrement after they complete a review 9. A student should not be able to request a meta-review on their own reviews 10. If the meta-review limit on the assignment is set to 1 then a student should not be able to request a second meta review 11. User should not be able to see 'Request a new meta-review to perform' button when they have reviewed all valid reviews already. 1. User should be able to request more than one meta-review before completing any 2. User should not be able to see 'Request a new meta-review to perform' button when they have reached the meta-review limit 3. User should not be able to request more than two meta-reviews without completing at least 1 4. A student should be able to request a meta-review if they are above their required but below their allowed meta-reviews <image>.", ["The code is very readable, but The code would have been better if The code had been more readable if The code showed the code snippets that were used.", "The code is not very readable.", "The code would have helped if The code would show the code that was used to create the code.", "Also, The code is too long, and The code would be helpful to show the changes that were made to the code, rather than just the code for the code changes."], [0.0, 0.0, 0.0, 1.0]], "255": ["A response is the object that is created when someone fills out a review rubric, such as when one writes a review, gives feedback to a reviewer, or fills out a survey. It is not the worst controller in the system, but it would be much clearer if its method names were more descriptive of what they do. This project tries to modify and refactor the response_controller.rb in a more clear way. response_controller.rb response.rb. 1. def assign_instance_vars 2. def scores 3. def new 4. def set_questionnaire 5. def set_questionnaire_for_new_response 6. def show_calibration_results_for_students. Since most of the method involved in our project is private methods and all of the public methods in response controller were already tested. Thus, we will focus on testing methods we created in the model class: response.rb spec/models/response_spec.rb will be edit in order to test our methods. We did the following refactor to make this method more clear: 1. the instance variables are actually action handles to the views from controller including \"new\" and \"edit\", thus refactoring method name to assign_action_parameters would be better to understand what this method is trying to do. 2. This method is a private helper method and is used in new and edit methods to set the action parameters for the new and edit actions <image> 1. After renaming, the method became more clear of what it's doing <image>. 1. This method was already defined in other classes and is useless in the current class, thus remove it would be a reasonable choice. <image>. 1. In the method set_content in response_controller.rb, there is one line of code that \"new_response ? set_questionnaire_for_new_response : set_questionnaire\". Thus, we can tell the method set_qustionnaire will called when new_response is false, which means that the object was triggered by an existing response. In the method set_questionnaire, the line of code that ‚Äú@questionnaire = @response.questionnaire_by_answer(answer)‚Äù, which is looking up the questionnaire answered by this existing response. Therefore, refactoring the method name to find_quesetionnaire would be better to understand. <image>. 1. In the method set_content in response_controller.rb, there is one line of code that \"new_response ? set_questionnaire_for_new_response : set_questionnaire\". Thus, we can tell the method set_qustionnaire will called when new_response is true, which means that the object was triggered by a new response. In the set_questionnaire_for_new_response method, the \"cast\" statement informs us that the new questionnaire are created based on the types or Reviewers, such as Review, Metareview, Teammate Review and so on. Therefore, refactoring the set_questionnaire_for_new_response method to create_new_questionnaire would be better to understand. <image>. 1. This method shows the result of expert review for reviewer after teacher or TA submit the calibration by editing the assignment. 2. The method makes about five database accesses and the code is quite messy and thus break it into 2 methods with the business logic moved to response.rb would be a good way to make the code in controller cleaner. <image> 1. The method get_questions_from_assignment is the part that's inside the model class and contains logic of mapping reviews with assignments in the questionnaire and return questions in the joined table <image>. <image>. <image>. <image>. 1. This method contains a complicated condition that determines whether the submission has been updated since the last time it was reviewed. If it has not, then the reviewer can edit his/her previous review. If there has been an update, then the reviewer gets a new review form to ‚Äúupdate‚Äù the review. 2. So we break the new method into two methods: new and get_most_recent_response and put the logic into the response controller class. 3. The method get_most_recent_response in the model class tests whether there has been a review since the last file or link was submitted and in the controller this method was called to get the newest response. <image> 1. The new method after refactoring, now the code is quite clear and with only one appearance of variable \"@response\" <image>. <image>. <image>. Most of the method involved in our project is private methods and all of the public methods in response controller were already tested. Thus, we will focus on testing methods we created in the model class: response.rb spec/models/response_spec.rb will be edit in order to test our refactored methods <image>.", ["The writeup is very good, but The writeup could have been more readable if The writeup had explained what the refactorings were for.", "the refactorings would have been better to show the code in the code snippets, rather than just the code.", "the code snippets are not very long, and the code is not very readable.", "I would have liked to see more of the code flow diagram.", "Also, the code changes are not described in any detail.", "the code changes are just shown in the text.", "that the code changes are just shown in the text is not a good way to explain what the code changes are doing."], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]], "256": ["<image> This button takes the student to the create/edit Review Questionnaire page. The student then can create a new rubric. Added a new field called 'supplementary_rubric' to the 'teams' table so that the supplementary rubric could be stored. Supplementary rubric questions are visible along with instructor generated rubrics. <image> ‚ÄúView‚Äù function for a rubric displays answers submitted for the Supplementary rubric questions along with Review Questionnaire for Reviewer. <image> ‚ÄúYour Scores‚Äù function for the Reviewee displays answers submitted for the Supplementary rubric questions along with Review Questionnaire. <image> \"Alternate View\" for \"Your scores\" should also include Supplemenraty Rubric questionnaire. 3. Polymorphism 4. Inheritance Use Case Here SRQ is used for newly added field supplementaryReviewQuestions in the Teams table and it is initially set as null for all the table entries.Once a student adds a specific Questionnaire to his project this field stores the id of that Questionnaire which is stored in the Questionnaires table. <image> Use Case to Add Questionnaire Functionality: In the \"Your Work\" section, Student will be shown a button \"Manage Rubric\", when clicked, if the supplementaryReviewQuestions column in Teams table is null for that team, Questionnaire will be created and SRQ in Teams table will be updated to contain the Questionnaire ID. The student will be directed to the Edit Questionnaire page with exsiting logic. <image> Use Case for Show Questionnaire Functionality: When the student orders for new reviews, if the supplementaryReviewQuestions column in Teams table is not null for the assigned team, extract the questionnaire for supplementary reviews and append in a new section below normal Questionnaire. <image> Use Case for Show Review( and Scores) Functionality: When the Student or the Instructor checks the reviews and scores on rubric, if the supplementaryReviewQuestions column in Teams table is not null for the team, extract the questionnaire review for supplementary questions and append in a new section below normal Questionnaire Reviews. To provide the view for the scores of a team we will add one more partition containing the scores for the supplementary questionnaire and implement the already build logic to get and display the scores. 2. To check if clicking on \"Manage Supplementary Rubric button\" creates a questionnaire id in Supplementary rubric column of Teams Table. 3. To check if a reviewer creates a Rubric, the assigned student is able to see the Supplementary Review Questionnaire whenever he/she logs in and tries to review it. <code> <code> <code> <code> end. Here SRQ is used for newly added field supplementaryReviewQuestions in the Teams table and it is initially set as null for all the table entries.Once a student adds a specific Questionnaire to his project this field stores the id of that Questionnaire which is stored in the Questionnaires table. <image> Use Case to Add Questionnaire Functionality: In the \"Your Work\" section, Student will be shown a button \"Manage Rubric\", when clicked, if the supplementaryReviewQuestions column in Teams table is null for that team, Questionnaire will be created and SRQ in Teams table will be updated to contain the Questionnaire ID. The student will be directed to the Edit Questionnaire page with exsiting logic. <image> Use Case for Show Questionnaire Functionality: When the student orders for new reviews, if the supplementaryReviewQuestions column in Teams table is not null for the assigned team, extract the questionnaire for supplementary reviews and append in a new section below normal Questionnaire. <image> Use Case for Show Review( and Scores) Functionality: When the Student or the Instructor checks the reviews and scores on rubric, if the supplementaryReviewQuestions column in Teams table is not null for the team, extract the questionnaire review for supplementary questions and append in a new section below normal Questionnaire Reviews. To provide the view for the scores of a team we will add one more partition containing the scores for the supplementary questionnaire and implement the already build logic to get and display the scores. 1. Created a migration script to add a new column 'supplementary_rubric' to the Teams table 2. To add supplementary rubric: In submitted_content_controller.rb: created a new function 'manage_supplementary_rubric' <code> In the view, submitted_content/_mail.html.erb: Created a button 'Manage Supplementary rubric' to be shown in 'your work' tab <code> After this, the same functionality of adding a rubric and questions is used as before. 2. To check if clicking on \"Manage Supplementary Rubric button\" creates a questionnaire id in Supplementary rubric column of Teams Table. 3. To check if a reviewer creates a Rubric, the assigned student is able to see the Supplementary Review Questionnaire whenever he/she logs in and tries to review it. <code> <code> <code> <code> end.", ["The writeup is very good.", "The writeup explains the changes well, and the code snippets are well organized.", "The only thing I would have liked to see is that the code snippet for the \"Show Questionnaire\" section should have been shown in the \"Your Work\" section.", "This would have been a good way to show the changes to the code.", "Also, the description of the tests is not clear.", "I would like to see more detail on the tests.", "For example of that I would like to see more detail on the tests : the test plan should have a description of what tests are being tested.", "And the test flow should be shown."], [1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0]], "257": ["Review \"tags\" are a form of feedback on Expertiza where students \"tag\" (classify) text from peer reviews, using Yes or No answers to questions chosen specifically for each tag deployment. <image>. It can be difficult for students to find a tag they missed on the Team View page, and other teams are working with ML algorithms to \"pre-tag\" as many reviews as possible, leading to a granular field of completed/incomplete tags. At this time, the only tagging feedback students see are the tag prompts and a Javascript counter with a numeric representation of how many tags have not been completed. In order to find a missed tag, students have to scroll the page and manually search for tags that aren't done. In order to help students complete all the tags for an assignment, we propose a new, dynamically generated heatgrid on the \"Your Scores\" view that breaks down reviews and tags by round, question, and review, which uses visual cues to help students find incomplete tags. The heatgrid shows both a total count of \"complete\" out of \"available\" tags, and individual tags with color-scaled feedback for completeness. The new heatgrid must handle these requirements, and display visual feedback accordingly: 1. Single and multiple round reviews 2. Reviews with and without tag prompts 3. Dynamically update as tags are completed 4. Different tag deployments will use different numbers of tags per review 5. Use of existing review row-sort functionality 6. Not rely on the database for tag data, as AnswerTag database rows may not exist until tags are clicked. For example, if there are 370 tags in total on this page and 10 of them have already been tagged, then 10/370 will be displayed. This element will also be updated dynamically when users make tag changes on this page. A simple JS function to count all the tag elements on current page. It will be invoked when the page first being rendered and also when any tags are changed by users. A simple JS function to count the number of tagged tags on the current page. It will be invoked when the page first being rendered and when any tags are changed by users. This JS helper dynamically render the page when any tags are changed by users. <image>. For manual testing purposes, we logged in as instructor6 in order to: 1. View the tagging report as an instructor/TA (Instructor tagging is permitted, and tags are separate from Student Tags) on view_team 2. Impersonate a student to view the tagging report on view_team as a student 3. View the mini-report on Alternate View both as students and instructors 4. Ensure that changing of tags updates the Tagging Report 5. Ensure that the Tagging Report interacts well with the existing layout 6. Ensure that the Tagging Report is hidden/shown when \"Hide Tags\" is clicked 7. Ensure that the Tagging Report accordions as expected when clicked 8. Confirm that mouseover events display the expected tooltips, including color scheme for the \"10 out of 250\" cell as well as color scheme for the main report body, and the Expand/Collapse tooltip 9. Ensure that the Tagging Report is hidden when there are no Tags available for a view_team page 10. Ensure that the Tagging Report was compatible with different tag deployments containing different numbers of tags A good example of functionality for a project with reviews and one with reviews can both be found with student7856. Program 2 has plenty of reviews that can be tagged and untagged and checked that the heatmap functionality is working. Program 1 does not have any reviews to tag and was checked to ensure that nothing broke due to not having any reviews to tag. Many recent assignments (2017-present) which have reviews have tag deployments. <image> 3. Both instructors and students can enter tag data. To view the instructor view, tags, and tagging heatgrid, click \"Assign Grade\". <image> 5. Click \"Your Scores\" to view the main View Team page which includes most of the functionality, including the tag heatgrid. On the main View Team Page, click a question row and change one or more tag prompts, to ensure the heatgrid and fraction are updated. c. Click \"Hide tags/Show Tags\" to show and hide all tag-related data. e. Click the row-sorter for question or average, and change one or more tag prompts to ensure the heatgrid is still updating the correct tags <image> 7. To view the \"Alternate View\", navigate back and click \"Alternate View\". This view should show a small counter near the top of the page with tag completion data. 9. We suggest now impersonating student7856 and navigating to Program 2 , then Your Scores to view a series of reviews with all tags completed so you can see how the interface behaves. 10. Finally, we suggest viewing an assignment which has reviews, but does not have a tag deployment assigned, to ensure none of the heatgrid materials related to tagging are displayed.", ["The writeup is very good, but The writeup could have been improved by showing the code changes, and also by showing how the code is being used.", "the code would have been helpful to show the code snippets, and to explain how the changes are made.", "the code snippets are not very detailed, and the code flow is not described.", "This is a good example of a design doc, despite that the code snippets are not very detailed, and the code should be shown in a more readable format."], [1.0, 1.0, 1.0, 1.0]], "258": ["The quality of the reviews can be improved if students are shown some example reviews while they peer review. These example reviews can either be taken from the assignment of current semester or from the same/related project of previous semesters. The objective of the project is to add a feature to show some good sample reviews while the students peer review other teams work. To enable this, students while submitting their peer review give a consent on whether their reviews can be shown as an example to others. Instructors then select a subset of these reviews to be posted as an example reviews. These example reviews are shown in the peer review page (Other's work link) to the entire class. 3. The student can remove their consent anytime, and the sample review should no longer be visible to other students. In the order of flow, 1. Student's Consent: In each review assignment, there will be a checkbox that says \"I agree to share my review as a sample for others\" then students can decide to check this box or not just before they submit reviews. Sequence Diagram: <image> 2. Instructor's Selection: The instructor can select from among the \"public\" reviews and decides which to make visible to other students doing a particular assignment, i.e. all participants in that assignment. If this review has already been shown as an example, the button should be ‚Äúremove this review from examples‚Äù instead. Sequence Diagram: <image> 3. List of Sample Reviews: A participant can see these \"exemplary\" reviews by going to \"Others' work\" for the assignment in question, and clicking on one or more links that say, e.g., \"Sample review\". And it should be shown just below the title ‚ÄúReview for ...‚Äù. 1) Add 'visibility' column to responses 2) Add new Table 'sample_reviews' 2. Mapping of Reviews and Assignment: The example reviews can either be taken from an assignment of the current course or it could be from an assignment from a previous course. One idea is that when clicking to ‚Äúmake this review an example‚Äù, it will link to a page where you can select an assignment to which you have access (the same as the list of ‚ÄúAssignment‚Äù in the tree_display), then the example review will be shown to all participants of that specific assignment. 5. To allow instructor to select among the public reviews to shown as examples to all students a button 'Mark as an example' in the popup views. Changes corresponding to this is made in /app/views/popup/team_users_popup.html.haml 5. To enable students to see the example reviews, a link Sample reviews is added in the Other's work page. As a Student (Scenario 1): Student giving consent to make their review public 1. Log in. 4. Click on any assignment for which the review has to be submitted. 5. Assignment task page is displayed. 6. Click on \"Other's work\" to open the reviews summary page (at /student_review). 7. Chose to review any of the teams' assignments that are displayed. 8. Select a team for review and fill in the review. 9. Before submitting the review, select the checkbox that says \"I agree to share this review anonymously as an example to the entire class\". 10. After clicking on the submit button, the review submitted has been made public. As a Student (Scenario 2): Showing all the available sample reviews for respective assignment 1. Log in. 4. Click on any assignment for which the review has to be submitted. 5. Assignment task page is displayed. 6. Click on \"Other's work\" to open the reviews summary page (at /student_review). 7. Below the heading \"Reviews for ...\", click on the \"Sample reviews\" link. 8. This opens a page where the student can view all example reviews for that assignment. 5. Displays a list of reviews submitted by students. 7. Displays the summary of reviews submitted by that student, with a \"Make as an example\" button on the right of every review. 8. Click on \"Make as an example\" for the intended reviews, which opens a popup that displays a list of all assignments that are a part of the instructor's courses. 9. From this list select all assignments for which the review has to be shown as a sample. 10. Click on 'Publish Sample Reviews' after selection (this closes the popup). 11. Navigate to view reviews of that particular assignment and click on \"Sample Reviews\". 12. A new page is opened that lists out all the sample reviews of the assignment. The first set of tests are for testing scenario of i) a student making his review public/private and i) student viewing the sample reviews. The second set of tests are for testing i) instructor marking a review as an example and ii) selecting the assignments to which the reviews has to be shown.", ["The design doc is very readable.", "The design doc explains the changes well, and the code snippets are well organized.", "The only thing that could be improved is that the code is not described in prose, but in prose.", "This is not a good way to explain the changes.", "Also, the code changes are not described.", "the code changes are shown in a table, but not in prose; it would be better to show the code changes in prose (e.g., in the code).", "The code snippets should be shown in prose rather than in prose in the document."], [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0]], "259": ["Keeping this in mind our code is set to work under the following conditions: 1. Assignment teams created for an assignment without topics 2. Mentors ( Instructors and TAs ) are only assigned to assignment teams if they have been added to an assignment as participants We've created the following <link> to demonstrate the added functionality. As well as the following <link> which demonstrates what happens when teams are created when no mentors have been added as participants to an assignment. 1. Assign a TA or instructor as a mentor for a team created for an assignment without topics. Do not put email code in the Team class). <link>. Our implementation begins when an assignment team is created. If the assignment is associated with a topic, the created team will not be assigned a mentor. This hash is created from the TAs and instructors added to the assignment as participants. The keys of the hash correspond to the mentor's participant id while their values are the number of times the mentor has been assigned to mentor teams. The mentor with the lowest number of assigned teams will be the next mentor assigned to a newly created team. Once the team is assigned a mentor, an email is sent out to the mentor and students in the team to notify them of their mentor assignment. First Design: <image> Ultimately we were able to implement the following design: Final Design: <image> We created the following assignment_teams_mentors table with the following connections to existing tables. The new table created is responsible for storing all the mentors assigned to the various teams created. This column will help determine what TAs and instructors can mentor for a specified assignment. Currently instructors see the corresponding view when looking at teams associated with an assignment: <image> Our team proposed adding an additional \"Mentors\" column in the instructor view: <image> Currently students see the corresponding view when looking at their team for an assignment: <image> Our team originally proposed to add an additional \"Mentors\" section in the student view: <image>. The assignment_team_mentors table is responsible for storing all the mentors assigned to the various assignment teams created. 1.2. Created a can_mentor column for the participants table in order to be able to know who was a mentor and who was a student. <image> Models 1. assignment_team_mentor.rb 1.1. Responsible for ensuring mentor with the least number of teams mentored, gets assigned to the next team created. 1.2. Started to add mailer functionality for notifying the mentor assigned. This ensures a team only has one team mentor. This provides the flexibility of a potential mentor added as a participant to an assignment, to mentor multiple teams created for an assignment. <image> Controllers 1. teams_controller.rb 1.1. The following code was added within the create method. 1.2. Calls on AssignmentTeamMentor to assign mentor for instructor created teams. Will generate notice if unable to assign mentor to recently created team. <image> 1. 1.1. The following code was added within the list method. 1.2. A hash is generated with the assigned mentor of each team. <image> 1. student_teams_controllers.rb 1.1. The following code was added within the create method. 1.2. Calls on AssignmentTeamMentor to assign mentor for student created teams. Will generate notice if unable to assign mentor to recently created team. <image> 1. 1.1. The following code was added within the view method. <image> 1. teams_user_controller.rb 1.1. added code to send the email when a user is added to a team to the mentor. <image> 1. views/tree_display/_row_header.html.erb 1.1. displays either mentor assigned or \"No mentor assigned\" for team level. <image> 1. views/student_teams/view.html.erb 1.1. responsible for displaying to a student the mentor assigned to their team for an assignment. <image>. This button is how we decide if we need to assign mentors to a team. As an instructor we were able to confirm the following UI changes after mentors were assigned to teams: <image> As a student we were able to confirm the following UI changes when a mentor has been assigned to their team: <image> The following <link> further expands on this UI testing. As an instructor we were able to confirm the following UI changes after teams were created when no mentors had been added participants: <image> As a student we were able to confirm the following UI changes when a team was created without mentor participants for the assignment: <image> The following <link> further expands on this UI testing. 1. Providing ability to manually select the mentor for a team created. <image> 1. Refactor email functionality code and continue to develop to allow for the assignment team members to be notified of new assigned mentor or any other added members. <image>. <link> <link> <link> <link> <link>.", ["The design doc is very readable.", "The design doc explains the changes well, and explains the rationale for them.", "The code snippets are not too long, and The code snippets should be separated from the code.", "The code snippets should be shown in a separate section.", "Also, the code is not very readable, and the code would be helpful to have a link to the code in the code to show the code changes.", "that Also, the code is not very readable, and the code would be helpful to have a link to the code in the code to show the code changes is a good example of how the code should be structured.", "I would have liked to see more of the code flow diagram."], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0]]}